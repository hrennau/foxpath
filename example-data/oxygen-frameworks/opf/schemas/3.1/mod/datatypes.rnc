[ xml:id = "datatypes-common" ]
div {
  datatype.ID = datatype.ID.lexical
  datatype.IDREF = datatype.IDREF.lexical
  datatype.IDREFS = datatype.IDREFS.lexical
    
  datatype.languagecode = datatype.BCP47
  # http://www.w3.org/TR/xmlschema11-2/#language
  datatype.BCP47 = xsd:language { pattern = "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*" }
  # http://www.w3.org/TR/xmlschema11-2/#ID  
  datatype.ID.xsd = xsd:ID
  # http://www.w3.org/TR/xmlschema11-2/#NCName
  datatype.IDREF.lexical = xsd:NCName
  datatype.IDREFS.lexical = list { datatype.IDREF.lexical+ }
  datatype.ID.lexical = xsd:NCName
  # http://www.w3.org/TR/xmlschema11-2/#IDREF
  datatype.IDREF.xsd = xsd:IDREF
  # http://www.w3.org/TR/xmlschema11-2/#IDREFS
  datatype.IDREFS.xsd = xsd:IDREFS  
  # http://www.w3.org/TR/xmlschema11-2/#NMTOKEN
  datatype.NMTOKEN = xsd:NMTOKEN
  # http://www.w3.org/TR/xmlschema11-2/#NMTOKENS  
  datatype.NMTOKENS = xsd:NMTOKENS
  # http://www.w3.org/TR/xmlschema11-2/#string
  datatype.string = xsd:string
  datatype.string.nonempty = xsd:token { minLength='1' }    
  datatype.text = text
  # http://www.w3.org/TR/xmlschema11-2/#nt-dateRep
  datatype.date = xsd:date
  # http://www.w3.org/TR/xmlschema11-2/#nt-dateTimeRep
  datatype.dateTime = xsd:dateTime
  # http://www.w3.org/TR/xmlschema11-2/#nt-timeRep
  datatype.date.or.dateTime = datatype.date | datatype.dateTime     
  datatype.LEIRI = xsd:anyURI
  # http://www.w3.org/TR/xmlschema11-2/#anyURI
  # http://tools.ietf.org/html/rfc3986#appendix-B
  # http://www.w3.org/TR/html5/urls.html#valid-url-potentially-surrounded-by-spaces  
  datatype.URI = xsd:anyURI
  datatype.URI.absolute = xsd:string { pattern='\c+:.+' }
  datatype.IRI = datatype.URI  
  datatype.character.encoding = datatype.iana.charset
  datatype.iana.charset = xsd:NMTOKEN  
  # http://www.w3.org/TR/html5/infrastructure.html#valid-mime-type
  # http://tools.ietf.org/html/rfc4288#section-4.2
  # http://tools.ietf.org/html/rfc2616#section-3.7
  datatype.mimetype = xsd:string { pattern='[a-zA-Z0-9!#$&+\-\^_]+/[a-zA-Z0-9!#$&+\-\^_]+.*' }  
  datatype.mimetype.nocharset = datatype.mimetype
  # http://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#non-negative-integers
  datatype.non-negative.integer = xsd:nonNegativeInteger
  # http://www.w3.org/TR/xmlschema11-2/#positiveInteger
  datatype.positive.integer = xsd:positiveInteger
  # http://www.w3.org/TR/xmlschema11-2/#integer  
  datatype.integer = xsd:integer
  # http://www.w3.org/TR/xmlschema11-2/#nt-floatRep
  # http://www.w3.org/TR/html5/common-microsyntaxes.html#real-numbers
  datatype.float = xsd:float
  datatype.float.positive = xsd:float { minExclusive = '0'}
  datatype.float.non-negative = xsd:float { minInclusive = '0' }
  datatype.token = xsd:string { pattern = '[^\s]+' }
  datatype.space.separated.tokens = list { datatype.token* }
  
}
[ xml:id = "datatypes-smil" ]
div {
  # http://www.w3.org/TR/smil/smil-timing.html#TimingSyntax-Full-clock-value
  # http://www.w3.org/TR/smil/smil-timing.html#TimingSyntax-Partial-clock-value
  # http://www.w3.org/TR/smil/smil-timing.html#TimingSyntax-Timecount-value
  datatype.smil.npt =
    xsd:string { pattern = "(\s*)([0-9]+:)?[0-5][0-9]:[0-5][0-9](\.[0-9]+)?(\s*)" }
  | xsd:string { pattern = "(\s*)[0-9]+(\.[0-9]+)?(h|min|s|ms)?(\s*)" }          
}

[ xml:id = "datatypes-vocab" ]
div {
  datatype.property = xsd:NMTOKEN
  datatype.properties = xsd:NMTOKENS
  datatype.prefixdecl = text  #\s*([\i-[:]][\c-[:]]*: +[^ ]+)(\s+[\i-[:]][\c-[:]]*: +[^ ]+)*\s*
}

[ xml:id = "datatypes-ssml" ]
div {
  # http://www.w3.org/TR/speech-synthesis11/#edef_phoneme
  datatype.ssml.PhoneticExpression = xsd:string
  datatype.ssml.PhoneticAlphabet = xsd:string { pattern = "(ipa|x-.+)" }
}
