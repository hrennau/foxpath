<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
  targetNamespace="http://www.oxygenxml.com/ns/ccfilter/config"
  xmlns="http://www.oxygenxml.com/ns/ccfilter/config">

  <xs:import namespace="http://www.w3.org/1999/xhtml"
    schemaLocation="http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd"/>
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>

  <xs:element name="config">
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="match"/>
          <xs:element ref="elementProposals"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="elementRenderings"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="match">
    <xs:annotation>
      <xs:documentation>Contains information that will match on an XML element. It will offer proposals for that element.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0">
        <xs:element ref="items"/>
        <xs:element ref="xslt"/>
      </xs:choice>
      <xs:attribute name="elementName" type="xs:NCName">
        <xs:annotation>
          <xs:documentation>Local name of the element for which we offer proposals. If the attrName is missing then we are offering proposals for the element value. If attrName is present the elementName is used just as a scope restriction.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="elementNS" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>Namespace of the element for which we offer proposals. If missing will be considered any namespace.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="attributeName" type="xs:NCName">
        <xs:annotation>
          <xs:documentation>The local name of the attribute for which we offer proposals. If elementName is also present then the attribute must be present on that element.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="attributeNS" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>The namespace of the attribute. If missing it will be considered any namespace.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="editable" default="true">
        <xs:annotation>
          <xs:documentation>"true" if the attribute is fully editable, "false" if it is not editable at all, or "onlyAllowedItems" if the attribute can only have a value from a given list.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
            <xs:enumeration value="onlyAllowedItems"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="items">
    <xs:annotation>
      <xs:documentation>Container for the content completion proposals.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="item" minOccurs="0"/>
      </xs:sequence>
      <xs:attributeGroup ref="actionGr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="annotation">
    <xs:annotation>
      <xs:documentation>The annotation to take with the provided item. Use the html element from the http://www.w3.org/1999/xhtml namespace if you need to format it as HTML in the editor. </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:sequence minOccurs="0">
        <xs:any namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
      <xs:attribute ref="xml:space">
        <xs:annotation>
          <xs:documentation>If the content is a simple text then we can control how it is treated.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="item">
    <xs:annotation>
      <xs:documentation>A content completion proposal item.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence minOccurs="0">
        <xs:element ref="annotation"/>
      </xs:sequence>
      <xs:attribute name="value" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The value to be inserted in the document.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="annotation" type="xs:string">
        <xs:annotation>
          <xs:documentation>A documentation for this proposal.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="listValue" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><code>true</code> if the value is part of a list of values. If true, this value will be presented when there is already a value so you can create compound values. Ex: "val1 val2 val3".</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="xslt">
    <xs:annotation>
      <xs:documentation>The proposals are obtain by executing an XSLT. This XSLT output must be an "items" element.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="href" use="required" type="xs:anyURI"/>
      <xs:attribute name="useCache" use="required" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>true if the XSLT will only be executed once and the results reused weach time they are needed. false to execute the XSLT every time the proposals are requested.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="actionGr"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="elementProposals">
    <xs:annotation>
      <xs:documentation>Redefines the list of content completion assistant proposals for an element.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element name="insertAttribute">
          <xs:annotation>
            <xs:documentation>Information about an attribute which should be inserted when the element is inserted.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="name" type="xs:QName" use="required">
              <xs:annotation>
                <xs:documentation>The attribute name.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string">
              <xs:annotation>
                <xs:documentation>The default value to set for the attribute when it is inserted.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="path" use="optional" type="pathType">
        <xs:annotation>
          <xs:documentation>
            The path matching the element to have its model replaced. Examples:
            <ul>
              <li>ol/li</li>
              <li>table/tr/td</li>
              <li>title</li>
          </ul>
          <p>Examples of accepted attribute conditions:</p>
            <ul>
              <li>li[@a][@b]</li>
              <li>li[@a and @b or @c and @d]</li>
              <li>li[@a and (@b or @c) and @d]</li>
              <li>li*[not(@a) and @b or @c and not(@d)]</li>
            </ul>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>

      <xs:attribute name="insertElements" use="optional" type="listOfQNames">
        <xs:annotation>
          <xs:documentation>The list of elements that are inserted together with the parent element. 
            For instance having the value "A  B C" will insert a fragment like &lt;A/>&lt;B/>&lt;/C>, 
            possibly each of the three elements will have their required content also expanded. 
            If this attribute is empty then no elements will be inserted.
            If this attribute is missing, then the elements required by the associated schema will be inserted.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>

      <xs:attribute name="rejectElements" use="optional" type="listOfTokens">
        <xs:annotation>
          <xs:documentation>The list of rejected elements. Use this to filter out some of the elements proposed by the associated document schema.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="possibleElements" use="optional" type="possibleType">
        <xs:annotation>
          <xs:documentation>The list of elements that are allowed to appear in the 
            content completion assistant list, when invoked inside the parent element. 
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>

      <xs:attribute name="insertAttributes" use="optional" type="listOfQNames">
        <xs:annotation>
          <xs:documentation>The list of attributes that are inserted together with the parent element. 
            For instance having the value "A  B C" will insert a fragment like &lt;elemnt A="" B="" C=""> , 
            If this attribute is empty then no elements will be inserted.
            If this attribute is missing, then the attributes required by the associated schema will be inserted.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="possibleAttributes" use="optional" type="possibleType">
        <xs:annotation>
          <xs:documentation>The list of attributes that are allowed to appear in the 
            content completion assistant list. 
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rejectAttributes" type="listOfTokens">
        <xs:annotation>
          <xs:documentation>The list of rejected attributes. Use this to filter out some of the attributes proposed by the associated document schema.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="possibleType">
    <xs:union>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="_NONE_"/>
          <xs:enumeration value="_ALL_"/>
          <xs:enumeration value="_INSERTED_"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType>
        <xs:list itemType="xs:token"/>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>


  <xs:simpleType name="listOfQNames">
    <xs:list itemType="xs:QName"/>
  </xs:simpleType>

  <xs:simpleType name="listOfTokens">
    <xs:list itemType="xs:token"/>
  </xs:simpleType>


  <xs:simpleType name="pathType">
    <xs:restriction base="xs:string">
      <xs:pattern value="([\i\c]+(\[.*\])*)+(/([\i\c]+(\[.*\])*))*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:attributeGroup name="actionGr">
    <xs:attribute name="action" default="append">
      <xs:annotation>
        <xs:documentation>The action to take with the provided item. They can either replace the default proposals or just contribute to them.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NCName">
          <xs:enumeration value="replace"/>
          <xs:enumeration value="append"/>
          <xs:enumeration value="addIfEmpty">
            <xs:annotation>
              <xs:documentation>Appends the values but only if there aren't any values already available for that element/attribute.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>


  <xs:element name="language">
    <xs:annotation>
      <xs:documentation>Defines a set of name to descriptive text mappings for a language. If the language attribute is missing, then this mapping will be used for all languages (as a of fallback).</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence> </xs:sequence>
      <xs:attribute ref="xml:lang"/>
    </xs:complexType>
  </xs:element>


  <xs:element name="render">
    <xs:complexType>

      <xs:sequence>
        <xs:element ref="annotation" maxOccurs="1" minOccurs="0"/>
      </xs:sequence>

      <xs:attribute ref="xml:lang"/>
      <xs:attribute name="element" type="xs:QName" use="required"/>
      <xs:attribute name="as" type="xs:string"/>
      <xs:attribute name="iconPath" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>This can be relative to the configuration file, or can be a full URL. If it starts with a "/" it will be searched in the oXygen classpath resources.</xs:documentation>
        </xs:annotation>
      </xs:attribute>

    </xs:complexType>
  </xs:element>

  <xs:element name="elementRenderings">
    <xs:annotation>
      <xs:documentation>Describes how the elements are to be rendered by the editor
</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="render"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
