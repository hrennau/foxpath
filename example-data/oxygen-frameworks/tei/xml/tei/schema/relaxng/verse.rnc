namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"

# Schema generated 2017-07-10T17:55:54Z
# Edition: VersionÂ 3.2.0. Last updated on
#	10th July 2017, revision 0fcf651
# This material is dual-licensed.
# [http://creativecommons.org/licenses/by/3.0/] Distributed under a Creative Commons Attribution 3.0 Unported License.  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2017 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the TEI Consortium. Verse structures

# Definitions from module verse

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
att.metrical.attributes =
  att.metrical.attribute.met,
  att.metrical.attribute.real,
  att.metrical.attribute.rhyme
att.metrical.attribute.met =
  
  ## (metrical structure, conventional) contains a user-specified encoding for the conventional metrical structure of the element.
  attribute met { xsd:token }?
att.metrical.attribute.real =
  
  ## (metrical structure, realized) contains a user-specified encoding for the actual realization of the conventional metrical structure applicable to the element.
  attribute real { xsd:token }?
att.metrical.attribute.rhyme =
  
  ## (rhyme scheme) specifies the rhyme scheme applicable to a group of verse lines.
  attribute rhyme { xsd:token }?
att.enjamb.attributes = att.enjamb.attribute.enjamb
att.enjamb.attribute.enjamb =
  
  ## (enjambement) indicates that the end of a verse line is marked by enjambement.
  ## Sample values include: 1] no; 2] yes; 3] weak; 4] strong
  attribute enjamb {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
# 2. elements
caesura =
  
  ## marks the point at which a metrical line may be divided. []
  element caesura { caesura.content, caesura.localattributes }
caesura.content = empty
caesura.localattributes = att.global.attributes, empty
metDecl =
  
  ## (metrical notation declaration) documents the notation employed to represent a metrical pattern when this is specified as the value of a met, real, or rhyme attribute on any structural element of a metrical text (e.g. lg, l, or seg). [ ]
  element metDecl { metDecl.content, metDecl.localattributes }
metDecl.content = (model.pLike | model.noteLike)+ | metSym+
metDecl.localattributes =
  att.global.attributes,
  att.declarable.attributes,
  
  ## indicates whether the notation conveys the abstract metrical form, its actual prosodic realization, or the rhyme scheme, or some combination thereof.
  [ a:defaultValue = "met real" ]
  attribute type {
    list {
      (
       ## (met attribute) declaration applies to the abstract metrical form recorded on the met attribute
       "met"
       | 
         ## (real attribute) declaration applies to the actual realization of the conventional metrical structure recorded on the real attribute
         "real"
       | 
         ## declaration applies to the rhyme scheme recorded on the rhyme attribute
         "rhyme"),
      (
       ## (met attribute) declaration applies to the abstract metrical form recorded on the met attribute
       "met"
       | 
         ## (real attribute) declaration applies to the actual realization of the conventional metrical structure recorded on the real attribute
         "real"
       | 
         ## declaration applies to the rhyme scheme recorded on the rhyme attribute
         "rhyme")?,
      (
       ## (met attribute) declaration applies to the abstract metrical form recorded on the met attribute
       "met"
       | 
         ## (real attribute) declaration applies to the actual realization of the conventional metrical structure recorded on the real attribute
         "real"
       | 
         ## declaration applies to the rhyme scheme recorded on the rhyme attribute
         "rhyme")?
    }
  }?,
  
  ## (regular expression pattern) specifies a regular expression defining any value that is legal for this notation.
  attribute pattern { xsd:token }?,
  empty
metSym =
  
  ## (metrical notation symbol) documents the intended significance of a particular character or character sequence within a metrical notation, either explicitly or in terms of other metSym elements in the same metDecl. []
  element metSym { metSym.content, metSym.localattributes }
metSym.content = macro.phraseSeq.limited
metSym.localattributes =
  att.global.attributes,
  
  ## specifies the character or character sequence being documented.
  attribute value {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  },
  
  ## specifies whether the symbol is defined in terms of other symbols (terminal is set to false) or in prose (terminal is set to true).
  [ a:defaultValue = "true" ] attribute terminal { xsd:boolean }?,
  empty
rhyme =
  
  ## marks the rhyming part of a metrical line. []
  element rhyme { rhyme.content, rhyme.localattributes }
rhyme.content = macro.paraContent
rhyme.localattributes =
  att.global.attributes,
  att.typed.attributes,
  
  ## provides a label (usually a single letter) to identify which part of a rhyme scheme this rhyming string instantiates.
  attribute label {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?,
  empty
# 3. macros
