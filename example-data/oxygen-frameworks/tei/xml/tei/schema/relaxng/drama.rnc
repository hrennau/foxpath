namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"

# Schema generated 2017-07-10T17:55:54Z
# Edition: VersionÂ 3.2.0. Last updated on
#	10th July 2017, revision 0fcf651
# This material is dual-licensed.
# [http://creativecommons.org/licenses/by/3.0/] Distributed under a Creative Commons Attribution 3.0 Unported License.  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2017 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the TEI Consortium. Performance texts

# Definitions from module drama

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes

# 2. elements
actor =
  
  ## contains the name of an actor appearing within a cast list. []
  element actor { actor.content, actor.localattributes }
actor.content = macro.phraseSeq
actor.localattributes =
  att.global.attributes, att.canonical.attributes, empty
camera =
  
  ## describes a particular camera angle or viewpoint in a screen play. [ ]
  element camera { camera.content, camera.localattributes }
camera.content = macro.paraContent
camera.localattributes =
  att.global.attributes, att.typed.attributes, empty
caption =
  
  ## contains the text of a caption or other text displayed as part of a film script or screenplay. [ ]
  element caption { caption.content, caption.localattributes }
caption.content = macro.paraContent
caption.localattributes = att.global.attributes, empty
castGroup =
  
  ## (cast list grouping) groups one or more individual castItem elements within a cast list. []
  element castGroup { castGroup.content, castGroup.localattributes }
castGroup.content =
  (model.global | model.headLike)*,
  ((castItem | castGroup | roleDesc), model.global*)+,
  (trailer, model.global*)?
castGroup.localattributes = att.global.attributes, empty
castItem =
  
  ## (cast list item) contains a single entry within a cast list, describing either a single role or a list of non-speaking roles. []
  element castItem { castItem.content, castItem.localattributes }
castItem.content =
  (text
   | model.gLike
   | model.castItemPart
   | model.phrase
   | model.global)*
castItem.localattributes =
  att.global.attributes,
  
  ## characterizes the cast item.
  [ a:defaultValue = "role" ]
  attribute type {
    
    ## the item describes a single role.
    "role"
    | 
      ## the item describes a list of non-speaking roles.
      "list"
  }?,
  empty
castList =
  
  ## (cast list) contains a single cast list or dramatis personae. [ ]
  element castList { castList.content, castList.localattributes }
castList.content =
  (model.divTop | model.global)*,
  (model.common, model.global*)*,
  ((castItem | castGroup), model.global*)+,
  (model.common, model.global*)*
castList.localattributes = att.global.attributes, empty
epilogue =
  
  ## contains the epilogue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. [ ]
  element epilogue { epilogue.content, epilogue.localattributes }
epilogue.content =
  (model.divTop | model.global)*,
  (model.common, model.global*)+,
  (model.divBottom, model.global*)*
epilogue.localattributes = att.global.attributes, empty
move =
  
  ## (movement) marks the actual entrance or exit of one or more characters on stage. []
  element move { move.content, move.localattributes }
move.content = empty
move.localattributes =
  att.global.attributes,
  att.ascribed.attributes,
  
  ## characterizes the movement, for example as an entrance or exit.
  ## Suggested values include: 1] entrance; 2] exit; 3] onStage
  attribute type {
    
    ## character is entering the stage.
    "entrance"
    | 
      ## character is exiting the stage.
      "exit"
    | 
      ## character moves on stage
      "onStage"
    | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?,
  
  ## specifies the direction of a stage movement.
  ## Sample values include: 1] L(left) ; 2] R(right) ; 3] C(center) 
  attribute where {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?,
  
  ## (performance) identifies the performance or performances in which this movement occurred as specified by pointing to one or more performance elements.
  attribute perf {
    list { xsd:anyURI+ }
  }?,
  empty
performance =
  
  ## contains a section of front or back matter describing how a dramatic piece is to be performed in general or how it was performed on some specific occasion. [ ]
  element performance {
    performance.content, performance.localattributes
  }
performance.content =
  (model.divTop | model.global)*,
  (model.common, model.global*)+,
  (model.divBottom, model.global*)*
performance.localattributes = att.global.attributes, empty
prologue =
  
  ## contains the prologue to a drama, typically spoken by an actor out of character, possibly in association with a particular performance or venue. [ ]
  element prologue { prologue.content, prologue.localattributes }
prologue.content =
  (model.divTop | model.global)*,
  (model.common, model.global*)+,
  (model.divBottom, model.global*)*
prologue.localattributes = att.global.attributes, empty
role =
  
  ## contains the name of a dramatic role, as given in a cast list. []
  element role { role.content, role.localattributes }
role.content = macro.phraseSeq
role.localattributes = att.global.attributes, empty
roleDesc =
  
  ## (role description) describes a character's role in a drama. []
  element roleDesc { roleDesc.content, roleDesc.localattributes }
roleDesc.content = macro.phraseSeq
roleDesc.localattributes = att.global.attributes, empty
set =
  
  ## (setting) contains a description of the setting, time, locale, appearance, etc., of the action of a play, typically found in the front matter of a printed performance text (not a stage direction). []
  element set { set.content, set.localattributes }
set.content =
  (model.headLike | model.global)*, (model.common, model.global*)*
set.localattributes = att.global.attributes, empty
sound =
  
  ## describes a sound effect or musical sequence specified within a screen play or radio script. [ ]
  element sound { sound.content, sound.localattributes }
sound.content = macro.paraContent
sound.localattributes =
  att.global.attributes,
  
  ## categorizes the sound in some respect, e.g. as music, special effect, etc.
  attribute type {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?,
  
  ## indicates whether the sound overlaps the surrounding speeches or interrupts them.
  [ a:defaultValue = "unknown" ]
  attribute discrete {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?,
  empty
spGrp =
  
  ## (speech group) contains a group of speeches or songs in a performance text presented in a source as constituting a single unit or number. []
  element spGrp { spGrp.content, spGrp.localattributes }
spGrp.content = model.headLike*, (model.global | sp | model.stageLike)+
spGrp.localattributes =
  att.global.attributes,
  att.typed.attributes,
  att.ascribed.attributes,
  empty
tech =
  
  ## (technical stage direction) describes a special-purpose stage direction that is not meant for the actors. []
  element tech { tech.content, tech.localattributes }
tech.content = macro.paraContent
tech.localattributes =
  att.global.attributes,
  
  ## categorizes the technical stage direction.
  attribute type {
    
    ## a lighting cue
    "light"
    | 
      ## a sound cue
      "sound"
    | 
      ## a prop cue
      "prop"
    | 
      ## a blocking instruction
      "block"
  }?,
  
  ## (performance) points to one or more performance elements documenting the performance or performances to which this technical direction applies.
  attribute perf {
    list { xsd:anyURI+ }
  }?,
  empty
view =
  
  ## describes the visual context of some part of a screen play in terms of what the spectator sees, generally independent of any dialogue. [ ]
  element view { view.content, view.localattributes }
view.content = macro.specialPara
view.localattributes = att.global.attributes, empty
# 3. macros
