namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"

# Schema generated 2017-07-10T17:55:54Z
# Edition: VersionÂ 3.2.0. Last updated on
#	10th July 2017, revision 0fcf651
# This material is dual-licensed.
# [http://creativecommons.org/licenses/by/3.0/] Distributed under a Creative Commons Attribution 3.0 Unported License.  [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2017 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the TEI Consortium. Critical Apparatus

# Definitions from module textcrit

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
model.rdgLike = rdg
model.rdgLike_alternation = rdg
model.rdgLike_sequence = rdg
model.rdgLike_sequenceOptional = rdg?
model.rdgLike_sequenceOptionalRepeatable = rdg*
model.rdgLike_sequenceRepeatable = rdg+
model.rdgPart = wit | witStart | witEnd | lacunaStart | lacunaEnd
model.rdgPart_alternation =
  wit | witStart | witEnd | lacunaStart | lacunaEnd
model.rdgPart_sequence = wit, witStart, witEnd, lacunaStart, lacunaEnd
model.rdgPart_sequenceOptional =
  wit?, witStart?, witEnd?, lacunaStart?, lacunaEnd?
model.rdgPart_sequenceOptionalRepeatable =
  wit*, witStart*, witEnd*, lacunaStart*, lacunaEnd*
model.rdgPart_sequenceRepeatable =
  wit+, witStart+, witEnd+, lacunaStart+, lacunaEnd+
att.rdgPart.attributes = att.rdgPart.attribute.wit
att.rdgPart.attribute.wit =
  
  ## (witness or witnesses) contains a space-delimited list of one or more sigla indicating the witnesses to this reading beginning or ending at this point.
  attribute wit {
    list { xsd:anyURI+ }
  }?
att.witnessed.attributes = att.witnessed.attribute.wit
att.witnessed.attribute.wit =
  
  ## (witness or witnesses) contains a space-delimited list of one or more pointers indicating the witnesses which attest to a given reading.
  attribute wit {
    list { xsd:anyURI+ }
  }?
att.textCritical.attributes =
  att.written.attributes,
  att.textCritical.attribute.type,
  att.textCritical.attribute.cause,
  att.textCritical.attribute.varSeq,
  att.textCritical.attribute.require
att.textCritical.attribute.type =
  
  ## classifies the reading according to some useful typology.
  ## Sample values include: 1] substantive; 2] orthographic
  attribute type {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
att.textCritical.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  ## Sample values include: 1] homeoteleuton; 2] homeoarchy; 3] paleographicConfusion; 4] haplography; 5] dittography; 6] falseEmendation
  attribute cause {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
att.textCritical.attribute.varSeq =
  
  ## (variant sequence) provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants. 
  attribute varSeq { xsd:nonNegativeInteger }?
att.textCritical.attribute.require =
  
  ## points to other readings that are required when adopting the current reading or lemma.
  attribute require {
    list { xsd:anyURI+ }
  }?
# 2. elements
app =
  
  ## (apparatus entry) contains one entry in a critical apparatus, with an optional lemma and usually one or more readings or notes on the relevant passage. []
  element app { app.content, app.localattributes }
app.content = lem?, (model.rdgLike | model.noteLike | wit | rdgGrp)*
app.localattributes =
  att.global.attributes,
  
  ## classifies the variation contained in this element according to some convenient typology.
  attribute type {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?,
  
  ## identifies the beginning of the lemma in the base text.
  attribute from { xsd:anyURI }?,
  
  ## identifies the endpoint of the lemma in the base text.
  attribute to { xsd:anyURI }?,
  
  ## (location) indicates the location of the variation, when the location-referenced method of apparatus markup is used.
  attribute loc {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?,
  empty
lacunaEnd =
  
  ## indicates the end of a lacuna in a mostly complete textual witness. []
  element lacunaEnd { lacunaEnd.content, lacunaEnd.localattributes }
lacunaEnd.content = empty
lacunaEnd.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
lacunaStart =
  
  ## indicates the beginning of a lacuna in the text of a mostly complete textual witness. []
  element lacunaStart {
    lacunaStart.content, lacunaStart.localattributes
  }
lacunaStart.content = empty
lacunaStart.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
lem =
  
  ## (lemma) contains the lemma, or base text, of a textual variation. []
  element lem { lem.content, lem.localattributes }
lem.content =
  (text
   | model.divLike
   | model.divPart
   | model.gLike
   | model.phrase
   | model.inter
   | model.global
   | model.rdgPart)*
lem.localattributes =
  att.global.attributes,
  att.textCritical.attributes,
  att.witnessed.attributes,
  empty
listApp =
  
  ## (list of apparatus entries) contains a list of apparatus entries. []
  element listApp { listApp.content, listApp.localattributes }
listApp.content = model.headLike*, (app | listApp)+
listApp.localattributes =
  att.global.attributes,
  att.sortable.attributes,
  att.declarable.attributes,
  att.typed.attributes,
  empty
listWit =
  
  ## (witness list) lists definitions for all the witnesses referred to by a critical apparatus, optionally grouped hierarchically. []
  element listWit { listWit.content, listWit.localattributes }
listWit.content = model.headLike?, (witness | listWit)+
listWit.localattributes =
  att.global.attributes, att.sortable.attributes, empty
rdg =
  
  ## (reading) contains a single reading within a textual variation. []
  element rdg { rdg.content, rdg.localattributes }
rdg.content =
  (text
   | model.divLike
   | model.divPart
   | model.gLike
   | model.phrase
   | model.inter
   | model.global
   | model.rdgPart)*
rdg.localattributes =
  att.global.attributes,
  att.textCritical.attributes,
  att.witnessed.attributes,
  empty
rdgGrp =
  
  ## (reading group) within a textual variation, groups two or more readings perceived to have a genetic relationship or other affinity. []
  element rdgGrp { rdgGrp.content, rdgGrp.localattributes }
rdgGrp.content =
  (((rdgGrp, wit?)
    | ((lem, wit?)?, (model.rdgLike, wit?))*
    | model.noteLike*)+)
  >> sch:pattern [
       id = "rdgGrp-only1lem-constraint-assert-20"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:rdgGrp"
         "\x{a}" ~
         "            "
         sch:assert [
           test = "count(tei:lem) < 2"
           "Only one <lem> element may appear within a <rdgGrp>"
         ]
         "\x{a}" ~
         "         "
       ]
       "\x{a}" ~
       "      "
     ]
rdgGrp.localattributes =
  att.global.attributes, att.textCritical.attributes, empty
variantEncoding =
  
  ## declares the method used to encode text-critical variants. []
  element variantEncoding {
    variantEncoding.content, variantEncoding.localattributes
  }
variantEncoding.content = empty
variantEncoding.localattributes =
  att.global.attributes,
  
  ## indicates which method is used to encode the apparatus of variants.
  attribute method {
    
    ## apparatus uses line numbers or other canonical reference scheme referenced in a base text.
    "location-referenced"
    | 
      ## apparatus indicates the precise locations of the beginning and ending of each lemma relative to a base text.
      "double-end-point"
    | 
      ## alternate readings of a passage are given in parallel in the text; no notion of a base text is necessary.
      "parallel-segmentation"
  },
  
  ## indicates whether the apparatus appears within the running text or external to it.
  attribute location {
    
    ## apparatus appears within the running text.
    "internal"
    | 
      ## apparatus appears outside the base text.
      "external"
  }
  >> sch:pattern [
       id =
         "variantEncoding-location-variantEncodingLocation-constraint-rule-10"
       "\x{a}" ~
       "         "
       sch:rule [
         context = "tei:variantEncoding"
         "\x{a}" ~
         "            "
         sch:assert [
           test =
             "(@location != 'external') or (@method != 'parallel-segmentation')"
           "\x{a}" ~
           '              The @location value "external" is inconsistent with the\x{a}' ~
           "              parallel-segmentation method of apparatus markup."
         ]
         "\x{a}" ~
         "          "
       ]
       "\x{a}" ~
       "      "
     ],
  empty
wit =
  
  ## contains a list of one or more sigla of witnesses attesting a given reading, in a textual variation. []
  element wit { wit.content, wit.localattributes }
wit.content = macro.phraseSeq
wit.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
witDetail =
  
  ## (witness detail) gives further information about a particular witness, or witnesses, to a particular reading. []
  element witDetail { witDetail.content, witDetail.localattributes }
witDetail.content = macro.phraseSeq
witDetail.localattributes =
  att.global.attributes,
  att.placement.attributes,
  att.pointing.attributes,
  
  ## (witnesses) indicates the sigil or sigla identifying the witness or witnesses to which the detail refers.
  attribute wit {
    list { xsd:anyURI+ }
  },
  
  ## describes the type of information given about the witness.
  attribute type {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?,
  empty
witEnd =
  
  ## (fragmented witness end) indicates the end, or suspension, of the text of a fragmentary witness. []
  element witEnd { witEnd.content, witEnd.localattributes }
witEnd.content = empty
witEnd.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
witStart =
  
  ## (fragmented witness start) indicates the beginning, or resumption, of the text of a fragmentary witness. []
  element witStart { witStart.content, witStart.localattributes }
witStart.content = empty
witStart.localattributes =
  att.global.attributes, att.rdgPart.attributes, empty
witness =
  
  ## contains either a description of a single witness referred to within the critical apparatus, or a list of witnesses which is to be referred to by a single sigil. []
  element witness { witness.content, witness.localattributes }
witness.content = macro.limitedContent
witness.localattributes =
  att.global.attributes, att.sortable.attributes, empty
# 3. macros
