<?xml version="1.0" encoding="UTF-8"?>
<serialized version="19.1" xml:space="preserve">
	<serializableOrderedMap>
		<entry>
			<String>document.types</String>
			<documentTypeDescriptor-array>
				<documentTypeDescriptor>
					<field name="extensionPatch">
						<null/>
					</field>
					<field name="name">
						<String>DocBook 4</String>
					</field>
					<field name="schemaDescriptor">
						<docTypeSchema>
							<field name="type">
								<Integer>1</Integer>
							</field>
							<field name="uri">
								<String>${framework}/4.4/dtd/docbookx.dtd</String>
							</field>
						</docTypeSchema>
					</field>
					<field name="classpath">
						<String-array>
							<String>${framework}/docbook.jar</String>
							<String>${framework}/resources/</String>
							<String>${framework}/i18n/</String>
							<String>${framework}/styleguide/</String>
						</String-array>
					</field>
					<field name="parentClassLoaderID">
						<null/>
					</field>
					<field name="authorExtensionDescriptor">
						<authorExtension>
							<field name="cssDescriptors">
								<cssFile-array>
									<cssFile>
										<field name="href">
											<String>${framework}/css/docbook.css</String>
										</field>
										<field name="title">
											<String>Default</String>
										</field>
										<field name="alternate">
											<Boolean>false</Boolean>
										</field>
									</cssFile>
									<cssFile>
										<field name="href">
											<String>${framework}/css/show_colspec.css</String>
										</field>
										<field name="title">
											<String>+ Show colspec</String>
										</field>
										<field name="alternate">
											<Boolean>true</Boolean>
										</field>
									</cssFile>
									<cssFile>
										<field name="href">
											<String>${framework}/css/hide_colspec.css</String>
										</field>
										<field name="title">
											<String>+ Hide colspec</String>
										</field>
										<field name="alternate">
											<Boolean>true</Boolean>
										</field>
									</cssFile>
									<cssFile>
										<field name="href">
											<String>${framework}/css/docbook_coloured_revisions.css</String>
										</field>
										<field name="title">
											<String>+ Colored revision changes</String>
										</field>
										<field name="alternate">
											<Boolean>true</Boolean>
										</field>
									</cssFile>
									<cssFile>
										<field name="href">
											<String>${framework}/css/alternate-full-width-layout.css</String>
										</field>
										<field name="title">
											<String>+ Full width</String>
										</field>
										<field name="alternate">
											<Boolean>true</Boolean>
										</field>
									</cssFile>
									<cssFile>
										<field name="href">
											<String>${framework}/css/webauthor/profiling.css</String>
										</field>
										<field name="title">
											<String></String>
										</field>
										<field name="alternate">
											<Boolean>false</Boolean>
										</field>
									</cssFile>
								</cssFile-array>
							</field>
							<field name="mergeCSSsFromDocument">
								<Boolean>true</Boolean>
							</field>
							<field name="multipleAlternateSelectionEnabled">
								<Boolean>true</Boolean>
							</field>
							<field name="actionDescriptors">
								<action-array>
									<action>
										<field name="id">
											<String>bold</String>
										</field>
										<field name="name">
											<String>${i18n(bold)}</String>
										</field>
										<field name="description">
											<String>${i18n(bold_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Bold24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Bold16.png</String>
										</field>
										<field name="accessKey">
											<String>B</String>
										</field>
										<field name="accelerator">
											<String>M1 B</String>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>element</String>
																<String>&lt;emphasis role="bold"/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.ToggleSurroundWithElementOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>italic</String>
										</field>
										<field name="name">
											<String>${i18n(italic)}</String>
										</field>
										<field name="description">
											<String>${i18n(italic_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Italic24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Italic16.png</String>
										</field>
										<field name="accessKey">
											<String>I</String>
										</field>
										<field name="accelerator">
											<String>M1 I</String>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>element</String>
																<String>&lt;emphasis/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.ToggleSurroundWithElementOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>underline</String>
										</field>
										<field name="name">
											<String>${i18n(underline)}</String>
										</field>
										<field name="description">
											<String>${i18n(underline_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Underline24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Underline16.png</String>
										</field>
										<field name="accessKey">
											<String>U</String>
										</field>
										<field name="accelerator">
											<String>M1 U</String>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>element</String>
																<String>&lt;emphasis role="underline"/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.ToggleSurroundWithElementOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>para</String>
										</field>
										<field name="name">
											<String>${i18n(para)}</String>
										</field>
										<field name="description">
											<String>${i18n(para_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Paragraph24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Paragraph16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<String>M1 M2 P</String>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>self::listitem</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;para/></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>self::listitem[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::para</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;para/></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::para[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::title</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;para/></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::title[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;para/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>listitem</String>
										</field>
										<field name="name">
											<String>${i18n(listitem)}</String>
										</field>
										<field name="description">
											<String>${i18n(listitem_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/ListItem24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/ListItem16.gif</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>self::variablelist</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;varlistentry>&lt;term/>&lt;listitem>&lt;para/>&lt;/listitem>&lt;/varlistentry></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertOrReplaceFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::variablelist | self::varlistentry][1][self::variablelist]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;varlistentry>&lt;term/>&lt;listitem>&lt;para/>&lt;/listitem>&lt;/varlistentry></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::variablelist][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::variablelist | self::itemizedlist | self::orderedlist | self::procedure][1][self::variablelist]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;varlistentry>&lt;term/>&lt;listitem>&lt;para/>&lt;/listitem>&lt;/varlistentry></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::varlistentry[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::procedure</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;step>&lt;para/>&lt;/step></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertOrReplaceFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::procedure | self::step][1][self::procedure]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;step>&lt;para/>&lt;/step></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::procedure][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::variablelist | self::itemizedlist | self::orderedlist | self::procedure][1][self::procedure]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;step>&lt;para/>&lt;/step></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::step[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::listitem | self::itemizedlist | self::orderedlist][1][self::listitem]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;listitem>&lt;para/>&lt;/listitem></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::listitem[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::orderedlist | self::itemizedlist][1]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;listitem>&lt;para/>&lt;/listitem></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>orderedlist</String>
										</field>
										<field name="name">
											<String>${i18n(orderedlist)}</String>
										</field>
										<field name="description">
											<String>${i18n(orderedList_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/OrderedList24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/OrderedList16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.DB4InsertListOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>itemizedlist</String>
										</field>
										<field name="name">
											<String>${i18n(itemizedlist)}</String>
										</field>
										<field name="description">
											<String>${i18n(itemizedlist_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/UnorderedList24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/UnorderedList16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>listType</String>
																<String>itemizedlist</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.DB4InsertListOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>variablelist</String>
										</field>
										<field name="name">
											<String>${i18n(variablelist)}</String>
										</field>
										<field name="description">
											<String>${i18n(variablelist_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/VariableList24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/VariableList16.gif</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>listType</String>
																<String>variablelist</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.DB4InsertListOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>section</String>
										</field>
										<field name="name">
											<String>${i18n(section)}</String>
										</field>
										<field name="description">
											<String>${i18n(section_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Section24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Section16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>self::sect4</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect5>&lt;title/>&lt;para/>&lt;/sect5></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::sect4</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect5>&lt;title/>&lt;para/>&lt;/sect5></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::sect4][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::sect3</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect4>&lt;title/>&lt;para/>&lt;/sect4></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::sect3</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect4>&lt;title/>&lt;para/>&lt;/sect4></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::sect3][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::sect2</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect3>&lt;title/>&lt;para/>&lt;/sect3></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::sect2</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect3>&lt;title/>&lt;para/>&lt;/sect3></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::sect2][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::sect1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect2>&lt;title/>&lt;para/>&lt;/sect2></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::sect1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect2>&lt;title/>&lt;para/>&lt;/sect2></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::sect1][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("sect1") and sect1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;sect1>&lt;title/>&lt;para/>&lt;/sect1></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::section</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;section>&lt;title/>&lt;para/>&lt;/section></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::section</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;section>&lt;title/>&lt;para/>&lt;/section></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[parent::section][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("section")</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;section>&lt;title/>&lt;para/>&lt;/section></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as last child</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Table24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Table16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("table") or
oxy:allows-child-element("entrytbl") or 
oxy:allows-child-element("informaltable") or 
exists(self::article)
</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>defaultNamespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.table.InsertTableOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.row.below</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.row.below)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.row.below_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableRow24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableRow16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::tbody | self::tfoot | self::thead)[parent::tgroup]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::tbody | self::tfoot</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::thead</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::table | self::informaltable][1][self::row][parent::tbody | parent::tfoot | parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::row[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[parent::tbody | parent::tfoot | parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::tr[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::tr[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.entry</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.entry)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.entry_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableCell24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableCell16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>self::row</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;entry/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::tr[parent::tbody | parent::tfoot | parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;td/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::tr[parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;th/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::thead | self::tbody | self::tfoot) [parent::tgroup]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;row>&lt;entry/>&lt;/row></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::thead[parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;tr>&lt;th/>&lt;/tr></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::tbody  | self::tfoot) [parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;tr>&lt;td/>&lt;/tr></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::entry]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;entry/></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::entry[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[1][parent::tbody | parent::tfoot | parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;td/></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[self::td | self::th][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[1][parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;th/></String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::node()[self::td | self::th][1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.join.row.cells</String>
										</field>
										<field name="name">
											<String>${i18n(table.join.row.cells)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.join.row.cells_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableJoinRowCells24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableJoinRowCells16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::row][1] or ancestor-or-self::node()[self::row | self::tr][1][self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.JoinRowCellsOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::tr][1] or oxy:current-selected-element()[self::tr][1] or ancestor-or-self::node()[self::row | self::tr][1][self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.JoinRowCellsOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.graphic</String>
										</field>
										<field name="name">
											<String>${i18n(insert.image)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.image_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Image24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Image16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("figure") or oxy:allows-child-element("mediaobject") or 
oxy:allows-child-element("inlinegraphic")</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.InsertGraphicOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.split.left</String>
										</field>
										<field name="name">
											<String>${i18n(table.split.left)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.split.left_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableSplitCellLeft24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableSplitCellLeft16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::entry]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Left</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.SplitLeftRightOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::td | self::th]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Left</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.SplitLeftRightOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.split.right</String>
										</field>
										<field name="name">
											<String>${i18n(table.split.right)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.split.right_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableSplitCellRight24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableSplitCellRight16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::entry]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Right</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.SplitLeftRightOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::td | self::th]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Right</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.SplitLeftRightOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.join.cell.above</String>
										</field>
										<field name="name">
											<String>${i18n(table.join.cell.above)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.join.cell.above_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableJoinCellUp24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableJoinCellUp16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::row | self::td | self::th  | self::tr][1][self::entry | self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Join direction</String>
																<String>Above</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.JoinCellAboveBelowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th | self::tr][1][self::td |self::th | self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Join direction</String>
																<String>Above</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.JoinCellAboveBelowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.join.cell.below</String>
										</field>
										<field name="name">
											<String>${i18n(table.join.cell.below)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.join.cell.below_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableJoinCellDown24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableJoinCellDown16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::row | self::td | self::th | self::tr][1][self::entry | self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Join direction</String>
																<String>Below</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.JoinCellAboveBelowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th | self::tr][1][self::td |self::th | self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Join direction</String>
																<String>Below</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.JoinCellAboveBelowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.split.below</String>
										</field>
										<field name="name">
											<String>${i18n(table.split.below)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.split.below_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableSplitCellDown24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableSplitCellDown16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::entry]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Below</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.SplitCellAboveBelowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::td | self::th]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Below</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.SplitCellAboveBelowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.split.above</String>
										</field>
										<field name="name">
											<String>${i18n(table.split.above)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.split.above_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableSplitCellUp24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableSplitCellUp16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::entry]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Above</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.SplitCellAboveBelowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::td | self::th]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Split point</String>
																<String>Above</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.SplitCellAboveBelowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.column.after</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.column.after)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.column.after_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableColumn24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableColumn16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr][1][self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
															<entry>
																<String>position</String>
																<String>before</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertColumnOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr][1][self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertColumnOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>delete.table.column</String>
										</field>
										<field name="name">
											<String>${i18n(delete.table.columns)}</String>
										</field>
										<field name="description">
											<String>${i18n(delete.table.columns_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/DeleteColumn24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/DeleteColumn16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::td | self::th | self::entry |self::row][1][self::entry | self::row]
or oxy:current-selected-element()[self::td | self::th | self::entry |self::row][1][self::entry | self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.DeleteColumnOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::td | self::th | self::entry | self::tr][1][self::td | self::th | self::tr]
or oxy:current-selected-element()[self::td | self::th | self::entry | self::tr][1][self::td | self::th | self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.DeleteColumnOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>delete.table.row</String>
										</field>
										<field name="name">
											<String>${i18n(delete.table.rows)}</String>
										</field>
										<field name="description">
											<String>${i18n(delete.table.rows_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/DeleteRow24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/DeleteRow16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr | self::tbody | self::thead][1][self::row | self::tbody/child::row | self::thead/child::row]
or oxy:current-selected-element()[self::row | self::tr | self::tbody | self::thead][1][self::row | self::tbody/child::row | self::thead/child::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.DeleteRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr | self::tbody | self::thead][1][self::tr | self::tbody/child::tr | self::thead/child::tr]
or oxy:current-selected-element()[self::row | self::tr | self::tbody | self::thead][1][self::tr | self::tbody/child::tr | self::thead/child::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.DeleteRowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.cross.reference.link</String>
										</field>
										<field name="name">
											<String>${i18n(insert.cross.reference.link)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.link_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.link.InsertLocalLinkOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.web.ulink</String>
										</field>
										<field name="name">
											<String>${i18n(insert.web.ulink)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.ulink_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.link.InsertULink</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.uri</String>
										</field>
										<field name="name">
											<String>${i18n(insert.uri)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.uri_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;uri/></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SurroundWithFragmentOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.olink</String>
										</field>
										<field name="name">
											<String>${i18n(insert.olink)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.olink_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.olink.InsertOLinkOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.cross.reference.xref</String>
										</field>
										<field name="name">
											<String>${i18n(insert.cross.reference.xref)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.xref_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.link.InsertXrefOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>edit.olink</String>
										</field>
										<field name="name">
											<String>${i18n(edit.olink)}</String>
										</field>
										<field name="description">
											<String>${i18n(edit.olink_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.olink.EditOLinkOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>id.options</String>
										</field>
										<field name="name">
											<String>${i18n(id.options)}</String>
										</field>
										<field name="description">
											<String>${i18n(id.options_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String>I</String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>true()</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.id.DocbookConfigureAutoIDElementsOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>generate.ids</String>
										</field>
										<field name="name">
											<String>${i18n(generate.ids)}</String>
										</field>
										<field name="description">
											<String>${i18n(generate.ids_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>true()</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.id.GenerateIDsDB4Operation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.equation</String>
										</field>
										<field name="name">
											<String>${i18n(insert.equation)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.equation_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Equation24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Equation16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("inlineequation") or oxy:allows-child-element("equation")</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.InsertEquationOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>procedure</String>
										</field>
										<field name="name">
											<String>${i18n(procedure)}</String>
										</field>
										<field name="description">
											<String>${i18n(procedure_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/ProcedureList24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/ProcedureList16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("procedure")</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>listType</String>
																<String>procedure</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.DB4InsertListOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.xinclude</String>
										</field>
										<field name="name">
											<String>${i18n(insert.xinclude)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.xinclude_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/XInclude24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/XInclude16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertXIncludeOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>show.DocBook4.documentation</String>
										</field>
										<field name="name">
											<String>${i18n(show.DocBook4.documentation)}</String>
										</field>
										<field name="description">
											<String>${i18n(show.DocBook4.documentation_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String>/images/BrowseReferenceManual16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>true()</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>URL pattern</String>
																<String>http://docbook.org/tdg/en/html/{Element_name}.html</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.ShowElementDocumentationOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>play.audio</String>
										</field>
										<field name="name">
											<String>${i18n(play.audio.resource)}</String>
										</field>
										<field name="description">
											<String>${i18n(play.media.desc)}</String>
										</field>
										<field name="largeIconPath">
											<String>${framework}/css/img/play_audio.png</String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>self::*:audiodata[@fileref]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>mediaType</String>
																<String>audio</String>
															</entry>
															<entry>
																<String>resourcePath</String>
																<String>@fileref</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.OpenInSystemAppOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::*:audiodata[@entityref]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>isUnparsedEntity</String>
																<String>true</String>
															</entry>
															<entry>
																<String>mediaType</String>
																<String>audio</String>
															</entry>
															<entry>
																<String>resourcePath</String>
																<String>@entityref</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.OpenInSystemAppOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>play.video</String>
										</field>
										<field name="name">
											<String>${i18n(play.video.resource)}</String>
										</field>
										<field name="description">
											<String>${i18n(play.media.desc)}</String>
										</field>
										<field name="largeIconPath">
											<String>${framework}/css/img/play_video.png</String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>self::*:videodata[@fileref]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>mediaType</String>
																<String>video</String>
															</entry>
															<entry>
																<String>resourcePath</String>
																<String>@fileref</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.OpenInSystemAppOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::*:videodata[@entityref]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>isUnparsedEntity</String>
																<String>true</String>
															</entry>
															<entry>
																<String>mediaType</String>
																<String>video</String>
															</entry>
															<entry>
																<String>resourcePath</String>
																<String>@entityref</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.OpenInSystemAppOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>promote.section</String>
										</field>
										<field name="name">
											<String>${i18n(promote.section)}</String>
										</field>
										<field name="description">
											<String>${i18n(promote.section_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/NodePromote24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/NodePromote16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<String>M1 M3 LEFT</String>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.PromoteDemoteSectionOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>demote.section</String>
										</field>
										<field name="name">
											<String>${i18n(demote.section)}</String>
										</field>
										<field name="description">
											<String>${i18n(demote.section_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/NodeDemote24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/NodeDemote16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<String>M1 M3 RIGHT</String>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>Action</String>
																<String>Demote</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.PromoteDemoteSectionOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>sort</String>
										</field>
										<field name="name">
											<String>${i18n(sort)}</String>
										</field>
										<field name="description">
											<String>${i18n(sort_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Sort24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Sort16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:tbody[descendant-or-self::*:row]] |
oxy:current-selected-element()[self::*:table[descendant-or-self::*:row]] |
oxy:current-selected-element()[self::*:thead[descendant-or-self::*:row]] |
oxy:current-selected-element()[self::*:tfoot[descendant-or-self::*:row]] |
ancestor-or-self::node()[self::*:tbody[descendant::*:row] | self::*:tfoot[descendant::*:row] | self::*:thead[descendant::*:row] | self::*:variablelist | self::*:orderedlist | self::*:itemizedlist]
[1][self::*:tbody | self::*:tfoot | self::*:thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.table.DocbookCALSTableSortOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:tbody[descendant-or-self::*:tr]] |
oxy:current-selected-element()[self::*:table[descendant-or-self::*:tr]] |
oxy:current-selected-element()[self::*:thead[descendant-or-self::*:tr]] |
oxy:current-selected-element()[self::*:tfoot[descendant-or-self::*:tr]] |
ancestor-or-self::node()[self::*:tbody[descendant::*:tr] | self::*:tfoot[descendant::*:tr] | self::*:thead[descendant::*:tr] | self::*:variablelist | self::*:orderedlist | self::*:itemizedlist]
[1][self::*:tbody | self::*:tfoot | self::*:thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.XHTMLTableSortOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:orderedlist] |
oxy:current-selected-element()[self::*:itemizedlist] |
oxy:current-selected-element()[self::*:variablelist] |
ancestor-or-self::*:orderedlist | ancestor-or-self::*:itemizedlist | ancestor-or-self::*:variablelist</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.sort.DocbookListSortOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>sort_table</String>
										</field>
										<field name="name">
											<String>${i18n(sort)}</String>
										</field>
										<field name="description">
											<String>${i18n(sort_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/Sort24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/Sort16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:tbody[descendant-or-self::*:row]] |
oxy:current-selected-element()[self::*:table[descendant-or-self::*:row]] |
oxy:current-selected-element()[self::*:thead[descendant-or-self::*:row]] |
oxy:current-selected-element()[self::*:tfoot[descendant-or-self::*:row]] |
ancestor-or-self::node()[self::*:tbody[descendant::*:row] | self::*:tfoot[descendant::*:row] | self::*:thead[descendant::*:row] | self::*:variablelist | self::*:orderedlist | self::*:itemizedlist]
[1][self::*:tbody | self::*:tfoot | self::*:thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.table.DocbookCALSTableSortOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:tbody[descendant-or-self::*:tr]] |
oxy:current-selected-element()[self::*:table[descendant-or-self::*:tr]] |
oxy:current-selected-element()[self::*:thead[descendant-or-self::*:tr]] |
oxy:current-selected-element()[self::*:tfoot[descendant-or-self::*:tr]] |
ancestor-or-self::node()[self::*:tbody[descendant::*:tr] | self::*:tfoot[descendant::*:tr] | self::*:thead[descendant::*:tr] | self::*:variablelist | self::*:orderedlist | self::*:itemizedlist]
[1][self::*:tbody | self::*:tfoot | self::*:thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.XHTMLTableSortOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.collapse.colspec</String>
										</field>
										<field name="name">
											<String>${i18n(table.toggle.colspec)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.toggle.colspec_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String>/images/Expanded16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>elementLocation</String>
																<String>.</String>
															</entry>
															<entry>
																<String>name</String>
																<String>-oxy-visible-colspecs</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.RemovePseudoClassOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.expand.colspec</String>
										</field>
										<field name="name">
											<String>${i18n(table.toggle.colspec)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.toggle.colspec_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String>/images/Collapsed16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>elementLocation</String>
																<String>.</String>
															</entry>
															<entry>
																<String>name</String>
																<String>-oxy-visible-colspecs</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SetPseudoClassOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.row.above</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.row.above)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.row.above_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableRowAbove24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableRowAbove16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::tbody | self::tfoot | self::thead)[parent::tgroup] and oxy:current-selected-element()</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String>oxy:current-selected-element()</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::tbody | self::tfoot | self::thead)[parent::tgroup]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::tbody | self::tfoot) and oxy:current-selected-element()</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>oxy:current-selected-element()</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::tbody | self::tfoot</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::thead and oxy:current-selected-element()</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>oxy:current-selected-element()</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::thead</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::table | self::informaltable][1][self::row][parent::tbody | parent::tfoot | parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::row[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[parent::tbody | parent::tfoot | parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::tr[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::tr[1]</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.column.before</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.column.before)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.column.before_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableColumnBefore24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableColumnBefore16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr][1][self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertLocation</String>
																<String>After</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
															<entry>
																<String>position</String>
																<String>before</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertColumnOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr][1][self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>insertPosition</String>
																<String>Before</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertColumnOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>show.table.properties</String>
										</field>
										<field name="name">
											<String>${i18n(show.table.properties)}</String>
										</field>
										<field name="description">
											<String>${i18n(show.table.properties.description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableProperties24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableProperties16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:table[child::*:tgroup | descendant-or-self::*:tr]][1][child::*:tgroup]
or
oxy:current-selected-element()[self::*:informaltable[child::*:tgroup | descendant-or-self::*:tr]][1][child::*:tgroup] or
(not (oxy:current-selected-element()[self::*:table[child::*:tgroup | descendant-or-self::*:tr]][1]) and ancestor-or-self::node()[self::*:table[child::*:tgroup | descendant-or-self::*:tr]][1][child::*:tgroup])
or
(not (oxy:current-selected-element()[self::*:informaltable[child::*:tgroup | descendant-or-self::*:tr]][1]) and ancestor-or-self::node()[self::*:informaltable[child::*:tgroup | descendant-or-self::*:tr]][1][child::*:tgroup])</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.table.properties.Docbook4CALSShowTablePropertiesOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:current-selected-element()[self::*:table[child::*:tgroup | descendant-or-self::*:tr]][1][descendant-or-self::*:tr] or
(not (oxy:current-selected-element()[self::*:table[child::*:tgroup | descendant-or-self::*:tr]][1]) 
and 
ancestor-or-self::node()[self::*:table[child::*:tgroup | descendant-or-self::*:tr]][1][descendant-or-self::*:tr])</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.table.properties.Docbook4HTMLShowTablePropertiesOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.rows.custom</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.rows.custom)}...</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.rows.custom_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>(self::tbody | self::tfoot | self::thead)[parent::tgroup]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customRowInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertMultipleRows</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::tbody | self::tfoot</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customRowInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String></String>
															</entry>
															<entry>
																<String>insertMultipleRows</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>self::thead</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customRowInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertMultipleRows</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>Inside as first child</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::table | self::informaltable][1][self::row][parent::tbody | parent::tfoot | parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customRowInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::row[1]</String>
															</entry>
															<entry>
																<String>insertMultipleRows</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[parent::tbody | parent::tfoot | parent::table]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customRowInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>header row</String>
																<String>no</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::tr[1]</String>
															</entry>
															<entry>
																<String>insertMultipleRows</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::tr[parent::thead]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customRowInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>header row</String>
																<String>yes</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>ancestor-or-self::tr[1]</String>
															</entry>
															<entry>
																<String>insertMultipleRows</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertPosition</String>
																<String>After</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertRowOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.table.columns.custom</String>
										</field>
										<field name="name">
											<String>${i18n(insert.table.columns.custom)}...</String>
										</field>
										<field name="description">
											<String>${i18n(insert.table.columns.custom_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr][1][self::row]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customColumnInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertLocation</String>
																<String>After</String>
															</entry>
															<entry>
																<String>insertMultipleColumns</String>
																<String>true</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
															<entry>
																<String>position</String>
																<String>before</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.InsertColumnOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::row | self::tr][1][self::tr]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>customColumnInsertion</String>
																<String>true</String>
															</entry>
															<entry>
																<String>insertMultipleColumns</String>
																<String>true</String>
															</entry>
															<entry>
																<String>namespace</String>
																<String></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.InsertColumnOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>paste.as.xinclude</String>
										</field>
										<field name="name">
											<String>${i18n(paste.as.xinclude)}</String>
										</field>
										<field name="description">
											<String>${i18n(paste.as.xinclude_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.Docbook4PasteAsXIncludeOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>paste.as.link</String>
										</field>
										<field name="name">
											<String>${i18n(paste.as.link)}</String>
										</field>
										<field name="description">
											<String>${i18n(paste.as.link_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.Docbook4PasteAsLinkOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>paste.as.xref</String>
										</field>
										<field name="name">
											<String>${i18n(paste.as.xref)}</String>
										</field>
										<field name="description">
											<String>${i18n(paste.as.xref_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String></String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.Docbook4PasteAsXrefOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.join</String>
										</field>
										<field name="name">
											<String>${i18n(table.join)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.join_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableJoin24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableJoin16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::tgroup][1]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.JoinOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::table][1]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.JoinOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>table.split</String>
										</field>
										<field name="name">
											<String>${i18n(table.split)}</String>
										</field>
										<field name="description">
											<String>${i18n(table.split_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/TableSplitCell24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/TableSplitCell16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::entry] or
oxy:current-selected-element()[self::entry | self::td | self::th][1][self::entry]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.cals.SplitOperation</String>
													</field>
												</actionMode>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::node()[self::entry | self::td | self::th][1][self::td | self::th] or
oxy:current-selected-element()[self::entry | self::td | self::th][1][self::td | self::th]</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.table.operations.xhtml.SplitOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.informaltable.wizard</String>
										</field>
										<field name="name">
											<String>${i18n(informaltable.wizard)}</String>
										</field>
										<field name="description">
											<String>${i18n(informaltable.wizard_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("informaltable")</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>fragment</String>
																<String>&lt;informaltable>
   &lt;tgroup cols='2'>
       &lt;tbody>
         &lt;row>&lt;entry>&lt;/entry>&lt;entry>&lt;/entry>&lt;/row>
         &lt;row>&lt;entry>&lt;/entry>&lt;entry>&lt;/entry>&lt;/row>
       &lt;/tbody>
   &lt;/tgroup>
&lt;/informaltable></String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>edit.image.map</String>
										</field>
										<field name="name">
											<String>${i18n(Image_map_editor)}...</String>
										</field>
										<field name="description">
											<String>${i18n(edit_image_map_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String></String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>ancestor-or-self::imageobject[imagedata[@fileref and (empty(@format) or @format != 'SVG')]] 
or ancestor-or-self::imageobjectco[imageobject/imagedata[@fileref and (empty(@format) or @format != 'SVG')]] 
or oxy:current-selected-element()[ancestor-or-self::imageobject[imagedata[@fileref and (empty(@format) or @format != 'SVG')]]] 
or oxy:current-selected-element()[ancestor-or-self::imageobjectco[imageobject/imagedata[@fileref and (empty(@format) or @format != 'SVG')]]]
</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.EditImageMapOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>imagemap.collapse.area</String>
										</field>
										<field name="name">
											<String>${i18n(imagemap.toggle.area)}</String>
										</field>
										<field name="description">
											<String>${i18n(imagemap.toggle.area_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String>/images/Expanded16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>elementLocation</String>
																<String>.</String>
															</entry>
															<entry>
																<String>name</String>
																<String>-oxy-visible-imagemap-area</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.RemovePseudoClassOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>imagemap.expand.area</String>
										</field>
										<field name="name">
											<String>${i18n(imagemap.toggle.area)}</String>
										</field>
										<field name="description">
											<String>${i18n(imagemap.toggle.area_description)}</String>
										</field>
										<field name="largeIconPath">
											<String></String>
										</field>
										<field name="smallIconPath">
											<String>/images/Collapsed16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>1</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap>
															<entry>
																<String>elementLocation</String>
																<String>.</String>
															</entry>
															<entry>
																<String>name</String>
																<String>-oxy-visible-imagemap-area</String>
															</entry>
														</serializableOrderedMap>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.commons.operations.SetPseudoClassOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>true</Boolean>
										</field>
									</action>
									<action>
										<field name="id">
											<String>insert.media</String>
										</field>
										<field name="name">
											<String>${i18n(insert.media)}</String>
										</field>
										<field name="description">
											<String>${i18n(insert.media_description)}</String>
										</field>
										<field name="largeIconPath">
											<String>/images/InsertMedia24.png</String>
										</field>
										<field name="smallIconPath">
											<String>/images/InsertMedia16.png</String>
										</field>
										<field name="accessKey">
											<String></String>
										</field>
										<field name="accelerator">
											<null/>
										</field>
										<field name="actionModes">
											<actionMode-array>
												<actionMode>
													<field name="xpathCondition">
														<String>oxy:allows-child-element("*:inlinemediaobject") or oxy:allows-child-element("*:mediaobject")</String>
													</field>
													<field name="argValues">
														<serializableOrderedMap/>
													</field>
													<field name="operationID">
														<String>ro.sync.ecss.extensions.docbook.Docbook4InsertMediaDataOperation</String>
													</field>
												</actionMode>
											</actionMode-array>
										</field>
										<field name="enabledInReadOnlyContext">
											<Boolean>false</Boolean>
										</field>
									</action>
								</action-array>
							</field>
							<field name="menubarDescriptor">
								<menu>
									<field name="label">
										<String>DocBook4</String>
									</field>
									<field name="accessKey">
										<String>B</String>
									</field>
									<field name="iconPath">
										<null/>
									</field>
									<field name="menuEntriesDescriptorList">
										<menuEntry-array>
											<menuItem>
												<field name="actionID">
													<String>insert.xinclude</String>
												</field>
											</menuItem>
											<menuSeparator/>
											<menuItem>
												<field name="actionID">
													<String>bold</String>
												</field>
											</menuItem>
											<menuItem>
												<field name="actionID">
													<String>italic</String>
												</field>
											</menuItem>
											<menuItem>
												<field name="actionID">
													<String>underline</String>
												</field>
											</menuItem>
											<menuSeparator/>
											<menu>
												<field name="label">
													<String>${i18n(paste.special)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/PasteSpecialDITA16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>paste.as.xinclude</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>paste.as.link</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>paste.as.xref</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(insert)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String></String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>para</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.graphic</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.media</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.equation</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(section.group)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/Section16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>section</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>promote.section</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>demote.section</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(link)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/Link16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>insert.cross.reference.link</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.cross.reference.xref</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.web.ulink</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.olink</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.uri</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(list)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/UnorderedList16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>listitem</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>orderedlist</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>itemizedlist</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>variablelist</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>procedure</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(table)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/Table16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>insert.table</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>show.table.properties</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>insert.table.row.above</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.table.row.below</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.table.rows.custom</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>delete.table.row</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>insert.table.column.before</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.table.column.after</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.table.columns.custom</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>delete.table.column</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>table.join</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>table.split</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>insert.table.entry</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menuSeparator/>
											<menuItem>
												<field name="actionID">
													<String>id.options</String>
												</field>
											</menuItem>
											<menuItem>
												<field name="actionID">
													<String>generate.ids</String>
												</field>
											</menuItem>
										</menuEntry-array>
									</field>
									<field name="context">
										<null/>
									</field>
								</menu>
							</field>
							<field name="popupMenuDescriptor">
								<menu>
									<field name="label">
										<String>Contextual Menu</String>
									</field>
									<field name="accessKey">
										<null/>
									</field>
									<field name="iconPath">
										<null/>
									</field>
									<field name="menuEntriesDescriptorList">
										<menuEntry-array>
											<menuItem>
												<field name="actionID">
													<String>edit.image.map</String>
												</field>
											</menuItem>
											<menuSeparator/>
											<menu>
												<field name="label">
													<String>${i18n(paste.special)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/PasteSpecialDITA16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>paste.as.xinclude</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>paste.as.link</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>paste.as.xref</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(table)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/Table16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>insert.table.rows.custom</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>delete.table.row</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>insert.table.columns.custom</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>delete.table.column</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>table.join</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>table.split</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>sort_table</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>show.table.properties</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<String>table</String>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(insert)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String></String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>insert.table</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.graphic</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.media</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.equation</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>para</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>section</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>insert.xinclude</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(section.group)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/Section16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>promote.section</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>demote.section</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menu>
												<field name="label">
													<String>${i18n(link)}</String>
												</field>
												<field name="accessKey">
													<String></String>
												</field>
												<field name="iconPath">
													<String>/images/Link16.png</String>
												</field>
												<field name="menuEntriesDescriptorList">
													<menuEntry-array>
														<menuItem>
															<field name="actionID">
																<String>insert.cross.reference.link</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.cross.reference.xref</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.web.ulink</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>insert.uri</String>
															</field>
														</menuItem>
														<menuSeparator/>
														<menuItem>
															<field name="actionID">
																<String>insert.olink</String>
															</field>
														</menuItem>
														<menuItem>
															<field name="actionID">
																<String>edit.olink</String>
															</field>
														</menuItem>
													</menuEntry-array>
												</field>
												<field name="context">
													<null/>
												</field>
											</menu>
											<menuItem>
												<field name="actionID">
													<String>sort</String>
												</field>
											</menuItem>
											<menuSeparator/>
											<menuItem>
												<field name="actionID">
													<String>generate.ids</String>
												</field>
											</menuItem>
										</menuEntry-array>
									</field>
									<field name="context">
										<null/>
									</field>
								</menu>
							</field>
							<field name="toolbarDescriptor">
								<toolbar>
									<field name="id">
										<String>DocBook</String>
									</field>
									<field name="type">
										<Integer>2</Integer>
									</field>
									<field name="largeIconPath">
										<null/>
									</field>
									<field name="smallIconPath">
										<null/>
									</field>
									<field name="toolbarEntriesDescriptorList">
										<toolbarEntry-array>
											<toolbarItem>
												<field name="actionID">
													<String>bold</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>italic</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>underline</String>
												</field>
											</toolbarItem>
											<toolbarSeparator/>
											<toolbar>
												<field name="id">
													<String>${i18n(link)}</String>
												</field>
												<field name="type">
													<Integer>3</Integer>
												</field>
												<field name="largeIconPath">
													<String>/images/Link24.png</String>
												</field>
												<field name="smallIconPath">
													<String>/images/Link16.png</String>
												</field>
												<field name="toolbarEntriesDescriptorList">
													<toolbarEntry-array>
														<toolbarItem>
															<field name="actionID">
																<String>insert.cross.reference.link</String>
															</field>
														</toolbarItem>
														<toolbarItem>
															<field name="actionID">
																<String>insert.cross.reference.xref</String>
															</field>
														</toolbarItem>
														<toolbarItem>
															<field name="actionID">
																<String>insert.web.ulink</String>
															</field>
														</toolbarItem>
														<toolbarItem>
															<field name="actionID">
																<String>insert.olink</String>
															</field>
														</toolbarItem>
														<toolbarItem>
															<field name="actionID">
																<String>insert.uri</String>
															</field>
														</toolbarItem>
													</toolbarEntry-array>
												</field>
											</toolbar>
											<toolbarItem>
												<field name="actionID">
													<String>insert.graphic</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>insert.media</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>insert.xinclude</String>
												</field>
											</toolbarItem>
											<toolbar>
												<field name="id">
													<String>${i18n(section.group)}</String>
												</field>
												<field name="type">
													<Integer>3</Integer>
												</field>
												<field name="largeIconPath">
													<String>/images/Section24.png</String>
												</field>
												<field name="smallIconPath">
													<String>/images/Section16.png</String>
												</field>
												<field name="toolbarEntriesDescriptorList">
													<toolbarEntry-array>
														<toolbarItem>
															<field name="actionID">
																<String>section</String>
															</field>
														</toolbarItem>
														<toolbarItem>
															<field name="actionID">
																<String>promote.section</String>
															</field>
														</toolbarItem>
														<toolbarItem>
															<field name="actionID">
																<String>demote.section</String>
															</field>
														</toolbarItem>
													</toolbarEntry-array>
												</field>
											</toolbar>
											<toolbarItem>
												<field name="actionID">
													<String>para</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>insert.equation</String>
												</field>
											</toolbarItem>
											<toolbarSeparator/>
											<toolbarItem>
												<field name="actionID">
													<String>listitem</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>orderedlist</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>itemizedlist</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>variablelist</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>procedure</String>
												</field>
											</toolbarItem>
											<toolbarSeparator/>
											<toolbarItem>
												<field name="actionID">
													<String>sort</String>
												</field>
											</toolbarItem>
											<toolbarSeparator/>
											<toolbarItem>
												<field name="actionID">
													<String>insert.table</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>insert.table.row.below</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>delete.table.row</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>insert.table.column.after</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>delete.table.column</String>
												</field>
											</toolbarItem>
											<toolbarSeparator/>
											<toolbarItem>
												<field name="actionID">
													<String>show.table.properties</String>
												</field>
											</toolbarItem>
											<toolbarSeparator/>
											<toolbarItem>
												<field name="actionID">
													<String>table.join</String>
												</field>
											</toolbarItem>
											<toolbarItem>
												<field name="actionID">
													<String>table.split</String>
												</field>
											</toolbarItem>
										</toolbarEntry-array>
									</field>
								</toolbar>
							</field>
							<field name="additionalToolbarsDescriptors">
								<null/>
							</field>
							<field name="contextualItems">
								<contextProvider>
									<field name="items">
										<contextItem-array>
											<contextItem>
												<field name="targets">
													<list>
														<Integer>0</Integer>
													</list>
												</field>
												<field name="actionID">
													<String>insert.informaltable.wizard</String>
												</field>
												<field name="alias">
													<String>${i18n(informaltable.wizard)}</String>
												</field>
											</contextItem>
											<contextItem>
												<field name="targets">
													<list>
														<Integer>0</Integer>
													</list>
												</field>
												<field name="actionID">
													<String>insert.graphic</String>
												</field>
												<field name="alias">
													<String>${i18n(figure.wizard)}</String>
												</field>
											</contextItem>
											<contextItem>
												<field name="targets">
													<list>
														<Integer>0</Integer>
													</list>
												</field>
												<field name="actionID">
													<String>insert.table.row.below</String>
												</field>
												<field name="alias">
													<String>${i18n(row.wizard)}</String>
												</field>
											</contextItem>
											<contextItem>
												<field name="targets">
													<list>
														<Integer>0</Integer>
													</list>
												</field>
												<field name="actionID">
													<String>insert.table</String>
												</field>
												<field name="alias">
													<String>${i18n(table.wizard)}</String>
												</field>
											</contextItem>
										</contextItem-array>
									</field>
									<field name="removeItems">
										<contextRemoveItem-array>
											<contextRemoveItem>
												<field name="targets">
													<list>
														<Integer>0</Integer>
													</list>
												</field>
												<field name="renderName">
													<String>&lt;SPLIT> table</String>
												</field>
											</contextRemoveItem>
											<contextRemoveItem>
												<field name="targets">
													<list>
														<Integer>0</Integer>
													</list>
												</field>
												<field name="renderName">
													<String>&lt;SPLIT> entry</String>
												</field>
											</contextRemoveItem>
										</contextRemoveItem-array>
									</field>
								</contextProvider>
							</field>
							<field name="tableSupportClassName">
								<null/>
							</field>
							<field name="tableCellSeparatorSupportClassName">
								<null/>
							</field>
							<field name="tableColWidthSupportClassName">
								<null/>
							</field>
							<field name="customReferencesResolver">
								<null/>
							</field>
							<field name="editPropertiesHandler">
								<null/>
							</field>
							<field name="authorExtensionStateListener">
								<null/>
							</field>
							<field name="attributesRecognizer">
								<null/>
							</field>
							<field name="authorActionEventHandler">
								<null/>
							</field>
							<field name="authorImageDecorator">
								<null/>
							</field>
						</authorExtension>
					</field>
					<field name="templatesLocations">
						<String-array>
							<String>${frameworkDir}/templates/Docbook 4</String>
						</String-array>
					</field>
					<field name="xmlCatalogs">
						<String-array>
							<String>${framework}/catalog.xml</String>
						</String-array>
					</field>
					<field name="description">
						<String>DocBook is a markup language for technical documentation, originally intended for authoring technical documents</String>
					</field>
					<field name="doctypeRules">
						<documentTypeRule-array>
							<documentTypeRule>
								<field name="namespace">
									<String></String>
								</field>
								<field name="rootElem">
									<String>*</String>
								</field>
								<field name="fileName">
									<String>*</String>
								</field>
								<field name="publicID">
									<String>*DTD DocBook *</String>
								</field>
								<field name="javaRuleClass">
									<String></String>
								</field>
								<field name="attributeLocalName">
									<String>*</String>
								</field>
								<field name="attributeNamespace">
									<String>*</String>
								</field>
								<field name="attributeValue">
									<String>*</String>
								</field>
							</documentTypeRule>
							<documentTypeRule>
								<field name="namespace">
									<String></String>
								</field>
								<field name="rootElem">
									<String>chapter</String>
								</field>
								<field name="fileName">
									<String>*</String>
								</field>
								<field name="publicID">
									<String>*</String>
								</field>
								<field name="javaRuleClass">
									<String></String>
								</field>
								<field name="attributeLocalName">
									<String>*</String>
								</field>
								<field name="attributeNamespace">
									<String>*</String>
								</field>
								<field name="attributeValue">
									<String>*</String>
								</field>
							</documentTypeRule>
							<documentTypeRule>
								<field name="namespace">
									<String></String>
								</field>
								<field name="rootElem">
									<String>sect1</String>
								</field>
								<field name="fileName">
									<String>*</String>
								</field>
								<field name="publicID">
									<String>*</String>
								</field>
								<field name="javaRuleClass">
									<String></String>
								</field>
								<field name="attributeLocalName">
									<String>*</String>
								</field>
								<field name="attributeNamespace">
									<String>*</String>
								</field>
								<field name="attributeValue">
									<String>*</String>
								</field>
							</documentTypeRule>
						</documentTypeRule-array>
					</field>
					<field name="scenarios">
						<scenario-array>
							<antScenario>
								<field name="additionalAntArgs">
									<String></String>
								</field>
								<field name="buildTarget">
									<String>webhelp</String>
								</field>
								<field name="buildFilePath">
									<String>${frameworkDir}/xsl/com.oxygenxml.webhelp.classic/build_docbook.xml</String>
								</field>
								<field name="ditaParams">
									<list>
										<antParameter>
											<field name="name">
												<String>admon.graphics</String>
											</field>
											<field name="description">
												<String>If value is 1 use Docbook admon graphics. If value is 0 do not use Docbook admon graphics.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension for admonition graphics. The following formats of
												    admonition graphics are supported: GIF (.gif extension), PNG (.png extension), SVG
												    (the .svg extension, TIFF (.tif extension).</String>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook admon image files.</String>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>appendix.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then appendices will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (upperalpha).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>A</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>base.dir</String>
											</field>
											<field name="description">
												<String>Base directory for output HTML files.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/webhelp/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.path</String>
											</field>
											<field name="description">
												<String>Sets the path to the directory holding the callout graphics. This location is normally relative to the output html directory. see base.dir. Always terminate the directory with / since the graphic file is appended to this string, hence needs the separator.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chapter.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then chapters will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (arabic).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.first.sections</String>
											</field>
											<field name="description">
												<String>If non-zero, a chunk will be created for the first top-level sect1 or section elements in each component. Otherwise, that section will be part of the chunk for its parent.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.section.depth</String>
											</field>
											<field name="description">
												<String>This parameter sets the depth of section chunking.</String>
											</field>
											<field name="value">
												<String>3</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.encoding</String>
											</field>
											<field name="description">
												<String>The encoding of the output XHTML files.</String>
											</field>
											<field name="value">
												<String>UTF-8</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.indent</String>
											</field>
											<field name="description">
												<String>The value of the indent specification for generated pages. Not all processors support specification of this parameter.</String>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>clean.output</String>
											</field>
											<field name="description">
												<String>If set to 'true' the output directory is removed before starting the transformation.</String>
											</field>
											<field name="value">
												<String>false</String>
											</field>
											<field name="defaultValue">
												<String>false</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>false</String>
													<String>true</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>component.label.includes.part.label</String>
											</field>
											<field name="description">
												<String>If non-zero, number labels for chapter, appendix, and other component elements are prefixed with the label of the part element that contains them. So you might see Chapter II.3 instead of Chapter 3. Also, the labels for formal elements such as table and figure will include the part label. If there is no part element container, then no prefix is generated. This feature is most useful when the label.from.part parameter is turned on. In that case, there would be more than one chapter 1, and the extra part label prefix will identify each chapter unambiguously.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>draft.mode</String>
											</field>
											<field name="description">
												<String>If Docbook draft mode is used. Possible values: yes, no.</String>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>draft.watermark.image</String>
											</field>
											<field name="description">
												<String>The image to be used for draft watermarks.</String>
											</field>
											<field name="value">
												<String>oxygen-webhelp/resources/img/draft.png</String>
											</field>
											<field name="defaultValue">
												<String>oxygen-webhelp/resources/img/draft.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.index</String>
											</field>
											<field name="description">
												<String>Specify if an index should be generated.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.section.toc.level</String>
											</field>
											<field name="description">
												<String>The generate.section.toc.level parameter controls the depth of section in which TOCs will be generated. Note that this is related to, but not the same as toc.section.depth, which controls the depth to which TOC entries will be generated in a given TOC. If, for example, generate.section.toc.level is 3, TOCs will be generated in first, second, and third level sections, but not in fourth level sections.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.source</String>
											</field>
											<field name="description">
												<String>If value if 1 the source code from programlisting elements is highlighted accoeding to source language syntax.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.xslthl.config</String>
											</field>
											<field name="description">
												<String>Path of configuration file for syntax highlight of source code from programlisting elements.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.ext</String>
											</field>
											<field name="description">
												<String>Extension of output HTML files.</String>
											</field>
											<field name="value">
												<String>.html</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>inherit.keywords</String>
											</field>
											<field name="description">
												<String>If inherit.keywords is non-zero, the keyword meta for each HTML head element will include all of the keywords from ancestor elements. Otherwise, only the keywords from the current section will be used.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>input.dir</String>
											</field>
											<field name="description">
												<String>Path of directory containing the input files.</String>
											</field>
											<field name="value">
												<String>${cfd}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.gentext.default.language</String>
											</field>
											<field name="description">
												<String>The value of the l10n.gentext.default.language parameter is used as the language for generated text if no setting is provided in the source document.</String>
											</field>
											<field name="value">
												<String>en</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manifest.in.base.dir</String>
											</field>
											<field name="description">
												<String>If non-zero, the manifest file as well as project files for HTML Help and Eclipse Help are written into base.dir instead of the current directory.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.showtitles</String>
											</field>
											<field name="description">
												<String>If non-zero, the headers and footers of chunked HTML display the titles of the next and previous chunks, along with the words 'Next' and 'Previous' (or the equivalent graphical icons if navig.graphics is true). If false (zero), then only the words 'Next' and 'Previous' (or the icons) are displayed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>output.dir</String>
											</field>
											<field name="description">
												<String>Path where the output files will be created.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/webhelp</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>para.propagates.style</String>
											</field>
											<field name="description">
												<String>If true, the role attribute of para elements will be passed through to the HTML as a class attribute on the p generated for the paragraph.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>part.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then parts will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (upperroman).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>I</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>phrase.propagates.style</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute of phrase elements will be passed through to the HTML as a class attribute on a span that surrounds the phrase.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qandadiv.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, unlabeled qandadivs will be enumerated.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>reference.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, references will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any non-zero value other than the above will generate the default number format (upperroman).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>I</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>root.filename</String>
											</field>
											<field name="description">
												<String>The name of the root HTML file when chunking. The extension is added to the value of this parameter.</String>
											</field>
											<field name="value">
												<String>oxygen-main</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.autolabel</String>
											</field>
											<field name="description">
												<String>If true (non-zero), unlabeled sections will be enumerated.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.label.includes.component.label</String>
											</field>
											<field name="description">
												<String>If non-zero, section labels are prefixed with the label of the component that contains them.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.footer.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, footer navigation will be suppressed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, header and footer navigation will be suppressed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.section.depth</String>
											</field>
											<field name="description">
												<String>Specifies the depth to which recursive sections should appear in the TOC.</String>
											</field>
											<field name="value">
												<String>3</String>
											</field>
											<field name="defaultValue">
												<String>2</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.extensions</String>
											</field>
											<field name="description">
												<String>If non-zero, extensions may be used. Each extension is further controlled by its own parameter. But if use.extensions is zero, no extensions will be used.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.id.as.filename</String>
											</field>
											<field name="description">
												<String>If use.id.as.filename is non-zero, the filename of chunk elements that have IDs will be derived from the ID value.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.stemming</String>
											</field>
											<field name="description">
												<String>Controls whether or not you want to include stemming search algorithms into the published output (default setting is false).</String>
											</field>
											<field name="value">
												<String>false</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xml.file</String>
											</field>
											<field name="description">
												<String>Path to Docbook XML file.</String>
											</field>
											<field name="value">
												<String>${cf}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.style</String>
											</field>
											<field name="description">
												<String>Specifies the value of the CSS style attribute that should be added to admonitions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.textlabel</String>
											</field>
											<field name="description">
												<String>If true (non-zero), admonitions are presented with a generated text label such as Note or Warning in the appropriate language. If zero, such labels are turned off, but any title child of the admonition element are still output. The default value is 1.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotate.toc</String>
											</field>
											<field name="description">
												<String>If true, TOCs will be annotated. At present, this just means that the refpurpose of refentry TOC entries will be displayed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.css</String>
											</field>
											<field name="description">
												<String>If annotation.support is enabled and the document contains annotations, then the CSS in this parameter will be included in the document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> /* ====================================================================== Annotations */ div.annotation-list { visibility: hidden; } div.annotation-nocss { position: absolute; visibility: hidden; } div.annotation-popup
													{ position: absolute; z-index: 4; visibility: hidden; padding: 0px; margin: 2px; border-style: solid; border-width: 1px; width: 200px; background-color: white; } div.annotation-title { padding: 1px; font-weight: bold;
													border-bottom-style: solid; border-bottom-width: 1px; color: white; background-color: black; } div.annotation-body { padding: 2px; } div.annotation-body p { margin-top: 0px; padding-top: 0px; } div.annotation-close {
													position: absolute; top: 2px; right: 2px; } </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.graphic.close</String>
											</field>
											<field name="description">
												<String>annotation.graphic.close uri 
												annotation.graphic.close Image for identifying a link that closes an annotation popup Description This image is used on popup annotations as the “x�? that the user can click to dismiss the popup. This image is used on popup annotations as the “x�? that the user can click to dismiss the popup. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels. Default value: http://docbook.sourceforge.net/release/images/annot-close.png</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> http://docbook.sourceforge.net/release/images/annot-close.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.graphic.open</String>
											</field>
											<field name="description">
												<String>This image is used inline to identify the location of annotations. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>http://docbook.sourceforge.net/release/images/annot-open.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.js</String>
											</field>
											<field name="description">
												<String>If annotation.support is enabled and the document contains annotations, then the URIs listed in this parameter will be included. These JavaScript files are required for popup annotation support.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> http://docbook.sourceforge.net/release/script/AnchorPosition.js http://docbook.sourceforge.net/release/script/PopupWindow.js</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.support</String>
											</field>
											<field name="description">
												<String>If non-zero, the stylesheets will attempt to support annotation elements in HTML by including some JavaScript (see annotation.js).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>author.othername.in.middle</String>
											</field>
											<field name="description">
												<String>If non-zero, the othername of an author appears between the firstname and surname. Otherwise, othername is suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>autotoc.label.in.hyperlink</String>
											</field>
											<field name="description">
												<String>If the value of autotoc.label.in.hyperlink is non-zero, labels are included in hyperlinked titles in the TOC. If it is instead zero, labels are still displayed prior to the hyperlinked titles, but are not hyperlinked along with the titles.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>autotoc.label.separator</String>
											</field>
											<field name="description">
												<String>String used to separate labels and titles in a table of contents.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>. </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>biblioentry.item.separator</String>
											</field>
											<field name="description">
												<String>Text to separate bibliography entries</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>. </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.collection</String>
											</field>
											<field name="description">
												<String>Maintaining bibliography entries across a set of documents is tedious, time consuming, and error prone. It makes much more sense, usually, to store all of the bibliography entries in a single place and simply extract the ones you need in each document. That's the purpose of the bibliography.collection parameter. To setup a global bibliography database, follow these steps: First, create a stand-alone bibliography document that contains all of the documents that you wish to reference. Make sure that each bibliography entry (whether you use biblioentry or bibliomixed) has an ID. My global bibliography, ~/bibliography.xml begins like this: &lt;!DOCTYPE bibliography PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"> &lt;bibliography>&lt;title>References&lt;/title> &lt;bibliomixed id="xml-rec">&lt;abbrev>XML 1.0&lt;/abbrev>Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors. &lt;citetitle>&lt;ulink url="http://www.w3.org/TR/REC-xml">Extensible Markup Language (XML) 1.0 Second Edition&lt;/ulink>&lt;/citetitle>. World Wide Web Consortium, 2000. &lt;/bibliomixed> &lt;bibliomixed id="xml-names">&lt;abbrev>Namespaces&lt;/abbrev>Tim Bray, Dave Hollander, and Andrew Layman, editors. &lt;citetitle>&lt;ulink url="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML&lt;/ulink>&lt;/citetitle>. World Wide Web Consortium, 1999. &lt;/bibliomixed> &lt;!-- ... --> &lt;/bibliography> When you create a bibliography in your document, simply provide empty bibliomixed entries for each document that you wish to cite. Make sure that these elements have the same ID as the corresponding real entry in your global bibliography. For example: &lt;bibliography>&lt;title>Bibliography&lt;/title> &lt;bibliomixed id="xml-rec"/> &lt;bibliomixed id="xml-names"/> &lt;bibliomixed id="DKnuth86">Donald E. Knuth. &lt;citetitle>Computers and Typesetting: Volume B, TeX: The Program&lt;/citetitle>. Addison-Wesley, 1986. ISBN 0-201-13437-3. &lt;/bibliomixed> &lt;bibliomixed id="relaxng"/> &lt;/bibliography> Note that it's perfectly acceptable to mix entries from your global bibliography with normal entries. You can use xref or other elements to cross-reference your bibliography entries in exactly the same way you do now. Finally, when you are ready to format your document, simply set the bibliography.collection parameter (in either a customization layer or directly through your processor's interface) to point to your global bibliography. A relative path in the parameter is interpreted in one of two ways: If your document contains no links to empty bibliographic elements, then the path is relative to the file containing the first bibliomixed element in the document. If your document does contain links to empty bibliographic elements, then the path is relative to the file containing the first such link element in the document. Once the collection file is opened by the first instance described above, it stays open for the current document and the relative path is not reinterpreted again. The stylesheets will format the bibliography in your document as if all of the entries referenced appeared there literally.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>http://docbook.sourceforge.net/release/bibliography/bibliography.xml</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.numbered</String>
											</field>
											<field name="description">
												<String>If non-zero bibliography entries will be numbered</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.style</String>
											</field>
											<field name="description">
												<String>Currently only normal and iso690 styles are supported. In order to use ISO690 style to the full extent you might need to use additional markup described on the following WiKi page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>normal</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>blurb.on.titlepage.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, output from authorblurb and personblurb elements is displayed on title pages. If zero (the default), output from those elements is suppressed on title pages (unless you are using a titlepage customization that causes them to be included).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bridgehead.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, bridgeheads appear in the TOC. Note that this option is not fully supported and may be removed in a future version of the stylesheets.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.defaultcolumn</String>
											</field>
											<field name="description">
												<String>If a callout does not identify a column (for example, if it uses the linerange unit), it will appear in the default column.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>60</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics</String>
											</field>
											<field name="description">
												<String>If non-zero, callouts are presented with graphics (e.g., reverse-video circled numbers instead of "(1)", "(2)", etc.). Default graphics are provided in the distribution.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension to use on callout graphics. The Docbook XSL distribution provides callout graphics in the following formats: SVG (extension: .svg) PNG (extension: .png) GIF (extension: .gif)</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.png</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.number.limit</String>
											</field>
											<field name="description">
												<String>If callout.graphics is non-zero, graphics are used to represent callout numbers instead of plain text. The value of callout.graphics.number.limit is the largest number for which a graphic exists. If the callout number exceeds this limit, the default presentation "(plain text instead of a graphic)" will be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>15</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.list.table</String>
											</field>
											<field name="description">
												<String>The default presentation of calloutlists uses an HTML DL element. Some browsers don't align DLs very well if callout.graphics is used. With this option turned on, calloutlists are presented in an HTML TABLE, which usually results in better alignment of the callout number with the callout description.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode</String>
											</field>
											<field name="description">
												<String>The stylesheets can use either an image of the numbers one to ten, or the single Unicode character which represents the numeral, in white on a black background. Use this to select the Unicode character option.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode.number.limit</String>
											</field>
											<field name="description">
												<String>If callout.unicode is non-zero, unicode characters are used to represent callout numbers. The value of callout.unicode.number.limit is the largest number for which a unicode character exists. If the callout number exceeds this limit, the default presentation "(nnn)" will always be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode.start.character</String>
											</field>
											<field name="description">
												<String>If callout.graphics is zero and callout.unicode is non-zero, unicode characters are used to represent callout numbers. The value of callout.unicode.start.character is the decimal unicode value used for callout number one. Currently, only values 9312 and 10102 are supported in the stylesheets for this parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10102</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callouts.extension</String>
											</field>
											<field name="description">
												<String>The callouts extension processes areaset elements in programlistingco and other text-based callout elements.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.append</String>
											</field>
											<field name="description">
												<String>Specifies content to append to the end of HTML files output by the html/chunk.xsl stylesheet, after the closing &lt;html> tag. You probably don't want to set any value for this parameter; but if you do, the only value it should ever be set to is a newline character: &amp;#x0a; or &amp;#10;</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.quietly</String>
											</field>
											<field name="description">
												<String>If zero (the default), the XSL processor emits a message naming each separate chunk filename as it is being output. If nonzero, then the messages are suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.separate.lots</String>
											</field>
											<field name="description">
												<String>If non-zero, each of the ToC and LoTs (List of Examples, List of Figures, etc.) will be put in its own separate chunk. The title page includes generated links to each of the separate files. This feature depends on the chunk.tocs.and.lots parameter also being non-zero.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.toc</String>
											</field>
											<field name="description">
												<String>The chunk.toc identifies an explicit TOC that will be used for chunking. This parameter is only used by the chunktoc.xsl stylesheet (and customization layers built from it).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.tocs.and.lots</String>
											</field>
											<field name="description">
												<String>If non-zero, ToC and LoT (List of Examples, List of Figures, etc.) will be put in a separate chunk. At the moment, this chunk is not in the normal forward/backward navigation list. Instead, a new link is added to the navigation footer. This feature is still somewhat experimental. Feedback welcome.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.tocs.and.lots.has.title</String>
											</field>
											<field name="description">
												<String>If non-zero title of document is shown before ToC/LoT in separate chunk.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunked.filename.prefix</String>
											</field>
											<field name="description">
												<String>If specified, the chunked.filename.prefix parameter specifies a prefix string to add to each generated chunk filename. For example: &lt;xsl:param name="chunked.filename.prefix">admin-&lt;xsl:param> will produce chunked filenames like: admin-index.html admin-ch01.html admin-ch01s01.html ... Trying to use the base.dir parameter to add a string prefix (by omitting the trailing slash) no longer works (it never worked completely anyway). That parameter value should contain only a directory path, and now gets a trailing slash appended if it was omitted from the param.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>citerefentry.link</String>
											</field>
											<field name="description">
												<String>If non-zero, a web link will be generated, presumably to an online man->HTML gateway. The text of the link is generated by the generate.citerefentry.link template.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>collect.xref.targets</String>
											</field>
											<field name="description">
												<String>In order to resolve olinks efficiently, the stylesheets can generate an external data file containing information about all potential cross reference endpoints in a document. This parameter determines whether the collection process is run when the document is processed by the stylesheet. The default value is no, which means the data file is not generated during processing. The other choices are yes, which means the data file is created and the document is processed for output, and only, which means the data file is created but the document is not processed for output. See also targets.filename.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>contrib.inline.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero (the default), output of the contrib element is displayed as inline content rather than as block content.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>css.decoration</String>
											</field>
											<field name="description">
												<String>If non-zero, then html elements produced by the stylesheet may be decorated with style attributes. For example, the li tags produced for list items may include a fragment of CSS in the style attribute which sets the CSS property "list-style-type".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>current.docid</String>
											</field>
											<field name="description">
												<String>When olinks between documents are resolved for HTML output, the stylesheet can compute the relative path between the current document and the target document. The stylesheet needs to know the targetdoc identifiers for both documents, as they appear in the target.database.document database file. This parameter passes to the stylesheet the targetdoc identifier of the current document, since that identifier does not appear in the document itself. This parameter can also be used for print output. If an olink's targetdoc id differs from the current.docid, then the stylesheet can append the target document's title to the generated olink text. That identifies to the reader that the link is to a different document, not the current document. See also olink.doctitle to enable that feature.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>custom.css.source</String>
											</field>
											<field name="description">
												<String>The custom.css.source parameter enables you to add CSS styles to DocBook's HTML output. The parameter specifies the name of a file containing custom CSS styles. The file must be a well-formed XML file that consists of a single style root element that contains CSS styles as its text content. For example: &lt;?xml version="1.0"?> &lt;style> h2 { font-weight: bold; color: blue; } ... &lt;/style> The filename specified by the parameter should have a .xml filename suffix, although that is not required. The default value of this parameter is blank. If custom.css.source is not blank, then the stylesheet takes the following actions. These actions take place regardless of the value of the make.clean.html parameter. The stylesheet uses the XSLT document() function to open the file specified by the parameter and load it into a variable. The stylesheet forms an output pathname consisting of the value of the base.dir parameter (if it is set) and the value of custom.css.source, with the .xml suffix stripped off. The stylesheet removes the style wrapper element and writes just the CSS text content to the output file. The stylesheet adds a link element to the HTML HEAD element to reference this external CSS stylesheet. For example: &lt;link rel="stylesheet" href="custom.css" type="text/css"> If the make.clean.html parameter is nonzero (the default is zero), and if the docbook.css.source parameter is not blank (the default is not blank), then the stylesheet will also generate a default CSS file and add a link tag to reference it. The link to the custom CSS comes after the link to the default, so it should cascade properly in most browsers. If you do not want two link tags, and instead want your custom CSS to import the default generated CSS file, then do the following: Add a line like the following to your custom CSS source file: @import url("docbook.css") Set the docbook.css.link parameter to zero. This will omit the link tag that references the default CSS file. If you set make.clean.html to nonzero but you do not want the default CSS generated, then also set the docbook.css.source parameter to blank. Then no default CSS will be generated, and so all CSS styles must come from your custom CSS file. You can use the generate.css.header parameter to instead write the CSS to each HTML HEAD element in a style tag instead of an external CSS file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.float.class</String>
											</field>
											<field name="description">
												<String>Selects the direction in which a float should be placed. for xsl-fo this is before, for html it is left. For Western texts, the before direction is the top of the page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> left before </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.image.width</String>
											</field>
											<field name="description">
												<String>If specified, this value will be used for the width attribute on images that do not specify any viewport dimensions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.table.frame</String>
											</field>
											<field name="description">
												<String>This value will be used when there is no frame attribute on the table.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>all</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.table.width</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used for the width attribute on tables that do not specify an alternate width (with the dbhtml table-width or dbfo table-width processing instruction).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>docbook.css.link</String>
											</field>
											<field name="description">
												<String>The stylesheets are capable of generating a default CSS stylesheet file. The parameters make.clean.html and docbook.css.source control that feature. Normally if a default CSS file is generated, then the stylesheet inserts a link tag in the HTML HEAD element to reference it. However, you can omit that link reference if you set the docbook.css.link to zero (1 is the default). This parameter is useful when you want to import the default CSS into a custom CSS file generated using the custom.css.source parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>docbook.css.source</String>
											</field>
											<field name="description">
												<String>The docbook.css.source parameter specifies the name of the file containing the default DocBook CSS styles. Those styles are necessary when the make.clean.html parameter is nonzero. The file is a well-formed XML file that must consist of a single style root element that contains CSS styles as its text content. The default value of the parameter (and filename) is docbook.css.xml. The stylesheets ship with the default file. You can substitute your own and specify its path in this parameter. If docbook.css.source is not blank, and make.clean.html is nonzero, then the stylesheet takes the following actions: The stylesheet uses the XSLT document() function to open the file specified by the parameter and load it into a variable. The stylesheet forms an output pathname consisting of the value of the base.dir parameter (if it is set) and the value of docbook.css.source, with the .xml suffix stripped off. The stylesheet removes the style wrapper element and writes just the CSS text content to the output file. The stylesheet adds a link element to the HTML HEAD element to reference the external CSS stylesheet. For example: &lt;link rel="stylesheet" href="docbook.css" type="text/css"> However, if the docbook.css.link parameter is set to zero, then no link is written for the default CSS file. That is useful if a custom CSS file will import the default CSS stylesheet to ensure proper cascading of styles. If the docbook.css.source parameter is changed from its default docbook.css.xml to blank, then no default CSS is generated. Likewise if the make.clean.html parameter is set to zero, then no default CSS is generated. The custom.css.source parameter can be used instead to generate a complete custom CSS file. You can use the generate.css.header parameter to instead write the CSS to each HTML HEAD element in a style tag instead of an external CSS file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>docbook.css.xml</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.assignment</String>
											</field>
											<field name="description">
												<String>The ebnf.assignment parameter determines what text is used to show assignment in productions in productionsets. While ::= is common, so are several other operators.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> ::= </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.statement.terminator</String>
											</field>
											<field name="description">
												<String>The ebnf.statement.terminator parameter determines what text is used to terminate each production in productionset. Some notations end each statement with a period.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.table.bgcolor</String>
											</field>
											<field name="description">
												<String>Sets the background color for EBNF tables (a pale brown). No bgcolor attribute is output if ebnf.table.bgcolor is set to the null string.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>#F5DCB3</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.table.border</String>
											</field>
											<field name="description">
												<String>Selects the border on EBNF tables. If non-zero, the tables have borders, otherwise they don't.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>editedby.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, a localized Edited by heading is displayed above editor names in output of the editor element.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>email.delimiters.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, delimiters For delimiters, the stylesheets are currently hard-coded to output angle brackets. are generated around e-mail addresses (the output of the email element).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>emphasis.propagates.style</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute of emphasis elements will be passed through to the HTML as a class attribute on a span that surrounds the emphasis.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>entry.propagates.style</String>
											</field>
											<field name="description">
												<String>If true, the role attribute of entry elements will be passed through to the HTML as a class attribute on the td or th generated for the table cell.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>exsl.node.set.available</String>
											</field>
											<field name="description">
												<String>If non-zero, then the exsl:node-set() function is available to be used in the stylesheet. If zero, then the function is not available. This param automatically detects the presence of the function and does not normally need to be set manually. This param was created to handle a long-standing bug in the Xalan processor that fails to detect the function even though it is available.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> 1 0 </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>firstterm.only.link</String>
											</field>
											<field name="description">
												<String>If non-zero, only firstterms will be automatically linked to the glossary. If glossary linking is not enabled, this parameter has no effect.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footer.rule</String>
											</field>
											<field name="description">
												<String>If non-zero, a rule will be drawn above the page footers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footnote.number.format</String>
											</field>
											<field name="description">
												<String>The footnote.number.format specifies the format to use for footnote numeration (1, i, I, a, or A).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footnote.number.symbols</String>
											</field>
											<field name="description">
												<String>If footnote.number.symbols is not the empty string, footnotes will use the characters it contains as footnote symbols. For example, *&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720; will identify footnotes with *, †, ‡,◊, and ✠. If there are more footnotes than symbols, the stylesheets will fall back to numbered footnotes using footnote.number.format. The use of symbols for footnotes depends on the ability of your processor (or browser) to render the symbols you select. Not all systems are capable of displaying the full range of Unicode characters. If the quoted characters in the preceding paragraph are not displayed properly, that's a good indicator that you may have trouble using those symbols for footnotes.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>formal.procedures</String>
											</field>
											<field name="description">
												<String>Formal procedures are numbered and always have a title.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>formal.title.placement</String>
											</field>
											<field name="description">
												<String>Specifies where formal object titles should occur. For each formal object type (figure, example, equation, table, and procedure) you can specify either the keyword before or after.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> figure before example before equation before table before procedure before task before </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>funcsynopsis.decoration</String>
											</field>
											<field name="description">
												<String>If non-zero, elements of the funcsynopsis will be decorated (e.g. rendered as bold or italic text). The decoration is controlled by templates that can be redefined in a customization layer.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>funcsynopsis.style</String>
											</field>
											<field name="description">
												<String>If funcsynopsis.style is ansi, ANSI-style function synopses are generated for a funcsynopsis, otherwise K&amp;R-style function synopses are generated.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>kr</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>function.parens</String>
											</field>
											<field name="description">
												<String>If non-zero, the formatting of a function element will include generated parentheses.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.consistent.ids</String>
											</field>
											<field name="description">
												<String>When the stylesheet assigns an id value to an output element, the generate-id() function may be used. That function may not produce consistent values between runs. Version control systems may misidentify the changing id values as changes to the document. If you set this parameter's value to 1, then the template named object.id will replace the use of the function generate-id() with &lt;xsl:number level="multiple" count="*"/>. This counts preceding elements to generate a unique number for the id value. This param does not associate permanent unique id values with particular elements. The id values are consistent only as long as the document structure does not change. If the document structure changes, then the counting of elements changes, and all id values after the first such change may be different, even when there is no change to the element itself or its output. The default value of this parameter is zero, so generate-id() is used by default.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.css.header</String>
											</field>
											<field name="description">
												<String>The stylesheets are capable of generating both default and custom CSS stylesheet files. The parameters make.clean.html, docbook.css.source, and custom.css.source control that feature. If you require that CSS styles reside in the HTML HEAD element instead of external CSS files, then set the generate.css.header parameter to nonzero (it is zero by default). Then instead of generating the CSS in external files, they are wrapped in style elements in the HEAD element of each HTML output file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.id.attributes</String>
											</field>
											<field name="description">
												<String>If non-zero, the HTML stylesheet will generate ID attributes on containers. For example, the markup: &lt;section id="foo">&lt;title>Some Title&lt;/title> &lt;para>Some para.&lt;/para> &lt;/section> might produce: &lt;div class="section" id="foo"> &lt;h2>Some Title&lt;/h2> &lt;p>Some para.&lt;/p> &lt;/div> The alternative is to generate anchors: &lt;div class="section"> &lt;h2>&lt;a name="foo">&lt;/a>Some Title&lt;/h2> &lt;p>Some para.&lt;/p> &lt;/div> Because the name attribute of the a element and the id attribute of other tags are both of type ID, producing both generates invalid documents. As of version 1.50, you can use this switch to control which type of identifier is generated. For backwards-compatibility, generating a anchors is preferred. Note: at present, this switch is incompletely implemented. Disabling ID attributes will suppress them, but enabling ID attributes will not suppress the anchors.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.legalnotice.link</String>
											</field>
											<field name="description">
												<String>If the value of generate.legalnotice.link is non-zero, the stylesheet: writes the contents of legalnotice to a separate HTML file inserts a hyperlink to the legalnotice file adds (in the HTML head) either a single link or element or multiple link elements (depending on the value of the html.head.legalnotice.link.multiple parameter), with the value or values derived from the html.head.legalnotice.link.types parameter Otherwise, if generate.legalnotice.link is zero, legalnotice contents are rendered on the title page. The name of the separate HTML file is computed as follows: If a filename is given by the dbhtml filename processing instruction, that filename is used. If the legalnotice has an id/xml:id attribute, and if use.id.as.filename != 0, the filename is the concatenation of the id value and the value of the html.ext parameter. If the legalnotice does not have an id/xml:id attribute, or if use.id.as.filename = 0, the filename is the concatenation of "ln-", auto-generated id value, and html.ext value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.manifest</String>
											</field>
											<field name="description">
												<String>If non-zero, a list of HTML files generated by the stylesheet transformation is written to the file named by the manifest parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.meta.abstract</String>
											</field>
											<field name="description">
												<String>If non-zero, document abstracts will be reproduced in the HTML head, with >meta name="description" content="..."</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.revhistory.link</String>
											</field>
											<field name="description">
												<String>If non-zero, the contents of revhistory are written to a separate HTML file and a link to the file is generated. Otherwise, revhistory contents are rendered on the title page. The name of the separate HTML file is computed as follows: If a filename is given by the dbhtml filename processing instruction, that filename is used. If the revhistory has an id/xml:id attribute, and if use.id.as.filename != 0, the filename is the concatenation of the id value and the value of the html.ext parameter. If the revhistory does not have an id/xml:id attribute, or if use.id.as.filename = 0, the filename is the concatenation of "rh-", auto-generated id value, and html.ext value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.toc</String>
											</field>
											<field name="description">
												<String>This parameter has a structured value. It is a table of space-delimited path/value pairs. Each path identifies some element in the source document using a restricted subset of XPath (only the implicit child axis, no wildcards, no predicates). Paths can be either relative or absolute. When processing a particular element, the stylesheets consult this table to determine if a ToC (or LoT(s)) should be generated. For example, consider the entry: book toc,figure This indicates that whenever a book is formatted, a Table Of Contents and a List of Figures should be generated. Similarly, /chapter toc indicates that whenever a document that has a root of chapter is formatted, a Table of Contents should be generated. The entry chapter would match all chapters, but /chapter matches only chapter document elements. Generally, the longest match wins. So, for example, if you want to distinguish articles in books from articles in parts, you could use these two entries: book/article toc,figure part/article toc Note that an article in a part can never match a book/article, so if you want nothing to be generated for articles in parts, you can simply leave that rule out. If you want to leave the rule in, to make it explicit that you're turning something off, use the value nop. For example, the following entry disables ToCs and LoTs for articles: article nop Do not simply leave the word article in the file without a matching value. That'd be just begging the silly little path/value parser to get confused. Section ToCs are further controlled by the generate.section.toc.level parameter. For a given section level to have a ToC, it must have both an entry in generate.toc and be within the range enabled by generate.section.toc.level.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> appendix toc,title article/appendix nop article toc,title book toc,title,figure,table,example,equation chapter toc,title part toc,title preface toc,title qandadiv toc qandaset toc reference toc,title sect1 toc sect2 toc
													sect3 toc sect4 toc sect5 toc section toc set toc,title </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossary.collection</String>
											</field>
											<field name="description">
												<String>Glossaries maintained independently across a set of documents are likely to become inconsistent unless considerable effort is expended to keep them in sync. It makes much more sense, usually, to store all of the glossary entries in a single place and simply extract the ones you need in each document. That's the purpose of the glossary.collection parameter. To setup a global glossary database, follow these steps: Setting Up the Glossary Database First, create a stand-alone glossary document that contains all of the entries that you wish to reference. Make sure that each glossary entry has an ID. Here's an example glossary: &lt;?xml version="1.0" encoding="utf-8"?> &lt;!DOCTYPE glossary PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"> &lt;glossary> &lt;glossaryinfo> &lt;editor>&lt;firstname>Eric&lt;/firstname>&lt;surname>Raymond&lt;/surname>&lt;/editor> &lt;title>Jargon File 4.2.3 (abridged)&lt;/title> &lt;releaseinfo>Just some test data&lt;/releaseinfo> &lt;/glossaryinfo> &lt;glossdiv>&lt;title>0&lt;/title> &lt;glossentry> &lt;glossterm>0&lt;/glossterm> &lt;glossdef> &lt;para>Numeric zero, as opposed to the letter `O' (the 15th letter of the English alphabet). In their unmodified forms they look a lot alike, and various kluges invented to make them visually distinct have compounded the confusion. If your zero is center-dotted and letter-O is not, or if letter-O looks almost rectangular but zero looks more like an American football stood on end (or the reverse), you're probably looking at a modern character display (though the dotted zero seems to have originated as an option on IBM 3270 controllers). If your zero is slashed but letter-O is not, you're probably looking at an old-style ASCII graphic set descended from the default typewheel on the venerable ASR-33 Teletype (Scandinavians, for whom /O is a letter, curse this arrangement). (Interestingly, the slashed zero long predates computers; Florian Cajori's monumental "A History of Mathematical Notations" notes that it was used in the twelfth and thirteenth centuries.) If letter-O has a slash across it and the zero does not, your display is tuned for a very old convention used at IBM and a few other early mainframe makers (Scandinavians curse &lt;emphasis>this&lt;/emphasis> arrangement even more, because it means two of their letters collide). Some Burroughs/Unisys equipment displays a zero with a &lt;emphasis>reversed&lt;/emphasis> slash. Old CDC computers rendered letter O as an unbroken oval and 0 as an oval broken at upper right and lower left. And yet another convention common on early line printers left zero unornamented but added a tail or hook to the letter-O so that it resembled an inverted Q or cursive capital letter-O (this was endorsed by a draft ANSI standard for how to draw ASCII characters, but the final standard changed the distinguisher to a tick-mark in the upper-left corner). Are we sufficiently confused yet?&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;glossentry> &lt;glossterm>1TBS&lt;/glossterm> &lt;glossdef> &lt;para role="accidence"> &lt;phrase role="pronounce">&lt;/phrase> &lt;phrase role="partsofspeach">n&lt;/phrase> &lt;/para> &lt;para>The "One True Brace Style"&lt;/para> &lt;glossseealso>indent style&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> &lt;!-- ... --> &lt;/glossdiv> &lt;!-- ... --> &lt;/glossary> Marking Up Glossary Terms That takes care of the glossary database, now you have to get the entries into your document. Unlike bibliography entries, which can be empty, creating placeholder glossary entries would be very tedious. So instead, support for glossary.collection relies on implicit linking. In your source document, simply use firstterm and glossterm to identify the terms you wish to have included in the glossary. The stylesheets assume that you will either set the baseform attribute correctly, or that the content of the element exactly matches a term in your glossary. If you're using a glossary.collection, don't make explicit links on the terms in your document. So, in your document, you might write things like this: &lt;para>This is dummy text, without any real meaning. The point is simply to reference glossary terms like &lt;glossterm>0&lt;/glossterm> and the &lt;firstterm baseform="1TBS">One True Brace Style (1TBS)&lt;/firstterm>. The &lt;glossterm>1TBS&lt;/glossterm>, as you can probably imagine, is a nearly religious issue.&lt;/para> If you set the firstterm.only.link parameter, only the terms marked with firstterm will be links. Otherwise, all the terms will be linked. Marking Up the Glossary The glossary itself has to be identified for the stylesheets. For lack of a better choice, the role is used. To identify the glossary as the target for automatic processing, set the role to auto. The title of this glossary (and any other information from the glossaryinfo that's rendered by your stylesheet) will be displayed, but the entries will come from the database. Unfortunately, the glossary can't be empty, so you must put in at least one glossentry. The content of this entry is irrelevant, it will not be rendered: &lt;glossary role="auto"> &lt;glossentry> &lt;glossterm>Irrelevant&lt;/glossterm> &lt;glossdef> &lt;para>If you can see this, the document was processed incorrectly. Use the &lt;parameter>glossary.collection&lt;/parameter> parameter.&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;/glossary> What about glossary divisions? If your glossary database has glossary divisions and your automatic glossary contains at least one glossdiv, the automic glossary will have divisions. If the glossdiv is missing from either location, no divisions will be rendered. Glossary entries (and divisions, if appropriate) in the glossary will occur in precisely the order they occur in your database. Formatting the Document Finally, when you are ready to format your document, simply set the glossary.collection parameter (in either a customization layer or directly through your processor's interface) to point to your global glossary. A relative path in the parameter is interpreted in one of two ways: If the parameter glossterm.auto.link is set to zero, then the path is relative to the file containing the empty glossary element in the document. If the parameter glossterm.auto.link is set to non-zero, then the path is relative to the file containing the first inline glossterm or firstterm in the document to be linked. Once the collection file is opened by the first instance described above, it stays open for the current document and the relative path is not reinterpreted again. The stylesheets will format the glossary in your document as if all of the entries implicilty referenced appeared there literally. Limitations Glossary cross-references within the glossary are not supported. For example, this will not work: &lt;glossentry> &lt;glossterm>gloss-1&lt;/glossterm> &lt;glossdef>&lt;para>A description that references &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/para> &lt;glossseealso>gloss-2&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> If you put glossary cross-references in your glossary that way, you'll get the cryptic error: Warning: glossary.collection specified, but there are 0 automatic glossaries. Instead, you must do two things: Markup your glossary using glossseealso: &lt;glossentry> &lt;glossterm>gloss-1&lt;/glossterm> &lt;glossdef>&lt;para>A description that references &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/para> &lt;glossseealso>gloss-2&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> Make sure there is at least one glossterm reference to gloss-2 in your document. The easiest way to do that is probably within a remark in your automatic glossary: &lt;glossary role="auto"> &lt;remark>Make sure there's a reference to &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/remark> &lt;glossentry> &lt;glossterm>Irrelevant&lt;/glossterm> &lt;glossdef> &lt;para>If you can see this, the document was processed incorrectly. Use the &lt;parameter>glossary.collection&lt;/parameter> parameter.&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;/glossary></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossary.sort</String>
											</field>
											<field name="description">
												<String>If non-zero, then the glossentry elements within a glossary, glossdiv, or glosslist are sorted on the glossterm, using the current lang setting. If zero (the default), then glossentry elements are not sorted and are presented in document order.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossentry.show.acronym</String>
											</field>
											<field name="description">
												<String>A setting of yes means they should be displayed; no means they shouldn't. If primary is used, then they are shown as the primary text for the entry. This setting controls both acronym and abbrev elements in the glossentry.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossterm.auto.link</String>
											</field>
											<field name="description">
												<String>If non-zero, links from inline glossterms to the corresponding glossentry elements in a glossary or glosslist will be automatically generated. This is useful when your glossterms are consistent and you don't want to add links manually. The automatic link generation feature is not used on glossterm elements that have a linkend attribute.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphic.default.extension</String>
											</field>
											<field name="description">
												<String>If a graphic or mediaobject includes a reference to a filename that does not include an extension, and the format attribute is unspecified, the default extension will be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphicsize.extension</String>
											</field>
											<field name="description">
												<String>If non-zero (and if use.extensions is non-zero and if you're using a processor that supports extension functions), the getWidth and getDepth functions will be used to extract image sizes from graphics. The main supported image formats are GIF, JPEG, and PNG. Somewhat cruder support for EPS and PDF images is also available.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphicsize.use.img.src.path</String>
											</field>
											<field name="description">
												<String>If non-zero img.src.path parameter will be appended before filenames passed to extension functions for measuring image dimensions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>header.rule</String>
											</field>
											<field name="description">
												<String>If non-zero, a rule will be drawn below the page headers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.default.language</String>
											</field>
											<field name="description">
												<String>This language is used when there is no language attribute on programlisting.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.append</String>
											</field>
											<field name="description">
												<String>Specifies content to append to the end of HTML files output by the html/docbook.xsl stylesheet, after the closing &lt;html> tag. You probably don't want to set any value for this parameter; but if you do, the only value it should ever be set to is a newline character: &amp;#x0a; or &amp;#10;</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.base</String>
											</field>
											<field name="description">
												<String>If html.base is set, it is used for the base element in the head of the html documents. The parameter specifies the base URL for all relative URLs in the document. This is useful for dynamically served html where the base URI needs to be shifted.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cellpadding</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used as the default cellpadding value in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or 5%</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cellspacing</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used as the default cellspacing value in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or 5%</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cleanup</String>
											</field>
											<field name="description">
												<String>If non-zero, and if the EXSLT extensions are supported by your processor, the resulting HTML will be cleaned up. This improves the chances that the resulting HTML will be valid. It may also improve the formatting of some elements. This parameter is different from make.valid.html because it uses extension functions to manipulate result-tree-fragments.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.extra.head.links</String>
											</field>
											<field name="description">
												<String>If non-zero, extra link elements will be generated in the head of chunked HTML files. These extra links point to chapters, appendixes, sections, etc. as supported by the Site Navigation Bar in Mozilla 1.0 (as of CR1, at least).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.head.legalnotice.link.multiple</String>
											</field>
											<field name="description">
												<String>html.head.legalnotice.link.multiple
Generate multiple link instances in html head for legalnotice?

Description

If html.head.legalnotice.link.multiple is non-zero and the value of html.head.legalnotice.link.types contains multiple link types, then the stylesheet generates (in the head section of the HTML source) one link element for each link type specified. For example, if the value of html.head.legalnotice.link.types is "copyright license": &lt;link rel="copyright" href="ln-id2524073.html" title="Legal Notice"> &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice"> Otherwise, the stylesheet generates generates a single link instance; for example: &lt;link rel="copyright license" href="ln-id2524073.html" title="Legal Notice"> Default value: 1</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.head.legalnotice.link.types</String>
											</field>
											<field name="description">
												<String>The value of html.head.legalnotice.link.types is a space-separated list of link types, as described in Section 6.12 of the HTML 4.01 specification. If the value of the generate.legalnotice.link parameter is non-zero, then the stylesheet generates (in the head section of the HTML source) either a single HTML link element or, if the value of the html.head.legalnotice.link.multiple is non-zero, one link element for each link type specified. Each link has the following attributes: a rel attribute whose value is derived from the value of html.head.legalnotice.link.types an href attribute whose value is set to the URL of the file containing the legalnotice a title attribute whose value is set to the title of the corresponding legalnotice (or a title programatically determined by the stylesheet)
For example:
  &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice">. 
In an ideal world, the default value of html.head.legalnotice.link.types would  probably be "license", since the content of the DocBook legalnotice is typically license information, not copyright information. However, the default value is "copyright" for pragmatic reasons: because that's among the set of "recognized link types" listed in Section 6.12 of the HTML 4.01 specification, and because certain browsers and browser extensions are preconfigured to recognize that value. Default value: copyright</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>copyright</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.longdesc</String>
											</field>
											<field name="description">
												<String>If non-zero, HTML files will be created for the longdesc attribute. These files are created from the textobjects in mediaobjects and inlinemediaobject.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.longdesc.link</String>
											</field>
											<field name="description">
												<String>If non-zero, links will be created to the HTML files created for the longdesc attribute. It makes no sense to enable this option without also enabling the html.longdesc parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.script</String>
											</field>
											<field name="description">
												<String>The html.script parameter is either empty (default), indicating that no script element should be generated in the html output, or it is a list of one or more script locations. Multiple script locations are space-delimited. If you need to reference a script URI that includes a space, encode it with %20. A separate html script element will be generated for each script in the order they are listed in the parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.script.type</String>
											</field>
											<field name="description">
												<String>The type of script to place in the HTML script element. Specifically, the value of the script element's type attribute. The default value is text/javascript. This param is used only when the stylesheet parameter html.script is non-blank and specifies the location of a script.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>text/javascript</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet</String>
											</field>
											<field name="description">
												<String>The html.stylesheet parameter is either empty, indicating that no stylesheet link tag should be generated in the html output, or it is a list of one or more stylesheet files. Multiple stylesheets are space-delimited. If you need to reference a stylesheet URI that includes a space, encode it with %20. A separate html link element will be generated for each stylesheet in the order they are listed in the parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet.type</String>
											</field>
											<field name="description">
												<String>The type of the stylesheet to place in the HTML link tag.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>text/css</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>id.warnings</String>
											</field>
											<field name="description">
												<String>If non-zero, the stylesheet will issue a warning for any element (other than the root element) which has a title but does not have an ID.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ignore.image.scaling</String>
											</field>
											<field name="description">
												<String>If non-zero, the scaling attributes on graphics and media objects are ignored.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>img.src.path</String>
											</field>
											<field name="description">
												<String>Add a path prefix to the value of the fileref attribute of graphic, inlinegraphic, and imagedata elements. The resulting compound path is used in the output as the value of the src attribute of img (HTML) or external-graphic (FO). The path given by img.src.path could be relative to the directory where the HTML/FO files are created, or it could be an absolute URI. The default value is empty. Be sure to include a trailing slash if needed. This prefix is not applied to any filerefs that start with "/" or contain "://".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.links.to.section</String>
											</field>
											<field name="description">
												<String>If zero, then an index entry in an index links directly to the location of the generated anchor that is output for the indexterm. If two identical indexterm elements exist in the same section, then both entries appear in the index with the same title but link to different locations. If non-zero, then an index entry in an index links to the section title containing the indexterm, rather than directly to the anchor output for the indexterm. Duplicate indexterm entries in the same section are dropped. The default value is 1, so index entries link to section titles by default. In both cases, the link text in an index entry is the title of the section containing the indexterm. That is because HTML does not have numbered pages. It also provides the reader with context information for each link. This parameter lets you choose which style of index linking you want. When set to 0, an index entry takes you to the precise location of its corresponding indexterm. However, if you have a lot of duplicate entries in sections, then you have a lot of duplicate titles in the index, which makes it more cluttered. The reader may not recognize why duplicate titles appear until they follow the links. Also, the links may land the reader in the middle of a section where the section title is not visible, which may also be confusing to the reader. When set to 1, an index entry link is less precise, but duplicate titles in the index entries are eliminated. Landing on the section title location may confirm the reader's expectation that a link that shows a section title will take them to that section title, not a location within the section.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.method</String>
											</field>
											<field name="description">
												<String>Select method used to group index entries in an index Description This parameter lets you select which method to use for sorting and grouping index entries in an index. Indexes in Latin-based languages that have accented characters typically sort together accented words and unaccented words. Thus �? (U+00C1 LATIN CAPITAL LETTER A WITH ACUTE) would sort together with A (U+0041 LATIN CAPITAL LETTER A), so both would appear in the A section of the index. Languages using other alphabets (such as Russian, which is written in the Cyrillic alphabet) and languages using ideographic chararacters (such as Japanese) require grouping specific to the languages and alphabets. The default indexing method is limited. It can group accented characters in Latin-based languages only. It cannot handle non-Latin alphabets or ideographic languages. The other indexing methods require extensions of one type or another, and do not work with all XSLT processors, which is why they are not used by default. The three choices for indexing method are: basic (default) Sort and groups words based only on the Latin alphabet. Words with accented Latin letters will group and sort with their respective primary letter, but words in non-Latin alphabets will be put in the Symbols section of the index. kosek This method sorts and groups words based on letter groups configured in the DocBook locale file for the given language. See, for example, the French locale file common/fr.xml. This method requires that the XSLT processor supports the EXSLT extensions (most do). It also requires support for using user-defined functions in xsl:key (xsltproc does not). This method is suitable for any language for which you can list all the individual characters that should appear in each letter group in an index. It is probably not practical to use it for ideographic languages such as Chinese that have hundreds or thousands of characters. To use the kosek method, you must: Use a processor that supports its extensions, such as Saxon 6 or Xalan (xsltproc and Saxon 8 do not). Set the index.method parameter's value to kosek. Import the appropriate index extensions stylesheet module fo/autoidx-kosek.xsl or html/autoidx-kosek.xsl into your customization. kimber This method uses extensions to the Saxon processor to implement sophisticated indexing processes. It uses its own configuration file, which can include information for any number of languages. Each language's configuration can group words using one of two processes. In the enumerated process similar to that used in the kosek method, you indicate the groupings character-by-character. In the between-key process, you specify the break-points in the sort order that should start a new group. The latter configuration is useful for ideographic languages such as Chinese, Japanese, and Korean. You can also define your own collation algorithms and how you want mixed Latin-alphabet words sorted. For a whitepaper describing the extensions, see: http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf. To download the extension library, see http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport. To use the kimber method, you must: Use Saxon (version 6 or 8) as your XSLT processor. Install and configure the Innodata Isogen library, using the documentation that comes with it. Set the index.method parameter's value to kimber. Import the appropriate index extensions stylesheet module fo/autoidx-kimber.xsl or html/autoidx-kimber.xsl into your customization. Default value: basic</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>basic</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.number.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between page references in a formatted index entry. Typically that would be a comma and a space. Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'number-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can override the gentext with the content of this parameter. The content can be a simple string, or it can be something more complex such as a call-template. In HTML index output, section title references are used instead of page number references. This punctuation appears between such section titles in an HTML index.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.on.role</String>
											</field>
											<field name="description">
												<String>If non-zero, then an index element that has a role attribute value will contain only those indexterm elements with a matching role value. If an index has no role attribute or it is blank, then the index will contain all indexterms in the current scope. If index.on.role is zero, then the role attribute has no effect on selecting indexterms for an index. If you are using DocBook version 4.3 or later, you should use the type attribute instead of role on indexterm and index, and set the index.on.type to a nonzero value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.on.type</String>
											</field>
											<field name="description">
												<String>If non-zero, then an index element that has a type attribute value will contain only those indexterm elements with a matching type attribute value. If an index has no type attribute or it is blank, then the index will contain all indexterms in the current scope. If index.on.type is zero, then the type attribute has no effect on selecting indexterms for an index. For those using DocBook version 4.2 or earlier, the type attribute is not available for index terms. However, you can achieve the same effect by using the role attribute in the same manner on indexterm and index, and setting the stylesheet parameter index.on.role to a nonzero value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.prefer.titleabbrev</String>
											</field>
											<field name="description">
												<String>If non-zero, and if a titleabbrev is defined, the abbreviated title is used as the link text of a back reference in the index.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.range.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between the two numbers of a page range in an index. This parameter is only used by those XSL-FO processors that support an extension for generating such page ranges (such as XEP). Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'range-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can override the gentext with the content of this parameter. The content can be a simple string, or it can be something more complex such as a call-template. In HTML index output, section title references are used instead of page number references. So there are no page ranges and this parameter has no effect.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.term.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between the end of an index term and its list of page references. Typically that might be a comma and a space. Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'term-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can fill in the content for this normally empty override parameter. The content can be a simple string, or it can be something more complex such as a call-template. For fo output, it could be an fo:leader element to provide space of a specific length, or a dot leader.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.olink.page.number</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines if cross references made between documents with olink will include page number citations. In most cases this is only applicable to references in printed output. The parameter has three possible values. no No page number references will be generated for olinks. yes Page number references will be generated for all olink references. The style of page reference may be changed if an xrefstyle attribute is used. maybe Page number references will not be generated for an olink element unless it has an xrefstyle attribute whose value specifies a page reference. Olinks that point to targets within the same document are treated as xrefs, and controlled by the insert.xref.page.number parameter. Page number references for olinks to external documents can only be inserted if the information exists in the olink database. This means each olink target element (div or obj) must have a page attribute whose value is its page number in the target document. The XSL stylesheets are not able to extract that information during processing because pages have not yet been created in XSLT transformation. Only the XSL-FO processor knows what page each element is placed on. Therefore some postprocessing must take place to populate page numbers in the olink database.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.olink.pdf.frag</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines whether the cross reference URIs to PDF documents made with olink will include fragment identifiers. When forming a URI to link to a PDF document, a fragment identifier (typically a '#' followed by an id value) appended to the PDF filename can be used by the PDF viewer to open the PDF file to a location within the document instead of the first page. However, not all PDF files have id values embedded in them, and not all PDF viewers can handle fragment identifiers. If insert.olink.pdf.frag is set to a non-zero value, then any olink targeting a PDF file will have the fragment identifier appended to the URI. The URI is formed by concatenating the value of the olink.base.uri parameter, the value of the baseuri attribute from the document element in the olink database with the matching targetdoc value, and the value of the href attribute for the targeted element in the olink database. The href attribute contains the fragment identifier. If insert.olink.pdf.frag is set to zero (the default value), then the href attribute from the olink database is not appended to PDF olinks, so the fragment identifier is left off. A PDF olink is any olink for which the baseuri attribute from the matching document element in the olink database ends with '.pdf'. Any other olinks will still have the fragment identifier added.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.xref.page.number</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines if cross references (xrefs) in printed output will include page number citations. It has three possible values. no No page number references will be generated. yes Page number references will be generated for all xref elements. The style of page reference may be changed if an xrefstyle attribute is used. maybe Page number references will not be generated for an xref element unless it has an xrefstyle attribute whose value specifies a page reference.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>keep.relative.image.uris</String>
											</field>
											<field name="description">
												<String>If non-zero, relative URIs (in, for example fileref attributes) will be used in the generated output. Otherwise, the URIs will be made absolute with respect to the base URI. Note that the stylesheets calculate (and use) the absolute form for some purposes, this only applies to the resulting output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.gentext.language</String>
											</field>
											<field name="description">
												<String>If this parameter is set to any value other than the empty string, its value will be used as the value for the language when generating text. Setting l10n.gentext.language overrides any settings within the document being formatted.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.lang.value.rfc.compliant</String>
											</field>
											<field name="description">
												<String>If non-zero, ensure that the values for all lang attributes in HTML output are RFC compliantSection 8.1.1, Language Codes, in the HTML 4.0 Recommendation states that: [RFC1766] defines and explains the language codes that must be used in HTML documents. Briefly, language codes consist of a primary code and a possibly empty series of subcodes: language-code = primary-code ( "-" subcode )* And in RFC 1766, Tags for the Identification of Languages, the EBNF for "language tag" is given as: Language-Tag = Primary-tag *( "-" Subtag ) Primary-tag = 1*8ALPHA Subtag = 1*8ALPHA . by taking any underscore characters in any lang values found in source documents, and replacing them with hyphen characters in output HTML files. For example, zh_CN in a source document becomes zh-CN in the HTML output form that source. This parameter does not cause any case change in lang values, because RFC 1766 explicitly states that all "language tags" (as it calls them) "are to be treated as case insensitive".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>label.from.part</String>
											</field>
											<field name="description">
												<String>If label.from.part is non-zero, then numbering of components �? preface, chapter, appendix, and reference (when reference occurs at the component level)�? is re-started within each part. If label.from.part is zero (the default), numbering of components is not re-started within each part; instead, components are numbered sequentially throughout each book, regardless of whether or not they occur within part instances.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.everyNth</String>
											</field>
											<field name="description">
												<String>If line numbering is enabled, everyNth line will be numbered. Note that numbering is one based, not zero based. See also linenumbering.extension, linenumbering.separator, linenumbering.width and use.extensions</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>5</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.extension</String>
											</field>
											<field name="description">
												<String>If non-zero, verbatim environments (address, literallayout, programlisting, screen, synopsis) that specify line numbering will have line numbers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.separator</String>
											</field>
											<field name="description">
												<String>The separator is inserted between line numbers and lines in the verbatim environment. The default value is a single white space. Note the interaction with linenumbering.width</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.width</String>
											</field>
											<field name="description">
												<String>If line numbering is enabled, line numbers will appear right justified in a field "width" characters wide.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>3</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>link.mailto.url</String>
											</field>
											<field name="description">
												<String>If not the empty string, this address will be used for the rel=made link element in the html head</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.clean.html</String>
											</field>
											<field name="description">
												<String>If make.clean.html is true, the stylesheets take extra effort to ensure that the resulting HTML is conforms to modern HTML coding standards. In addition to eliminating excessive and noncompliant coding, it moves presentation HTML coding to a CSS stylesheet. The resulting HTML is dependent on CSS for formatting, and so the stylesheet is capable of generating a supporting CSS file. The docbook.css.source and custom.css.source parameters control how a CSS file is generated. If you require your CSS to reside in the HTML head element, then the generate.css.header can be used to do that. The make.clean.html parameter is different from html.cleanup because the former changes the resulting markup; it does not use extension functions like the latter to manipulate result-tree-fragments, and is therefore applicable to any XSLT processor. If make.clean.html is set to zero (the default), then the stylesheet retains its original old style HTML formatting features.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.graphic.viewport</String>
											</field>
											<field name="description">
												<String>The HTML img element only supports the notion of content-area scaling; it doesn't support the distinction between a content-area and a viewport-area, so we have to make some compromises. If make.graphic.viewport is non-zero, a table will be used to frame the image. This creates an effective viewport-area. Tables and alignment don't work together, so this parameter is ignored if alignment is specified on an image.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.single.year.ranges</String>
											</field>
											<field name="description">
												<String>If non-zero, year ranges that span a single year will be printed in range notation (1998-1999) instead of discrete notation (1998, 1999).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.valid.html</String>
											</field>
											<field name="description">
												<String>If make.valid.html is true, the stylesheets take extra effort to ensure that the resulting HTML is valid. This may mean that some para tags are translated into HTML divs or that other substitutions occur. This parameter is different from html.cleanup because it changes the resulting markup; it does not use extension functions to manipulate result-tree-fragments and is therefore applicable to any XSLT processor.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.year.ranges</String>
											</field>
											<field name="description">
												<String>If non-zero, multiple copyright year elements will be collated into ranges. This works only if each year number is put into a separate year element. The copyright element permits multiple year elements. If a year element contains a dash or a comma, then that year element will not be merged into any range.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manifest</String>
											</field>
											<field name="description">
												<String>The name of the file to which a manifest is written (if the value of the generate.manifest parameter is non-zero).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>HTML.manifest</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manual.toc</String>
											</field>
											<field name="description">
												<String>The manual.toc identifies an explicit TOC that will be used for building the printed TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>menuchoice.menu.separator</String>
											</field>
											<field name="description">
												<String>Separator used to connect items of a menuchoice with guimenuitem or guisubmenu. Other elements are linked with menuchoice.separator. The default value is &amp;#x2192;, which is the &amp;rarr; (right arrow) character entity. The current FOP (0.20.5) requires setting the font-family explicitly. The default value also includes spaces around the arrow, which will allow a line to break. Replace the spaces with &amp;#xA0; (nonbreaking space) if you don't want those spaces to break.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>→</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>menuchoice.separator</String>
											</field>
											<field name="description">
												<String>Separator used to connect items of a menuchoice other than guimenuitem and guisubmenu. The latter elements are linked with menuchoice.menu.separator.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>+</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics</String>
											</field>
											<field name="description">
												<String>If non-zero, the navigational headers and footers in chunked HTML are presented in an alternate style that uses graphical icons for Next, Previous, Up, and Home. Default graphics are provided in the distribution. If zero, text is used instead of graphics.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension to use on navigational graphics used in the headers and footers of chunked HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.gif</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics.path</String>
											</field>
											<field name="description">
												<String>Sets the path, probably relative to the directory where the HTML files are created, to the navigational graphics used in the headers and footers of chunked HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>images/</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.image.depth</String>
											</field>
											<field name="description">
												<String>See nominal.image.width.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.image.width</String>
											</field>
											<field name="description">
												<String>Graphic widths expressed as a percentage are problematic. In the following discussion, we speak of width and contentwidth, but the same issues apply to depth and contentdepth. A width of 50% means "half of the available space for the image." That's fine. But note that in HTML, this is a dynamic property and the image size will vary if the browser window is resized. A contentwidth of 50% means "half of the actual image width". But what does that mean if the stylesheets cannot assess the image's actual size? Treating this as a width of 50% is one possibility, but it produces behavior (dynamic scaling) that seems entirely out of character with the meaning. Instead, the stylesheets define a nominal.image.width and convert percentages to actual values based on that nominal size.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.table.width</String>
											</field>
											<field name="description">
												<String>In order to convert CALS column widths into HTML column widths, it is sometimes necessary to have an absolute table width to use for conversion of mixed absolute and relative widths. This value must be an absolute length (not a percentage).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>6in</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.base.uri</String>
											</field>
											<field name="description">
												<String>When cross reference data is collected for resolving olinks, it may be necessary to prepend a base URI to each target's href. This parameter lets you set that base URI when cross reference data is collected. This feature is needed when you want to link to a document that is processed without chunking. The output filename for such a document is not known to the XSL stylesheet; the only target information consists of fragment identifiers such as #idref. To enable the resolution of olinks between documents, you should pass the name of the HTML output file as the value of this parameter. Then the hrefs recorded in the cross reference data collection look like outfile.html#idref, which can be reached as links from other documents.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.debug</String>
											</field>
											<field name="description">
												<String>If non-zero, then each olink will generate several messages about how it is being resolved during processing. This is useful when an olink does not resolve properly and the standard error messages are not sufficient to find the problem. You may need to read through the olink XSL templates to understand the context for some of the debug messages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.doctitle</String>
											</field>
											<field name="description">
												<String>When olinks between documents are resolved, the generated text may not make it clear that the reference is to another document. It is possible for the stylesheets to append the other document's title to external olinks. For this to happen, two parameters must be set. This olink.doctitle parameter should be set to either yes or maybe to enable this feature. And you should also set the current.docid parameter to the document id for the document currently being processed for output. Then if an olink's targetdoc id differs from the current.docid value, the stylesheet knows that it is a reference to another document and can append the target document's title to the generated olink text. The text for the target document's title is copied from the olink database from the ttl element of the top-level div for that document. If that ttl element is missing or empty, no title is output. The supported values for olink.doctitle are: yes Always insert the title to the target document if it is not the current document. no Never insert the title to the target document, even if requested in an xrefstyle attribute. maybe Only insert the title to the target document, if requested in an xrefstyle attribute. An xrefstyle attribute may override the global setting for individual olinks. The following values are supported in an xrefstyle attribute using the select: syntax: docname Insert the target document name for this olink using the docname gentext template, but only if the value of olink.doctitle is not no. docnamelong Insert the target document name for this olink using the docnamelong gentext template, but only if the value of olink.doctitle is not no. nodocname Omit the target document name even if the value of olink.doctitle is yes. Another way of inserting the target document name for a single olink is to employ an xrefstyle attribute using the template: syntax. The %o placeholder (the letter o, not zero) in such a template will be filled in with the target document's title when it is processed. This will occur regardless of the value of olink.doctitle. Note that prior to version 1.66 of the XSL stylesheets, the allowed values for this parameter were 0 and 1. Those values are still supported and mapped to 'no' and 'yes', respectively.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.fragid</String>
											</field>
											<field name="description">
												<String>The fragment identifier portion of an olink target.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>fragid=</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.lang.fallback.sequence</String>
											</field>
											<field name="description">
												<String>This parameter defines a list of lang values to search among to resolve olinks. Normally an olink tries to resolve to a document in the same language as the olink itself. The language of an olink is determined by its nearest ancestor element with a lang attribute, otherwise the value of the l10n.gentext.default.lang parameter. An olink database can contain target data for the same document in multiple languages. Each set of data has the same value for the targetdoc attribute in the document element in the database, but with a different lang attribute value. When an olink is being resolved, the target is first sought in the document with the same language as the olink. If no match is found there, then this parameter is consulted for additional languages to try. The olink.lang.fallback.sequence must be a whitespace separated list of lang values to try. The first one with a match in the olink database is used. The default value is empty. For example, a document might be written in German and contain an olink with targetdoc="adminguide". When the document is processed, the processor first looks for a target dataset in the olink database starting with: &lt;document targetdoc="adminguide" lang="de">. If there is no such element, then the olink.lang.fallback.sequence parameter is consulted. If its value is, for example, fr en, then the processor next looks for targetdoc="adminguide" lang="fr", and then for targetdoc="adminguide" lang="en". If there is still no match, it looks for targetdoc="adminguide" with no lang attribute. This parameter is useful when a set of documents is only partially translated, or is in the process of being translated. If a target of an olink has not yet been translated, then this parameter permits the processor to look for the document in other languages. This assumes the reader would rather have a link to a document in a different language than to have a broken link.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.outline.ext</String>
											</field>
											<field name="description">
												<String>The extension to be expected for OLink outline files Bob has this parameter as dead. Please don't use</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.olink</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.properties</String>
											</field>
											<field name="description">
												<String>This attribute set is applied to the fo:basic-link element of an olink. It is not applied to the optional page number or optional title of the external document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>pubid</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.pubid</String>
											</field>
											<field name="description">
												<String> </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>pubid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.resolver</String>
											</field>
											<field name="description">
												<String></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>/cgi-bin/olink</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.sysid</String>
											</field>
											<field name="description">
												<String></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>sysid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>othercredit.like.author.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, output of the othercredit element on titlepages is displayed in the same style as author and editor output. If zero then othercredit output is displayed using a style different than that of author and editor.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>pixels.per.inch</String>
											</field>
											<field name="description">
												<String>When lengths are converted to pixels, this value is used to determine the size of a pixel. The default value is taken from the XSL Recommendation.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>90</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>points.per.em</String>
											</field>
											<field name="description">
												<String>The fixed value used for calculations based upon the size of a character. The assumption made is that ten point font is in use. This assumption may not be valid.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>preface.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero then prefaces will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (arabic).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>prefer.internal.olink</String>
											</field>
											<field name="description">
												<String>If you are re-using XML content modules in multiple documents, you may want to redirect some of your olinks. This parameter permits you to redirect an olink to the current document. For example: you are writing documentation for a product, which includes 3 manuals: a little installation booklet (booklet.xml), a user guide (user.xml), and a reference manual (reference.xml). All 3 documents begin with the same introduction section (intro.xml) that contains a reference to the customization section (custom.xml) which is included in both user.xml and reference.xml documents. How do you write the link to custom.xml in intro.xml so that it is interpreted correctly in all 3 documents? If you use xref, it will fail in user.xml. If you use olink (pointing to reference.xml), the reference in user.xml will point to the customization section of the reference manual, while it is actually available in user.xml. If you set the prefer.internal.olink parameter to a non-zero value, then the processor will first look in the olink database for the olink's targetptr attribute value in document matching the current.docid parameter value. If it isn't found there, then it tries the document in the database with the targetdoc value that matches the olink's targetdoc attribute. This feature permits an olink reference to resolve to the current document if there is an element with an id matching the olink's targetptr value. The current document's olink data must be included in the target database for this to work. There is a potential for incorrect links if the same id attribute value is used for different content in different documents. Some of your olinks may be redirected to the current document when they shouldn't be. It is not possible to control individual olink instances.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>preferred.mediaobject.role</String>
											</field>
											<field name="description">
												<String>A mediaobject may contain several objects such as imageobjects. If the parameter use.role.for.mediaobject is non-zero, then the role attribute on imageobjects and other objects within a mediaobject container will be used to select which object will be used. If one of the objects has a role value that matches the preferred.mediaobject.role parameter, then it has first priority for selection. If more than one has such a role value, the first one is used. See the use.role.for.mediaobject parameter for the sequence of selection.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>process.empty.source.toc</String>
											</field>
											<field name="description">
												<String>Specifies that if an empty toc element is found in a source document, an automated TOC is generated at this point in the document. Depending on what the value of the generate.toc parameter is, setting this parameter to 1 could result in generation of duplicate automated TOCs. So the process.empty.source.toc is primarily useful as an "override": by placing an empty toc in your document and setting this parameter to 1, you can force a TOC to be generated even if generate.toc says not to.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>process.source.toc</String>
											</field>
											<field name="description">
												<String>Specifies that the contents of a non-empty "hard-coded" toc element in a source document are processed to generate a TOC in output. This parameter has no effect on automated generation of TOCs. An automated TOC may still be generated along with the "hard-coded" TOC. To suppress automated TOC generation, adjust the value of the generate.toc paramameter. The process.source.toc parameter also has no effect if the toc element is empty; handling for empty toc is controlled by the process.empty.source.toc parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.arch</String>
											</field>
											<field name="description">
												<String>Target profile for the arch attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by the profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.attribute</String>
											</field>
											<field name="description">
												<String>Target profile for the attribute attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.audience</String>
											</field>
											<field name="description">
												<String>Target profile for the audience attribute. The Value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.condition</String>
											</field>
											<field name="description">
												<String>Target profile for the condition attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.conformance</String>
											</field>
											<field name="description">
												<String>Target profile for the conformance attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.lang</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.os</String>
											</field>
											<field name="description">
												<String>Target profile for the os attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revision</String>
											</field>
											<field name="description">
												<String>Target profile for the revision attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revisionflag</String>
											</field>
											<field name="description">
												<String>Target profile for the revisionflag attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.role</String>
											</field>
											<field name="description">
												<String>Target profile for the role attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.security</String>
											</field>
											<field name="description">
												<String>Target profile for the security attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.status</String>
											</field>
											<field name="description">
												<String>Target profile for the status attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.userlevel</String>
											</field>
											<field name="description">
												<String>Target profile for the userlevel attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.value</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.vendor</String>
											</field>
											<field name="description">
												<String>Target profile for the vendor attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.wordsize</String>
											</field>
											<field name="description">
												<String>Target profile for the wordsize attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>punct.honorific</String>
											</field>
											<field name="description">
												<String>This parameter specifies the punctuation that should be added after an honorific in a personal name.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.defaultlabel</String>
											</field>
											<field name="description">
												<String>If no defaultlabel attribute is specified on a qandaset, this value is used. It is generally one of the legal values for the defaultlabel attribute (none, number or qanda), or one of the additional stylesheet-specific values (qnumber or qnumberanda). The default value is 'number'. The values are rendered as follows: qanda questions are labeled "Q:" and answers are labeled "A:". number The questions are enumerated and the answers are not labeled. qnumber The questions are labeled "Q:" followed by a number, and answers are not labeled. When sections are numbered, adding a label to the number distinguishes the question numbers from the section numbers. This value is not allowed in the defaultlabel attribute of a qandaset element. qnumberanda The questions are labeled "Q:" followed by a number, and the answers are labeled "A:". When sections are numbered, adding a label to the number distinguishes the question numbers from the section numbers. This value is not allowed in the defaultlabel attribute of a qandaset element. none No distinguishing label precedes Questions or Answers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>number</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.in.toc</String>
											</field>
											<field name="description">
												<String>If true (non-zero), then the generated table of contents for a document will include qandaset titles, qandadiv titles, and question elements. The default value (zero) excludes them from the TOC. This parameter does not affect any tables of contents that may be generated inside a qandaset or qandadiv.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.inherit.numeration</String>
											</field>
											<field name="description">
												<String>If non-zero, numbered qandadiv elements and question and answer inherit the enumeration of the ancestors of the qandaset.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.nested.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, instances of qandaentry that are children of answer elements are shown in the TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refclass.suppress</String>
											</field>
											<field name="description">
												<String>If the value of refclass.suppress is non-zero, then display of refclass contents is suppressed in output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.generate.name</String>
											</field>
											<field name="description">
												<String>If non-zero, a "NAME" section title is output before the list of refnames. This parameter and refentry.generate.title are mutually exclusive. This means that if you change this parameter to zero, you should set refentry.generate.title to non-zero unless you want get quite strange output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.generate.title</String>
											</field>
											<field name="description">
												<String>If non-zero, the reference page title or first name is output before the list of refnames. This parameter and refentry.generate.name are mutually exclusive. This means that if you change this parameter to non-zero, you should set refentry.generate.name to zero unless you want get quite strange output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.separator</String>
											</field>
											<field name="description">
												<String>If true, a separator will be generated between consecutive reference pages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.xref.manvolnum</String>
											</field>
											<field name="description">
												<String>if non-zero, the manvolnum is used when cross-referencing refentrys, either with xref or citerefentry.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>rootid</String>
											</field>
											<field name="description">
												<String>If rootid is not empty, it must be the value of an ID that occurs in the document being formatted. The entire document will be loaded and parsed, but formatting will begin at the element identified, rather than at the root. For example, this allows you to process only chapter 4 of a book. Because the entire document is available to the processor, automatic numbering, cross references, and other dependencies are correctly resolved.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>runinhead.default.title.end.punct</String>
											</field>
											<field name="description">
												<String>If non-zero, For a formalpara, use the specified string as the separator between the title and following text. The period is the default value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>runinhead.title.end.punct</String>
											</field>
											<field name="description">
												<String>Specify which characters are to be counted as punctuation. These characters are checked for a match with the last character of the title. If no match is found, the runinhead.default.title.end.punct contents are inserted. This is to avoid duplicated punctuation in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.!?:</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.autolabel.max.depth</String>
											</field>
											<field name="description">
												<String>When section numbering is turned on by the section.autolabel parameter, then this parameter controls the depth of section nesting that is numbered. Sections nested to a level deeper than this value will not be numbered.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>8</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>segmentedlist.as.table</String>
											</field>
											<field name="description">
												<String>If non-zero, segmentedlists will be formatted as tables.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>shade.verbatim</String>
											</field>
											<field name="description">
												<String>In the FO stylesheet, if this parameter is non-zero then the shade.verbatim.style properties will be applied to verbatim environments. In the HTML stylesheet, this parameter is now deprecated. Use CSS instead.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>shade.verbatim.style</String>
											</field>
											<field name="description">
												<String>Properties that specify the style of shaded verbatim listings. The parameters specified (the border and background color) are added to the styling of the xsl-fo output. A border might be specified as "thin black solid" for example. See xsl-fo</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>show.comments</String>
											</field>
											<field name="description">
												<String>If non-zero, comments will be displayed, otherwise they are suppressed. Comments here refers to the remark element (which was called comment prior to DocBook 4.0), not XML comments (&lt;-- like this -->) which are unavailable.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>show.revisionflag</String>
											</field>
											<field name="description">
												<String>If show.revisionflag is turned on, then the stylesheets may produce additional markup designed to allow a CSS stylesheet to highlight elements that have specific revisionflag settings. The markup inserted will be usually be either a &lt;span> or &lt;div> with an appropriate class attribute. (The value of the class attribute will be the same as the value of the revisionflag attribute). In some contexts, for example tables, where extra markup would be structurally illegal, the class attribute will be added to the appropriate container element. In general, the stylesheets only test for revisionflag in contexts where an importing stylesheet would have to redefine whole templates. Most of the revisionflag processing is expected to be done by another stylesheet, for example changebars.xsl.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>simplesect.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, simplesects will be included in the TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>spacing.paras</String>
											</field>
											<field name="description">
												<String>When non-zero, additional, empty paragraphs are inserted in several contexts (for example, around informal figures), to create a more pleasing visual appearance in many browsers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.header.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, header navigation will be suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.borders.with.css</String>
											</field>
											<field name="description">
												<String>If non-zero, CSS will be used to draw table borders.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.color</String>
											</field>
											<field name="description">
												<String>Set the color of table cell borders. If non-zero, the value is used for the border coloration. See CSS. A color is either a keyword or a numerical RGB specification. Keywords are aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, and yellow. To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.style</String>
											</field>
											<field name="description">
												<String>Specifies the border style of table cells. To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>solid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.thickness</String>
											</field>
											<field name="description">
												<String>If non-zero, specifies the thickness of borders on table cells. The units are points. See CSS To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0.5pt</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.footnote.number.format</String>
											</field>
											<field name="description">
												<String>The table.footnote.number.format specifies the format to use for footnote numeration (1, i, I, a, or A) in tables.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>a</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.footnote.number.symbols</String>
											</field>
											<field name="description">
												<String>If table.footnote.number.symbols is not the empty string, table footnotes will use the characters it contains as footnote symbols. For example, *&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720; will identify footnotes with ", †, ‡, ◊, and ✠ . If there are more footnotes than symbols, the stylesheets will fall back to numbered footnotes using table.footnote.number.format. The use of symbols for footnotes depends on the ability of your processor (or browser) to render the symbols you select. Not all systems are capable of displaying the full range of Unicode characters. If the quoted characters in the preceding paragraph are not displayed properly, that's a good indicator that you may have trouble using those symbols for footnotes.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.color</String>
											</field>
											<field name="description">
												<String>Specifies the border color of table frames.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.style</String>
											</field>
											<field name="description">
												<String>Specifies the border style of table frames.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>solid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.thickness</String>
											</field>
											<field name="description">
												<String>Specifies the thickness of the border on the table's frame.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0.5pt</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tablecolumns.extension</String>
											</field>
											<field name="description">
												<String>The table columns extension function adjusts the widths of table columns in the HTML result to more accurately reflect the specifications in the CALS table.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>target.database.document</String>
											</field>
											<field name="description">
												<String>To resolve olinks between documents, the stylesheets use a master database document that identifies the target datafiles for all the documents within the scope of the olinks. This parameter value is the URI of the master document to be read during processing to resolve olinks. The default value is olinkdb.xml. The data structure of the file is defined in the targetdatabase.dtd DTD. The database file provides the high level elements to record the identifiers, locations, and relationships of documents. The cross reference data for individual documents is generally pulled into the database using system entity references or XIncludes. See also targets.filename.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>olinkdb.xml</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>targets.filename</String>
											</field>
											<field name="description">
												<String>In order to resolve olinks efficiently, the stylesheets can generate an external data file containing information about all potential cross reference endpoints in a document. This parameter lets you change the name of the generated file from the default name target.db. The name must agree with that used in the target database used to resolve olinks during processing. See also target.database.document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>target.db</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.delims</String>
											</field>
											<field name="description">
												<String>For compatibility with DSSSL based DBTeXMath from Allin Cottrell you should set this parameter to 0. This feature is useful for print/PDF output only if you use the obsolete and now unsupported PassiveTeX XSL-FO engine. Related Parameters tex.math.in.alt, passivetex.extensions See Also You can also use the dbtex delims processing instruction to control whether delimiters are output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.file</String>
											</field>
											<field name="description">
												<String>Name of auxiliary file for TeX equations. This file can be processed by dvi2bitmap to get bitmap versions of equations for HTML output. Related Parameters tex.math.in.alt, tex.math.delims, More information For how-to documentation on embedding TeX equations and generating output from them, see DBTeXMath.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>tex-math-equations.tex</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.in.alt</String>
											</field>
											<field name="description">
												<String>If you want type math directly in TeX notation in equations, this parameter specifies notation used. Currently are supported two values -- plain and latex. Empty value means that you are not using TeX math at all. Preferred way for including TeX alternative of math is inside of textobject element. Eg.: &lt;inlineequation> &lt;inlinemediaobject> &lt;imageobject> &lt;imagedata fileref="eq1.gif"/> &lt;/imageobject> &lt;textobject>&lt;phrase>E=mc squared&lt;/phrase>&lt;/textobject> &lt;textobject role="tex">&lt;phrase>E=mc^2&lt;/phrase>&lt;/textobject> &lt;/inlinemediaobject> &lt;/inlineequation> If you are using graphic element, you can store TeX inside alt element: &lt;inlineequation> &lt;alt role="tex">a^2+b^2=c^2&lt;/alt> &lt;graphic fileref="a2b2c2.gif"/> &lt;/inlineequation> If you want use this feature, you should process your FO with PassiveTeX, which only supports TeX math notation. When calling stylsheet, don't forget to specify also passivetex.extensions=1. If you want equations in HTML, just process generated file tex-math-equations.tex by TeX or LaTeX. Then run dvi2bitmap program on result DVI file. You will get images for equations in your document. This feature is useful for print/PDF output only if you use the obsolete and now unsupported PassiveTeX XSL-FO engine. Related Parameters tex.math.delims, passivetex.extensions, tex.math.file</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>textdata.default.encoding</String>
											</field>
											<field name="description">
												<String>Specifies the encoding of any external text files included using textdata element. This value is used only when you do not specify encoding by the appropriate attribute directly on textdata. An empty string is interpreted as the system default encoding.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>textinsert.extension</String>
											</field>
											<field name="description">
												<String>Enables the textinsert extension element Description The textinsert extension element inserts the contents of a file into the result tree (as text). To use the textinsert extension element, you must use either Saxon or Xalan as your XSLT processor (it doesn't work with xsltproc), along with either the DocBook Saxon extensions or DocBook Xalan extensions (for more information about those extensions, see DocBook Saxon Extensions and DocBook Xalan Extensions), and you must set both the use.extensions and textinsert.extension parameters to 1. As an alternative to using the textinsert element, consider using an Xinclude element with the parse="text" attribute and value specified, as detailed in Using XInclude for text inclusions. See Also You can also use the dbhtml-include href processing instruction to insert external files — both files containing plain text and files with markup content (including HTML content). More information For how-to documentation on inserting contents of external code files and other text files into output, see External code files. For guidelines on inserting contents of HTML files into output, see Inserting external HTML code. Default value: 1</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.list.type</String>
											</field>
											<field name="description">
												<String>When an automatically generated Table of Contents (or List of Titles) is produced, this HTML element will be used to make the list.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>dl</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.max.depth</String>
											</field>
											<field name="description">
												<String>Specifies the maximal depth of TOC on all levels.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>8</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ulink.target</String>
											</field>
											<field name="description">
												<String>If ulink.target is non-zero, its value will be used for the target attribute on anchors generated for ulinks.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.embed.for.svg</String>
											</field>
											<field name="description">
												<String>If non-zero, an embed element will be created for SVG figures. An object is always created, this parameter merely controls whether or not an additional embed is generated inside the object. On the plus side, this may be more portable among browsers and plug-ins. On the minus side, it isn't valid HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.local.olink.style</String>
											</field>
											<field name="description">
												<String>When cross reference data is collected for use by olinks, the data for each potential target includes one field containing a completely assembled cross reference string, as if it were an xref generated in that document. Other fields record the separate title, number, and element name of each target. When an olink is formed to a target from another document, the olink resolves to that preassembled string by default. If the use.local.olink.style parameter is set to non-zero, then instead the cross reference string is formed again from the target title, number, and element name, using the stylesheet processing the targeting document. Then olinks will match the xref style in the targeting document rather than in the target document. If both documents are processed with the same stylesheet, then the results will be the same.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.role.as.xrefstyle</String>
											</field>
											<field name="description">
												<String>In DocBook documents that conform to a schema older than V4.3, this parameter allows role to serve the purpose of specifying the cross reference style. If non-zero, the role attribute on xref will be used to select the cross reference style. In DocBook V4.3, the xrefstyle attribute was added for this purpose. If the xrefstyle attribute is present, role will be ignored, regardless of the setting of this parameter. Example The following small stylesheet shows how to configure the stylesheets to make use of the cross reference style: &lt;?xml version="1.0"?> &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"> &lt;xsl:import href="../xsl/html/docbook.xsl"/> &lt;xsl:output method="html"/> &lt;xsl:param name="local.l10n.xml" select="document('')"/> &lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"> &lt;l:l10n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0" language="en"> &lt;l:context name="xref"> &lt;l:template name="chapter" style="title" text="Chapter %n, %t"/> &lt;l:template name="chapter" text="Chapter %n"/> &lt;/l:context> &lt;/l:l10n> &lt;/l:i18n> &lt;/xsl:stylesheet> With this stylesheet, the cross references in the following document: &lt;?xml version="1.0" encoding="utf-8"?> &lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"> &lt;book id="book">&lt;title>Book&lt;/title> &lt;preface> &lt;title>Preface&lt;/title> &lt;para>Normal: &lt;xref linkend="ch1"/>.&lt;/para> &lt;para>Title: &lt;xref xrefstyle="title" linkend="ch1"/>.&lt;/para> &lt;/preface> &lt;chapter id="ch1"> &lt;title>First Chapter&lt;/title> &lt;para>Irrelevant.&lt;/para> &lt;/chapter> &lt;/book> will appear as: Normal: Chapter 1. Title: Chapter 1, First Chapter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.role.for.mediaobject</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute on imageobjects or other objects within a mediaobject container will be used to select which object will be used. The order of selection when then parameter is non-zero is: If the stylesheet parameter preferred.mediaobject.role has a value, then the object whose role equals that value is selected. Else if an object's role attribute has a value of html for HTML processing or fo for FO output, then the first of such objects is selected. Else the first suitable object is selected. If the value of use.role.for.mediaobject is zero, then role attributes are not considered and the first suitable object with or without a role value is used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.svg</String>
											</field>
											<field name="description">
												<String>If non-zero, SVG will be considered an acceptable image format. SVG is passed through to the result tree, so correct rendering of the resulting diagram depends on the formatter (FO processor or web browser) that is used to process the output from the stylesheet.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.as.table</String>
											</field>
											<field name="description">
												<String>If non-zero, variablelists will be formatted as tables. A processing instruction exists to specify a particular width for the column containing the terms: dbhtml term-width=".25in" You can override this setting with a processing instruction as the child of variablelist: dbhtml list-presentation="table" or dbhtml list-presentation="list". This parameter only applies to the HTML transformations. In the FO case, proper list markup is robust enough to handle the formatting. But see also variablelist.as.blocks. &lt;variablelist> &lt;?dbhtml list-presentation="table"?> &lt;?dbhtml term-width="1.5in"?> &lt;?dbfo list-presentation="list"?> &lt;?dbfo term-width="1in"?> &lt;varlistentry> &lt;term>list&lt;/term> &lt;listitem> &lt;para> Formatted as a table even if variablelist.as.table is set to 0. &lt;/para> &lt;/listitem> &lt;/varlistentry> &lt;/variablelist></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.term.break.after</String>
											</field>
											<field name="description">
												<String>Set a non-zero value for the variablelist.term.break.after parameter to generate a line break between terms in a multi-term varlistentry. If you set a non-zero value for variablelist.term.break.after, you may also want to set the value of the variablelist.term.separator parameter to an empty string (to suppress rendering of the default comma and space after each term).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.term.separator</String>
											</field>
											<field name="description">
												<String>When a varlistentry contains multiple term elements, the string specified in the value of the variablelist.term.separator parameter is placed after each term except the last. To generate a line break between multiple terms in a varlistentry, set a non-zero value for the variablelist.term.break.after parameter. If you do so, you may also want to set the value of the variablelist.term.separator parameter to an empty string (to suppress rendering of the default comma and space after each term).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>, </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.copyright</String>
											</field>
											<field name="description">
												<String>The copyright note that will be added in the footer of the Table of Contents frame (the left side frame of the WebHelp output).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.custom.resources</String>
											</field>
											<field name="description">
												<String>The file path to a directory that contains resources files. All files from this directory will be copied to the root of the WebHelp output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.favicon</String>
											</field>
											<field name="description">
												<String>The file path of a small image used as favicon.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.footer.file</String>
											</field>
											<field name="description">
												<String>Path to an XML file that includes the footer content for your WebHelp output pages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.footer.include</String>
											</field>
											<field name="description">
												<String>Specifies whether or not to include footer in each WebHelp page. Possible values: yes, no. If set to no, no footer is added to the WebHelp pages. If set to yes and the webhelp.footer.file parameter has a value, then the content of that file is used as footer. If the webhelp.footer.file has no value then the default Oxygen footer is inserted in each WebHelp page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>yes</String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.logo.image</String>
											</field>
											<field name="description">
												<String>The file path of a small image with the company logo that will be added to the title in the header area.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.logo.image.target.url</String>
											</field>
											<field name="description">
												<String>Specifies a target URL that is set on the logo image. When you click the logo image, you will be redirected to this address.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.search.ranking</String>
											</field>
											<field name="description">
												<String>If this parameter is set to false then the 5-star rating mechanism is no longer included in the search results that are displayed on the Search tab (default setting is true).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>true</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>true</String>
													<String>false</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.skin.css</String>
											</field>
											<field name="description">
												<String>Path to a CSS file that sets the style theme in the output WebHelp pages. It can be one of the predefined skin CSS from the OXYGEN_INSTALL_DIR\frameworks\docbook\xsl\com.oxygenxml.webhelp.classic\predefined-skins directory, or it can be a custom skin CSS generated with the Oxygen Skin Builder web application.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>writing.mode</String>
											</field>
											<field name="description">
												<String>Sets direction of text flow and text alignment based on locale. The value is normally taken from the gentext file for the lang attribute of the document's root element, using the key name 'writing-mode' to look it up in the gentext file. But the param can also be set on the command line to override that gentext value. Accepted values are: lr-tb Left-to-right text flow in each line, lines stack top to bottom. rl-tb Right-to-left text flow in each line, lines stack top to bottom. tb-rl Top-to-bottom text flow in each vertical line, lines stack right to left. Supported by only a few XSL-FO processors. Not supported in HTML output. lr Shorthand for lr-tb. rl Shorthand for rl-tb. tb Shorthand for tb-rl.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> writing-mode </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.label-page.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both label and page but no title, then the value of this parameter is inserted between label and page number in the output. If a title is included, then other separators are used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.label-title.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both label and title, then the value of this parameter is inserted between label and title in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>: </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.title-page.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both title and page number, then the value of this parameter is inserted between title and page number in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.with.number.and.title</String>
											</field>
											<field name="description">
												<String>A cross reference may include the number (for example, the number of an example or figure) and the title which is a required child of some targets. This parameter inserts both the relevant number as well as the title into the link.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
									</list>
								</field>
								<field name="jvmArgs">
									<String>-Xmx256m</String>
								</field>
								<field name="useCustomJavaHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customJavaHomeDir">
									<String></String>
								</field>
								<field name="useCustomANTHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customANTHomeDir">
									<String></String>
								</field>
								<field name="workingDir">
									<String>${cfd}</String>
								</field>
								<field name="showConsoleAlways">
									<Boolean>false</Boolean>
								</field>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook WebHelp Classic</String>
								</field>
								<field name="baseURL">
									<null/>
								</field>
								<field name="footerURL">
									<null/>
								</field>
								<field name="fOPMethod">
									<null/>
								</field>
								<field name="fOProcessorName">
									<null/>
								</field>
								<field name="headerURL">
									<null/>
								</field>
								<field name="inputXSLURL">
									<null/>
								</field>
								<field name="inputXMLURL">
									<null/>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>ANT</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfd}/out/webhelp/index.html</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>false</Boolean>
								</field>
								<field name="xsltParams">
									<list/>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>ANT</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${oxygenHome}/classes/</String>
										<String>${oxygenHome}/lib/oxygen*.jar</String>
										<String>${oxygenHome}/lib/resolver.jar</String>
										<String>${oxygenHome}/lib/jing.jar</String>
										<String>${oxygenHome}/lib/xercesImpl.jar</String>
										<String>${oxygenHome}/lib/saxon.jar</String>
										<String>${oxygenHome}/lib/saxon9ee.jar</String>
										<String>${oxygenHome}/lib/xml-apis.jar</String>
										<String>${oxygenHome}/lib/xml-apis-ext.jar</String>
										<String>${oxygenHome}/lib/log4j.jar</String>
										<String>${oxygenHome}/lib/lucene-*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/com.oxygenxml.webhelp.classic/lib/xhtml-indexer.jar</String>
									</String-array>
								</field>
							</antScenario>
							<antScenario>
								<field name="additionalAntArgs">
									<String></String>
								</field>
								<field name="buildTarget">
									<String>webhelp-mobile</String>
								</field>
								<field name="buildFilePath">
									<String>${frameworkDir}/xsl/com.oxygenxml.webhelp.classic/build_docbook.xml</String>
								</field>
								<field name="ditaParams">
									<list>
										<antParameter>
											<field name="name">
												<String>admon.graphics</String>
											</field>
											<field name="description">
												<String>If value is 1 use Docbook admon graphics. If value is 0 do not use Docbook admon graphics.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension for admonition graphics. The following formats of
												    admonition graphics are supported: GIF (.gif extension), PNG (.png extension), SVG
												    (the .svg extension, TIFF (.tif extension).</String>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook admon image files.</String>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>appendix.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then appendices will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (upperalpha).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>A</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>base.dir</String>
											</field>
											<field name="description">
												<String>Base directory for output HTML files.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/webhelp-mobile</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.path</String>
											</field>
											<field name="description">
												<String>Sets the path to the directory holding the callout graphics. This location is normally relative to the output html directory. see base.dir. Always terminate the directory with / since the graphic file is appended to this string, hence needs the separator.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chapter.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then chapters will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (arabic).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.first.sections</String>
											</field>
											<field name="description">
												<String>If non-zero, a chunk will be created for the first top-level sect1 or section elements in each component. Otherwise, that section will be part of the chunk for its parent.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.section.depth</String>
											</field>
											<field name="description">
												<String>This parameter sets the depth of section chunking.</String>
											</field>
											<field name="value">
												<String>3</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.encoding</String>
											</field>
											<field name="description">
												<String>The encoding of the output XHTML files.</String>
											</field>
											<field name="value">
												<String>UTF-8</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.indent</String>
											</field>
											<field name="description">
												<String>The value of the indent specification for generated pages. Not all processors support specification of this parameter.</String>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>clean.output</String>
											</field>
											<field name="description">
												<String>If set to 'true' the output directory is removed before starting the transformation.</String>
											</field>
											<field name="value">
												<String>false</String>
											</field>
											<field name="defaultValue">
												<String>false</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>false</String>
													<String>true</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>component.label.includes.part.label</String>
											</field>
											<field name="description">
												<String>If non-zero, number labels for chapter, appendix, and other component elements are prefixed with the label of the part element that contains them. So you might see Chapter II.3 instead of Chapter 3. Also, the labels for formal elements such as table and figure will include the part label. If there is no part element container, then no prefix is generated. This feature is most useful when the label.from.part parameter is turned on. In that case, there would be more than one chapter 1, and the extra part label prefix will identify each chapter unambiguously.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>draft.mode</String>
											</field>
											<field name="description">
												<String>If Docbook draft mode is used. Possible values: yes, no.</String>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>draft.watermark.image</String>
											</field>
											<field name="description">
												<String>The image to be used for draft watermarks.</String>
											</field>
											<field name="value">
												<String>oxygen-webhelp/resources/img/draft.png</String>
											</field>
											<field name="defaultValue">
												<String>oxygen-webhelp/resources/img/draft.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.index</String>
											</field>
											<field name="description">
												<String>Specify if an index should be generated.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.section.toc.level</String>
											</field>
											<field name="description">
												<String>The generate.section.toc.level parameter controls the depth of section in which TOCs will be generated. Note that this is related to, but not the same as toc.section.depth, which controls the depth to which TOC entries will be generated in a given TOC. If, for example, generate.section.toc.level is 3, TOCs will be generated in first, second, and third level sections, but not in fourth level sections.</String>
											</field>
											<field name="value">
												<String>2</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.source</String>
											</field>
											<field name="description">
												<String>If value if 1 the source code from programlisting elements is highlighted accoeding to source language syntax.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.xslthl.config</String>
											</field>
											<field name="description">
												<String>Path of configuration file for syntax highlight of source code from programlisting elements.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.ext</String>
											</field>
											<field name="description">
												<String>Extension of output HTML files.</String>
											</field>
											<field name="value">
												<String>.html</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>inherit.keywords</String>
											</field>
											<field name="description">
												<String>If inherit.keywords is non-zero, the keyword meta for each HTML head element will include all of the keywords from ancestor elements. Otherwise, only the keywords from the current section will be used.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>input.dir</String>
											</field>
											<field name="description">
												<String>Path of directory containing the input files.</String>
											</field>
											<field name="value">
												<String>${cfd}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.gentext.default.language</String>
											</field>
											<field name="description">
												<String>The value of the l10n.gentext.default.language parameter is used as the language for generated text if no setting is provided in the source document.</String>
											</field>
											<field name="value">
												<String>en</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manifest.in.base.dir</String>
											</field>
											<field name="description">
												<String>If non-zero, the manifest file as well as project files for HTML Help and Eclipse Help are written into base.dir instead of the current directory.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.showtitles</String>
											</field>
											<field name="description">
												<String>If non-zero, the headers and footers of chunked HTML display the titles of the next and previous chunks, along with the words 'Next' and 'Previous' (or the equivalent graphical icons if navig.graphics is true). If false (zero), then only the words 'Next' and 'Previous' (or the icons) are displayed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>output.dir</String>
											</field>
											<field name="description">
												<String>Path where the output files will be created.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/webhelp-mobile</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>para.propagates.style</String>
											</field>
											<field name="description">
												<String>If true, the role attribute of para elements will be passed through to the HTML as a class attribute on the p generated for the paragraph.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>part.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then parts will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (upperroman).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>I</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>phrase.propagates.style</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute of phrase elements will be passed through to the HTML as a class attribute on a span that surrounds the phrase.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qandadiv.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, unlabeled qandadivs will be enumerated.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>reference.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, references will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any non-zero value other than the above will generate the default number format (upperroman).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>I</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>root.filename</String>
											</field>
											<field name="description">
												<String>The name of the root HTML file when chunking. The extension is added to the value of this parameter.</String>
											</field>
											<field name="value">
												<String>oxygen-main</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.autolabel</String>
											</field>
											<field name="description">
												<String>If true (non-zero), unlabeled sections will be enumerated.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.label.includes.component.label</String>
											</field>
											<field name="description">
												<String>If non-zero, section labels are prefixed with the label of the component that contains them.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.footer.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, footer navigation will be suppressed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, header and footer navigation will be suppressed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.section.depth</String>
											</field>
											<field name="description">
												<String>Specifies the depth to which recursive sections should appear in the TOC.</String>
											</field>
											<field name="value">
												<String>3</String>
											</field>
											<field name="defaultValue">
												<String>2</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.extensions</String>
											</field>
											<field name="description">
												<String>If non-zero, extensions may be used. Each extension is further controlled by its own parameter. But if use.extensions is zero, no extensions will be used.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.id.as.filename</String>
											</field>
											<field name="description">
												<String>If use.id.as.filename is non-zero, the filename of chunk elements that have IDs will be derived from the ID value.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.stemming</String>
											</field>
											<field name="description">
												<String>Controls whether or not you want to include stemming search algorithms into the published output (default setting is false).</String>
											</field>
											<field name="value">
												<String>false</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xml.file</String>
											</field>
											<field name="description">
												<String>Path to Docbook XML file.</String>
											</field>
											<field name="value">
												<String>${cf}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.style</String>
											</field>
											<field name="description">
												<String>Specifies the value of the CSS style attribute that should be added to admonitions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.textlabel</String>
											</field>
											<field name="description">
												<String>If true (non-zero), admonitions are presented with a generated text label such as Note or Warning in the appropriate language. If zero, such labels are turned off, but any title child of the admonition element are still output. The default value is 1.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotate.toc</String>
											</field>
											<field name="description">
												<String>If true, TOCs will be annotated. At present, this just means that the refpurpose of refentry TOC entries will be displayed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.css</String>
											</field>
											<field name="description">
												<String>If annotation.support is enabled and the document contains annotations, then the CSS in this parameter will be included in the document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> /* ====================================================================== Annotations */ div.annotation-list { visibility: hidden; } div.annotation-nocss { position: absolute; visibility: hidden; } div.annotation-popup
													{ position: absolute; z-index: 4; visibility: hidden; padding: 0px; margin: 2px; border-style: solid; border-width: 1px; width: 200px; background-color: white; } div.annotation-title { padding: 1px; font-weight: bold;
													border-bottom-style: solid; border-bottom-width: 1px; color: white; background-color: black; } div.annotation-body { padding: 2px; } div.annotation-body p { margin-top: 0px; padding-top: 0px; } div.annotation-close {
													position: absolute; top: 2px; right: 2px; } </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.graphic.close</String>
											</field>
											<field name="description">
												<String>annotation.graphic.close uri 
												annotation.graphic.close Image for identifying a link that closes an annotation popup Description This image is used on popup annotations as the “x�? that the user can click to dismiss the popup. This image is used on popup annotations as the “x�? that the user can click to dismiss the popup. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels. Default value: http://docbook.sourceforge.net/release/images/annot-close.png</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> http://docbook.sourceforge.net/release/images/annot-close.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.graphic.open</String>
											</field>
											<field name="description">
												<String>This image is used inline to identify the location of annotations. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>http://docbook.sourceforge.net/release/images/annot-open.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.js</String>
											</field>
											<field name="description">
												<String>If annotation.support is enabled and the document contains annotations, then the URIs listed in this parameter will be included. These JavaScript files are required for popup annotation support.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> http://docbook.sourceforge.net/release/script/AnchorPosition.js http://docbook.sourceforge.net/release/script/PopupWindow.js</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.support</String>
											</field>
											<field name="description">
												<String>If non-zero, the stylesheets will attempt to support annotation elements in HTML by including some JavaScript (see annotation.js).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>author.othername.in.middle</String>
											</field>
											<field name="description">
												<String>If non-zero, the othername of an author appears between the firstname and surname. Otherwise, othername is suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>autotoc.label.in.hyperlink</String>
											</field>
											<field name="description">
												<String>If the value of autotoc.label.in.hyperlink is non-zero, labels are included in hyperlinked titles in the TOC. If it is instead zero, labels are still displayed prior to the hyperlinked titles, but are not hyperlinked along with the titles.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>autotoc.label.separator</String>
											</field>
											<field name="description">
												<String>String used to separate labels and titles in a table of contents.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>. </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>biblioentry.item.separator</String>
											</field>
											<field name="description">
												<String>Text to separate bibliography entries</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>. </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.collection</String>
											</field>
											<field name="description">
												<String>Maintaining bibliography entries across a set of documents is tedious, time consuming, and error prone. It makes much more sense, usually, to store all of the bibliography entries in a single place and simply extract the ones you need in each document. That's the purpose of the bibliography.collection parameter. To setup a global bibliography database, follow these steps: First, create a stand-alone bibliography document that contains all of the documents that you wish to reference. Make sure that each bibliography entry (whether you use biblioentry or bibliomixed) has an ID. My global bibliography, ~/bibliography.xml begins like this: &lt;!DOCTYPE bibliography PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"> &lt;bibliography>&lt;title>References&lt;/title> &lt;bibliomixed id="xml-rec">&lt;abbrev>XML 1.0&lt;/abbrev>Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors. &lt;citetitle>&lt;ulink url="http://www.w3.org/TR/REC-xml">Extensible Markup Language (XML) 1.0 Second Edition&lt;/ulink>&lt;/citetitle>. World Wide Web Consortium, 2000. &lt;/bibliomixed> &lt;bibliomixed id="xml-names">&lt;abbrev>Namespaces&lt;/abbrev>Tim Bray, Dave Hollander, and Andrew Layman, editors. &lt;citetitle>&lt;ulink url="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML&lt;/ulink>&lt;/citetitle>. World Wide Web Consortium, 1999. &lt;/bibliomixed> &lt;!-- ... --> &lt;/bibliography> When you create a bibliography in your document, simply provide empty bibliomixed entries for each document that you wish to cite. Make sure that these elements have the same ID as the corresponding real entry in your global bibliography. For example: &lt;bibliography>&lt;title>Bibliography&lt;/title> &lt;bibliomixed id="xml-rec"/> &lt;bibliomixed id="xml-names"/> &lt;bibliomixed id="DKnuth86">Donald E. Knuth. &lt;citetitle>Computers and Typesetting: Volume B, TeX: The Program&lt;/citetitle>. Addison-Wesley, 1986. ISBN 0-201-13437-3. &lt;/bibliomixed> &lt;bibliomixed id="relaxng"/> &lt;/bibliography> Note that it's perfectly acceptable to mix entries from your global bibliography with normal entries. You can use xref or other elements to cross-reference your bibliography entries in exactly the same way you do now. Finally, when you are ready to format your document, simply set the bibliography.collection parameter (in either a customization layer or directly through your processor's interface) to point to your global bibliography. A relative path in the parameter is interpreted in one of two ways: If your document contains no links to empty bibliographic elements, then the path is relative to the file containing the first bibliomixed element in the document. If your document does contain links to empty bibliographic elements, then the path is relative to the file containing the first such link element in the document. Once the collection file is opened by the first instance described above, it stays open for the current document and the relative path is not reinterpreted again. The stylesheets will format the bibliography in your document as if all of the entries referenced appeared there literally.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>http://docbook.sourceforge.net/release/bibliography/bibliography.xml</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.numbered</String>
											</field>
											<field name="description">
												<String>If non-zero bibliography entries will be numbered</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.style</String>
											</field>
											<field name="description">
												<String>Currently only normal and iso690 styles are supported. In order to use ISO690 style to the full extent you might need to use additional markup described on the following WiKi page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>normal</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>blurb.on.titlepage.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, output from authorblurb and personblurb elements is displayed on title pages. If zero (the default), output from those elements is suppressed on title pages (unless you are using a titlepage customization that causes them to be included).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bridgehead.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, bridgeheads appear in the TOC. Note that this option is not fully supported and may be removed in a future version of the stylesheets.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.defaultcolumn</String>
											</field>
											<field name="description">
												<String>If a callout does not identify a column (for example, if it uses the linerange unit), it will appear in the default column.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>60</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics</String>
											</field>
											<field name="description">
												<String>If non-zero, callouts are presented with graphics (e.g., reverse-video circled numbers instead of "(1)", "(2)", etc.). Default graphics are provided in the distribution.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension to use on callout graphics. The Docbook XSL distribution provides callout graphics in the following formats: SVG (extension: .svg) PNG (extension: .png) GIF (extension: .gif)</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.png</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.number.limit</String>
											</field>
											<field name="description">
												<String>If callout.graphics is non-zero, graphics are used to represent callout numbers instead of plain text. The value of callout.graphics.number.limit is the largest number for which a graphic exists. If the callout number exceeds this limit, the default presentation "(plain text instead of a graphic)" will be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>15</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.list.table</String>
											</field>
											<field name="description">
												<String>The default presentation of calloutlists uses an HTML DL element. Some browsers don't align DLs very well if callout.graphics is used. With this option turned on, calloutlists are presented in an HTML TABLE, which usually results in better alignment of the callout number with the callout description.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode</String>
											</field>
											<field name="description">
												<String>The stylesheets can use either an image of the numbers one to ten, or the single Unicode character which represents the numeral, in white on a black background. Use this to select the Unicode character option.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode.number.limit</String>
											</field>
											<field name="description">
												<String>If callout.unicode is non-zero, unicode characters are used to represent callout numbers. The value of callout.unicode.number.limit is the largest number for which a unicode character exists. If the callout number exceeds this limit, the default presentation "(nnn)" will always be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode.start.character</String>
											</field>
											<field name="description">
												<String>If callout.graphics is zero and callout.unicode is non-zero, unicode characters are used to represent callout numbers. The value of callout.unicode.start.character is the decimal unicode value used for callout number one. Currently, only values 9312 and 10102 are supported in the stylesheets for this parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10102</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callouts.extension</String>
											</field>
											<field name="description">
												<String>The callouts extension processes areaset elements in programlistingco and other text-based callout elements.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.append</String>
											</field>
											<field name="description">
												<String>Specifies content to append to the end of HTML files output by the html/chunk.xsl stylesheet, after the closing &lt;html> tag. You probably don't want to set any value for this parameter; but if you do, the only value it should ever be set to is a newline character: &amp;#x0a; or &amp;#10;</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.quietly</String>
											</field>
											<field name="description">
												<String>If zero (the default), the XSL processor emits a message naming each separate chunk filename as it is being output. If nonzero, then the messages are suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.separate.lots</String>
											</field>
											<field name="description">
												<String>If non-zero, each of the ToC and LoTs (List of Examples, List of Figures, etc.) will be put in its own separate chunk. The title page includes generated links to each of the separate files. This feature depends on the chunk.tocs.and.lots parameter also being non-zero.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.toc</String>
											</field>
											<field name="description">
												<String>The chunk.toc identifies an explicit TOC that will be used for chunking. This parameter is only used by the chunktoc.xsl stylesheet (and customization layers built from it).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.tocs.and.lots</String>
											</field>
											<field name="description">
												<String>If non-zero, ToC and LoT (List of Examples, List of Figures, etc.) will be put in a separate chunk. At the moment, this chunk is not in the normal forward/backward navigation list. Instead, a new link is added to the navigation footer. This feature is still somewhat experimental. Feedback welcome.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.tocs.and.lots.has.title</String>
											</field>
											<field name="description">
												<String>If non-zero title of document is shown before ToC/LoT in separate chunk.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunked.filename.prefix</String>
											</field>
											<field name="description">
												<String>If specified, the chunked.filename.prefix parameter specifies a prefix string to add to each generated chunk filename. For example: &lt;xsl:param name="chunked.filename.prefix">admin-&lt;xsl:param> will produce chunked filenames like: admin-index.html admin-ch01.html admin-ch01s01.html ... Trying to use the base.dir parameter to add a string prefix (by omitting the trailing slash) no longer works (it never worked completely anyway). That parameter value should contain only a directory path, and now gets a trailing slash appended if it was omitted from the param.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>citerefentry.link</String>
											</field>
											<field name="description">
												<String>If non-zero, a web link will be generated, presumably to an online man->HTML gateway. The text of the link is generated by the generate.citerefentry.link template.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>collect.xref.targets</String>
											</field>
											<field name="description">
												<String>In order to resolve olinks efficiently, the stylesheets can generate an external data file containing information about all potential cross reference endpoints in a document. This parameter determines whether the collection process is run when the document is processed by the stylesheet. The default value is no, which means the data file is not generated during processing. The other choices are yes, which means the data file is created and the document is processed for output, and only, which means the data file is created but the document is not processed for output. See also targets.filename.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>contrib.inline.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero (the default), output of the contrib element is displayed as inline content rather than as block content.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>css.decoration</String>
											</field>
											<field name="description">
												<String>If non-zero, then html elements produced by the stylesheet may be decorated with style attributes. For example, the li tags produced for list items may include a fragment of CSS in the style attribute which sets the CSS property "list-style-type".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>current.docid</String>
											</field>
											<field name="description">
												<String>When olinks between documents are resolved for HTML output, the stylesheet can compute the relative path between the current document and the target document. The stylesheet needs to know the targetdoc identifiers for both documents, as they appear in the target.database.document database file. This parameter passes to the stylesheet the targetdoc identifier of the current document, since that identifier does not appear in the document itself. This parameter can also be used for print output. If an olink's targetdoc id differs from the current.docid, then the stylesheet can append the target document's title to the generated olink text. That identifies to the reader that the link is to a different document, not the current document. See also olink.doctitle to enable that feature.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>custom.css.source</String>
											</field>
											<field name="description">
												<String>The custom.css.source parameter enables you to add CSS styles to DocBook's HTML output. The parameter specifies the name of a file containing custom CSS styles. The file must be a well-formed XML file that consists of a single style root element that contains CSS styles as its text content. For example: &lt;?xml version="1.0"?> &lt;style> h2 { font-weight: bold; color: blue; } ... &lt;/style> The filename specified by the parameter should have a .xml filename suffix, although that is not required. The default value of this parameter is blank. If custom.css.source is not blank, then the stylesheet takes the following actions. These actions take place regardless of the value of the make.clean.html parameter. The stylesheet uses the XSLT document() function to open the file specified by the parameter and load it into a variable. The stylesheet forms an output pathname consisting of the value of the base.dir parameter (if it is set) and the value of custom.css.source, with the .xml suffix stripped off. The stylesheet removes the style wrapper element and writes just the CSS text content to the output file. The stylesheet adds a link element to the HTML HEAD element to reference this external CSS stylesheet. For example: &lt;link rel="stylesheet" href="custom.css" type="text/css"> If the make.clean.html parameter is nonzero (the default is zero), and if the docbook.css.source parameter is not blank (the default is not blank), then the stylesheet will also generate a default CSS file and add a link tag to reference it. The link to the custom CSS comes after the link to the default, so it should cascade properly in most browsers. If you do not want two link tags, and instead want your custom CSS to import the default generated CSS file, then do the following: Add a line like the following to your custom CSS source file: @import url("docbook.css") Set the docbook.css.link parameter to zero. This will omit the link tag that references the default CSS file. If you set make.clean.html to nonzero but you do not want the default CSS generated, then also set the docbook.css.source parameter to blank. Then no default CSS will be generated, and so all CSS styles must come from your custom CSS file. You can use the generate.css.header parameter to instead write the CSS to each HTML HEAD element in a style tag instead of an external CSS file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.float.class</String>
											</field>
											<field name="description">
												<String>Selects the direction in which a float should be placed. for xsl-fo this is before, for html it is left. For Western texts, the before direction is the top of the page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> left before </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.image.width</String>
											</field>
											<field name="description">
												<String>If specified, this value will be used for the width attribute on images that do not specify any viewport dimensions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.table.frame</String>
											</field>
											<field name="description">
												<String>This value will be used when there is no frame attribute on the table.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>all</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.table.width</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used for the width attribute on tables that do not specify an alternate width (with the dbhtml table-width or dbfo table-width processing instruction).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>docbook.css.link</String>
											</field>
											<field name="description">
												<String>The stylesheets are capable of generating a default CSS stylesheet file. The parameters make.clean.html and docbook.css.source control that feature. Normally if a default CSS file is generated, then the stylesheet inserts a link tag in the HTML HEAD element to reference it. However, you can omit that link reference if you set the docbook.css.link to zero (1 is the default). This parameter is useful when you want to import the default CSS into a custom CSS file generated using the custom.css.source parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>docbook.css.source</String>
											</field>
											<field name="description">
												<String>The docbook.css.source parameter specifies the name of the file containing the default DocBook CSS styles. Those styles are necessary when the make.clean.html parameter is nonzero. The file is a well-formed XML file that must consist of a single style root element that contains CSS styles as its text content. The default value of the parameter (and filename) is docbook.css.xml. The stylesheets ship with the default file. You can substitute your own and specify its path in this parameter. If docbook.css.source is not blank, and make.clean.html is nonzero, then the stylesheet takes the following actions: The stylesheet uses the XSLT document() function to open the file specified by the parameter and load it into a variable. The stylesheet forms an output pathname consisting of the value of the base.dir parameter (if it is set) and the value of docbook.css.source, with the .xml suffix stripped off. The stylesheet removes the style wrapper element and writes just the CSS text content to the output file. The stylesheet adds a link element to the HTML HEAD element to reference the external CSS stylesheet. For example: &lt;link rel="stylesheet" href="docbook.css" type="text/css"> However, if the docbook.css.link parameter is set to zero, then no link is written for the default CSS file. That is useful if a custom CSS file will import the default CSS stylesheet to ensure proper cascading of styles. If the docbook.css.source parameter is changed from its default docbook.css.xml to blank, then no default CSS is generated. Likewise if the make.clean.html parameter is set to zero, then no default CSS is generated. The custom.css.source parameter can be used instead to generate a complete custom CSS file. You can use the generate.css.header parameter to instead write the CSS to each HTML HEAD element in a style tag instead of an external CSS file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>docbook.css.xml</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.assignment</String>
											</field>
											<field name="description">
												<String>The ebnf.assignment parameter determines what text is used to show assignment in productions in productionsets. While ::= is common, so are several other operators.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> ::= </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.statement.terminator</String>
											</field>
											<field name="description">
												<String>The ebnf.statement.terminator parameter determines what text is used to terminate each production in productionset. Some notations end each statement with a period.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.table.bgcolor</String>
											</field>
											<field name="description">
												<String>Sets the background color for EBNF tables (a pale brown). No bgcolor attribute is output if ebnf.table.bgcolor is set to the null string.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>#F5DCB3</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.table.border</String>
											</field>
											<field name="description">
												<String>Selects the border on EBNF tables. If non-zero, the tables have borders, otherwise they don't.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>editedby.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, a localized Edited by heading is displayed above editor names in output of the editor element.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>email.delimiters.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, delimiters For delimiters, the stylesheets are currently hard-coded to output angle brackets. are generated around e-mail addresses (the output of the email element).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>emphasis.propagates.style</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute of emphasis elements will be passed through to the HTML as a class attribute on a span that surrounds the emphasis.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>entry.propagates.style</String>
											</field>
											<field name="description">
												<String>If true, the role attribute of entry elements will be passed through to the HTML as a class attribute on the td or th generated for the table cell.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>exsl.node.set.available</String>
											</field>
											<field name="description">
												<String>If non-zero, then the exsl:node-set() function is available to be used in the stylesheet. If zero, then the function is not available. This param automatically detects the presence of the function and does not normally need to be set manually. This param was created to handle a long-standing bug in the Xalan processor that fails to detect the function even though it is available.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> 1 0 </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>firstterm.only.link</String>
											</field>
											<field name="description">
												<String>If non-zero, only firstterms will be automatically linked to the glossary. If glossary linking is not enabled, this parameter has no effect.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footer.rule</String>
											</field>
											<field name="description">
												<String>If non-zero, a rule will be drawn above the page footers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footnote.number.format</String>
											</field>
											<field name="description">
												<String>The footnote.number.format specifies the format to use for footnote numeration (1, i, I, a, or A).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footnote.number.symbols</String>
											</field>
											<field name="description">
												<String>If footnote.number.symbols is not the empty string, footnotes will use the characters it contains as footnote symbols. For example, *&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720; will identify footnotes with *, †, ‡,◊, and ✠. If there are more footnotes than symbols, the stylesheets will fall back to numbered footnotes using footnote.number.format. The use of symbols for footnotes depends on the ability of your processor (or browser) to render the symbols you select. Not all systems are capable of displaying the full range of Unicode characters. If the quoted characters in the preceding paragraph are not displayed properly, that's a good indicator that you may have trouble using those symbols for footnotes.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>formal.procedures</String>
											</field>
											<field name="description">
												<String>Formal procedures are numbered and always have a title.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>formal.title.placement</String>
											</field>
											<field name="description">
												<String>Specifies where formal object titles should occur. For each formal object type (figure, example, equation, table, and procedure) you can specify either the keyword before or after.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> figure before example before equation before table before procedure before task before </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>funcsynopsis.decoration</String>
											</field>
											<field name="description">
												<String>If non-zero, elements of the funcsynopsis will be decorated (e.g. rendered as bold or italic text). The decoration is controlled by templates that can be redefined in a customization layer.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>funcsynopsis.style</String>
											</field>
											<field name="description">
												<String>If funcsynopsis.style is ansi, ANSI-style function synopses are generated for a funcsynopsis, otherwise K&amp;R-style function synopses are generated.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>kr</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>function.parens</String>
											</field>
											<field name="description">
												<String>If non-zero, the formatting of a function element will include generated parentheses.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.consistent.ids</String>
											</field>
											<field name="description">
												<String>When the stylesheet assigns an id value to an output element, the generate-id() function may be used. That function may not produce consistent values between runs. Version control systems may misidentify the changing id values as changes to the document. If you set this parameter's value to 1, then the template named object.id will replace the use of the function generate-id() with &lt;xsl:number level="multiple" count="*"/>. This counts preceding elements to generate a unique number for the id value. This param does not associate permanent unique id values with particular elements. The id values are consistent only as long as the document structure does not change. If the document structure changes, then the counting of elements changes, and all id values after the first such change may be different, even when there is no change to the element itself or its output. The default value of this parameter is zero, so generate-id() is used by default.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.css.header</String>
											</field>
											<field name="description">
												<String>The stylesheets are capable of generating both default and custom CSS stylesheet files. The parameters make.clean.html, docbook.css.source, and custom.css.source control that feature. If you require that CSS styles reside in the HTML HEAD element instead of external CSS files, then set the generate.css.header parameter to nonzero (it is zero by default). Then instead of generating the CSS in external files, they are wrapped in style elements in the HEAD element of each HTML output file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.id.attributes</String>
											</field>
											<field name="description">
												<String>If non-zero, the HTML stylesheet will generate ID attributes on containers. For example, the markup: &lt;section id="foo">&lt;title>Some Title&lt;/title> &lt;para>Some para.&lt;/para> &lt;/section> might produce: &lt;div class="section" id="foo"> &lt;h2>Some Title&lt;/h2> &lt;p>Some para.&lt;/p> &lt;/div> The alternative is to generate anchors: &lt;div class="section"> &lt;h2>&lt;a name="foo">&lt;/a>Some Title&lt;/h2> &lt;p>Some para.&lt;/p> &lt;/div> Because the name attribute of the a element and the id attribute of other tags are both of type ID, producing both generates invalid documents. As of version 1.50, you can use this switch to control which type of identifier is generated. For backwards-compatibility, generating a anchors is preferred. Note: at present, this switch is incompletely implemented. Disabling ID attributes will suppress them, but enabling ID attributes will not suppress the anchors.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.legalnotice.link</String>
											</field>
											<field name="description">
												<String>If the value of generate.legalnotice.link is non-zero, the stylesheet: writes the contents of legalnotice to a separate HTML file inserts a hyperlink to the legalnotice file adds (in the HTML head) either a single link or element or multiple link elements (depending on the value of the html.head.legalnotice.link.multiple parameter), with the value or values derived from the html.head.legalnotice.link.types parameter Otherwise, if generate.legalnotice.link is zero, legalnotice contents are rendered on the title page. The name of the separate HTML file is computed as follows: If a filename is given by the dbhtml filename processing instruction, that filename is used. If the legalnotice has an id/xml:id attribute, and if use.id.as.filename != 0, the filename is the concatenation of the id value and the value of the html.ext parameter. If the legalnotice does not have an id/xml:id attribute, or if use.id.as.filename = 0, the filename is the concatenation of "ln-", auto-generated id value, and html.ext value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.manifest</String>
											</field>
											<field name="description">
												<String>If non-zero, a list of HTML files generated by the stylesheet transformation is written to the file named by the manifest parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.meta.abstract</String>
											</field>
											<field name="description">
												<String>If non-zero, document abstracts will be reproduced in the HTML head, with >meta name="description" content="..."</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.revhistory.link</String>
											</field>
											<field name="description">
												<String>If non-zero, the contents of revhistory are written to a separate HTML file and a link to the file is generated. Otherwise, revhistory contents are rendered on the title page. The name of the separate HTML file is computed as follows: If a filename is given by the dbhtml filename processing instruction, that filename is used. If the revhistory has an id/xml:id attribute, and if use.id.as.filename != 0, the filename is the concatenation of the id value and the value of the html.ext parameter. If the revhistory does not have an id/xml:id attribute, or if use.id.as.filename = 0, the filename is the concatenation of "rh-", auto-generated id value, and html.ext value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.toc</String>
											</field>
											<field name="description">
												<String>This parameter has a structured value. It is a table of space-delimited path/value pairs. Each path identifies some element in the source document using a restricted subset of XPath (only the implicit child axis, no wildcards, no predicates). Paths can be either relative or absolute. When processing a particular element, the stylesheets consult this table to determine if a ToC (or LoT(s)) should be generated. For example, consider the entry: book toc,figure This indicates that whenever a book is formatted, a Table Of Contents and a List of Figures should be generated. Similarly, /chapter toc indicates that whenever a document that has a root of chapter is formatted, a Table of Contents should be generated. The entry chapter would match all chapters, but /chapter matches only chapter document elements. Generally, the longest match wins. So, for example, if you want to distinguish articles in books from articles in parts, you could use these two entries: book/article toc,figure part/article toc Note that an article in a part can never match a book/article, so if you want nothing to be generated for articles in parts, you can simply leave that rule out. If you want to leave the rule in, to make it explicit that you're turning something off, use the value nop. For example, the following entry disables ToCs and LoTs for articles: article nop Do not simply leave the word article in the file without a matching value. That'd be just begging the silly little path/value parser to get confused. Section ToCs are further controlled by the generate.section.toc.level parameter. For a given section level to have a ToC, it must have both an entry in generate.toc and be within the range enabled by generate.section.toc.level.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> appendix toc,title article/appendix nop article toc,title book toc,title,figure,table,example,equation chapter toc,title part toc,title preface toc,title qandadiv toc qandaset toc reference toc,title sect1 toc sect2 toc
													sect3 toc sect4 toc sect5 toc section toc set toc,title </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossary.collection</String>
											</field>
											<field name="description">
												<String>Glossaries maintained independently across a set of documents are likely to become inconsistent unless considerable effort is expended to keep them in sync. It makes much more sense, usually, to store all of the glossary entries in a single place and simply extract the ones you need in each document. That's the purpose of the glossary.collection parameter. To setup a global glossary database, follow these steps: Setting Up the Glossary Database First, create a stand-alone glossary document that contains all of the entries that you wish to reference. Make sure that each glossary entry has an ID. Here's an example glossary: &lt;?xml version="1.0" encoding="utf-8"?> &lt;!DOCTYPE glossary PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"> &lt;glossary> &lt;glossaryinfo> &lt;editor>&lt;firstname>Eric&lt;/firstname>&lt;surname>Raymond&lt;/surname>&lt;/editor> &lt;title>Jargon File 4.2.3 (abridged)&lt;/title> &lt;releaseinfo>Just some test data&lt;/releaseinfo> &lt;/glossaryinfo> &lt;glossdiv>&lt;title>0&lt;/title> &lt;glossentry> &lt;glossterm>0&lt;/glossterm> &lt;glossdef> &lt;para>Numeric zero, as opposed to the letter `O' (the 15th letter of the English alphabet). In their unmodified forms they look a lot alike, and various kluges invented to make them visually distinct have compounded the confusion. If your zero is center-dotted and letter-O is not, or if letter-O looks almost rectangular but zero looks more like an American football stood on end (or the reverse), you're probably looking at a modern character display (though the dotted zero seems to have originated as an option on IBM 3270 controllers). If your zero is slashed but letter-O is not, you're probably looking at an old-style ASCII graphic set descended from the default typewheel on the venerable ASR-33 Teletype (Scandinavians, for whom /O is a letter, curse this arrangement). (Interestingly, the slashed zero long predates computers; Florian Cajori's monumental "A History of Mathematical Notations" notes that it was used in the twelfth and thirteenth centuries.) If letter-O has a slash across it and the zero does not, your display is tuned for a very old convention used at IBM and a few other early mainframe makers (Scandinavians curse &lt;emphasis>this&lt;/emphasis> arrangement even more, because it means two of their letters collide). Some Burroughs/Unisys equipment displays a zero with a &lt;emphasis>reversed&lt;/emphasis> slash. Old CDC computers rendered letter O as an unbroken oval and 0 as an oval broken at upper right and lower left. And yet another convention common on early line printers left zero unornamented but added a tail or hook to the letter-O so that it resembled an inverted Q or cursive capital letter-O (this was endorsed by a draft ANSI standard for how to draw ASCII characters, but the final standard changed the distinguisher to a tick-mark in the upper-left corner). Are we sufficiently confused yet?&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;glossentry> &lt;glossterm>1TBS&lt;/glossterm> &lt;glossdef> &lt;para role="accidence"> &lt;phrase role="pronounce">&lt;/phrase> &lt;phrase role="partsofspeach">n&lt;/phrase> &lt;/para> &lt;para>The "One True Brace Style"&lt;/para> &lt;glossseealso>indent style&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> &lt;!-- ... --> &lt;/glossdiv> &lt;!-- ... --> &lt;/glossary> Marking Up Glossary Terms That takes care of the glossary database, now you have to get the entries into your document. Unlike bibliography entries, which can be empty, creating placeholder glossary entries would be very tedious. So instead, support for glossary.collection relies on implicit linking. In your source document, simply use firstterm and glossterm to identify the terms you wish to have included in the glossary. The stylesheets assume that you will either set the baseform attribute correctly, or that the content of the element exactly matches a term in your glossary. If you're using a glossary.collection, don't make explicit links on the terms in your document. So, in your document, you might write things like this: &lt;para>This is dummy text, without any real meaning. The point is simply to reference glossary terms like &lt;glossterm>0&lt;/glossterm> and the &lt;firstterm baseform="1TBS">One True Brace Style (1TBS)&lt;/firstterm>. The &lt;glossterm>1TBS&lt;/glossterm>, as you can probably imagine, is a nearly religious issue.&lt;/para> If you set the firstterm.only.link parameter, only the terms marked with firstterm will be links. Otherwise, all the terms will be linked. Marking Up the Glossary The glossary itself has to be identified for the stylesheets. For lack of a better choice, the role is used. To identify the glossary as the target for automatic processing, set the role to auto. The title of this glossary (and any other information from the glossaryinfo that's rendered by your stylesheet) will be displayed, but the entries will come from the database. Unfortunately, the glossary can't be empty, so you must put in at least one glossentry. The content of this entry is irrelevant, it will not be rendered: &lt;glossary role="auto"> &lt;glossentry> &lt;glossterm>Irrelevant&lt;/glossterm> &lt;glossdef> &lt;para>If you can see this, the document was processed incorrectly. Use the &lt;parameter>glossary.collection&lt;/parameter> parameter.&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;/glossary> What about glossary divisions? If your glossary database has glossary divisions and your automatic glossary contains at least one glossdiv, the automic glossary will have divisions. If the glossdiv is missing from either location, no divisions will be rendered. Glossary entries (and divisions, if appropriate) in the glossary will occur in precisely the order they occur in your database. Formatting the Document Finally, when you are ready to format your document, simply set the glossary.collection parameter (in either a customization layer or directly through your processor's interface) to point to your global glossary. A relative path in the parameter is interpreted in one of two ways: If the parameter glossterm.auto.link is set to zero, then the path is relative to the file containing the empty glossary element in the document. If the parameter glossterm.auto.link is set to non-zero, then the path is relative to the file containing the first inline glossterm or firstterm in the document to be linked. Once the collection file is opened by the first instance described above, it stays open for the current document and the relative path is not reinterpreted again. The stylesheets will format the glossary in your document as if all of the entries implicilty referenced appeared there literally. Limitations Glossary cross-references within the glossary are not supported. For example, this will not work: &lt;glossentry> &lt;glossterm>gloss-1&lt;/glossterm> &lt;glossdef>&lt;para>A description that references &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/para> &lt;glossseealso>gloss-2&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> If you put glossary cross-references in your glossary that way, you'll get the cryptic error: Warning: glossary.collection specified, but there are 0 automatic glossaries. Instead, you must do two things: Markup your glossary using glossseealso: &lt;glossentry> &lt;glossterm>gloss-1&lt;/glossterm> &lt;glossdef>&lt;para>A description that references &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/para> &lt;glossseealso>gloss-2&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> Make sure there is at least one glossterm reference to gloss-2 in your document. The easiest way to do that is probably within a remark in your automatic glossary: &lt;glossary role="auto"> &lt;remark>Make sure there's a reference to &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/remark> &lt;glossentry> &lt;glossterm>Irrelevant&lt;/glossterm> &lt;glossdef> &lt;para>If you can see this, the document was processed incorrectly. Use the &lt;parameter>glossary.collection&lt;/parameter> parameter.&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;/glossary></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossary.sort</String>
											</field>
											<field name="description">
												<String>If non-zero, then the glossentry elements within a glossary, glossdiv, or glosslist are sorted on the glossterm, using the current lang setting. If zero (the default), then glossentry elements are not sorted and are presented in document order.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossentry.show.acronym</String>
											</field>
											<field name="description">
												<String>A setting of yes means they should be displayed; no means they shouldn't. If primary is used, then they are shown as the primary text for the entry. This setting controls both acronym and abbrev elements in the glossentry.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossterm.auto.link</String>
											</field>
											<field name="description">
												<String>If non-zero, links from inline glossterms to the corresponding glossentry elements in a glossary or glosslist will be automatically generated. This is useful when your glossterms are consistent and you don't want to add links manually. The automatic link generation feature is not used on glossterm elements that have a linkend attribute.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphic.default.extension</String>
											</field>
											<field name="description">
												<String>If a graphic or mediaobject includes a reference to a filename that does not include an extension, and the format attribute is unspecified, the default extension will be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphicsize.extension</String>
											</field>
											<field name="description">
												<String>If non-zero (and if use.extensions is non-zero and if you're using a processor that supports extension functions), the getWidth and getDepth functions will be used to extract image sizes from graphics. The main supported image formats are GIF, JPEG, and PNG. Somewhat cruder support for EPS and PDF images is also available.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphicsize.use.img.src.path</String>
											</field>
											<field name="description">
												<String>If non-zero img.src.path parameter will be appended before filenames passed to extension functions for measuring image dimensions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>header.rule</String>
											</field>
											<field name="description">
												<String>If non-zero, a rule will be drawn below the page headers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.default.language</String>
											</field>
											<field name="description">
												<String>This language is used when there is no language attribute on programlisting.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.append</String>
											</field>
											<field name="description">
												<String>Specifies content to append to the end of HTML files output by the html/docbook.xsl stylesheet, after the closing &lt;html> tag. You probably don't want to set any value for this parameter; but if you do, the only value it should ever be set to is a newline character: &amp;#x0a; or &amp;#10;</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.base</String>
											</field>
											<field name="description">
												<String>If html.base is set, it is used for the base element in the head of the html documents. The parameter specifies the base URL for all relative URLs in the document. This is useful for dynamically served html where the base URI needs to be shifted.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cellpadding</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used as the default cellpadding value in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or 5%</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cellspacing</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used as the default cellspacing value in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or 5%</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cleanup</String>
											</field>
											<field name="description">
												<String>If non-zero, and if the EXSLT extensions are supported by your processor, the resulting HTML will be cleaned up. This improves the chances that the resulting HTML will be valid. It may also improve the formatting of some elements. This parameter is different from make.valid.html because it uses extension functions to manipulate result-tree-fragments.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.extra.head.links</String>
											</field>
											<field name="description">
												<String>If non-zero, extra link elements will be generated in the head of chunked HTML files. These extra links point to chapters, appendixes, sections, etc. as supported by the Site Navigation Bar in Mozilla 1.0 (as of CR1, at least).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.head.legalnotice.link.multiple</String>
											</field>
											<field name="description">
												<String>html.head.legalnotice.link.multiple
Generate multiple link instances in html head for legalnotice?

Description

If html.head.legalnotice.link.multiple is non-zero and the value of html.head.legalnotice.link.types contains multiple link types, then the stylesheet generates (in the head section of the HTML source) one link element for each link type specified. For example, if the value of html.head.legalnotice.link.types is "copyright license": &lt;link rel="copyright" href="ln-id2524073.html" title="Legal Notice"> &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice"> Otherwise, the stylesheet generates generates a single link instance; for example: &lt;link rel="copyright license" href="ln-id2524073.html" title="Legal Notice"> Default value: 1</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.head.legalnotice.link.types</String>
											</field>
											<field name="description">
												<String>The value of html.head.legalnotice.link.types is a space-separated list of link types, as described in Section 6.12 of the HTML 4.01 specification. If the value of the generate.legalnotice.link parameter is non-zero, then the stylesheet generates (in the head section of the HTML source) either a single HTML link element or, if the value of the html.head.legalnotice.link.multiple is non-zero, one link element for each link type specified. Each link has the following attributes: a rel attribute whose value is derived from the value of html.head.legalnotice.link.types an href attribute whose value is set to the URL of the file containing the legalnotice a title attribute whose value is set to the title of the corresponding legalnotice (or a title programatically determined by the stylesheet)
For example:
  &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice">. 
In an ideal world, the default value of html.head.legalnotice.link.types would  probably be "license", since the content of the DocBook legalnotice is typically license information, not copyright information. However, the default value is "copyright" for pragmatic reasons: because that's among the set of "recognized link types" listed in Section 6.12 of the HTML 4.01 specification, and because certain browsers and browser extensions are preconfigured to recognize that value. Default value: copyright</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>copyright</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.longdesc</String>
											</field>
											<field name="description">
												<String>If non-zero, HTML files will be created for the longdesc attribute. These files are created from the textobjects in mediaobjects and inlinemediaobject.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.longdesc.link</String>
											</field>
											<field name="description">
												<String>If non-zero, links will be created to the HTML files created for the longdesc attribute. It makes no sense to enable this option without also enabling the html.longdesc parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.script</String>
											</field>
											<field name="description">
												<String>The html.script parameter is either empty (default), indicating that no script element should be generated in the html output, or it is a list of one or more script locations. Multiple script locations are space-delimited. If you need to reference a script URI that includes a space, encode it with %20. A separate html script element will be generated for each script in the order they are listed in the parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.script.type</String>
											</field>
											<field name="description">
												<String>The type of script to place in the HTML script element. Specifically, the value of the script element's type attribute. The default value is text/javascript. This param is used only when the stylesheet parameter html.script is non-blank and specifies the location of a script.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>text/javascript</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet</String>
											</field>
											<field name="description">
												<String>The html.stylesheet parameter is either empty, indicating that no stylesheet link tag should be generated in the html output, or it is a list of one or more stylesheet files. Multiple stylesheets are space-delimited. If you need to reference a stylesheet URI that includes a space, encode it with %20. A separate html link element will be generated for each stylesheet in the order they are listed in the parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet.type</String>
											</field>
											<field name="description">
												<String>The type of the stylesheet to place in the HTML link tag.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>text/css</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>id.warnings</String>
											</field>
											<field name="description">
												<String>If non-zero, the stylesheet will issue a warning for any element (other than the root element) which has a title but does not have an ID.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ignore.image.scaling</String>
											</field>
											<field name="description">
												<String>If non-zero, the scaling attributes on graphics and media objects are ignored.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>img.src.path</String>
											</field>
											<field name="description">
												<String>Add a path prefix to the value of the fileref attribute of graphic, inlinegraphic, and imagedata elements. The resulting compound path is used in the output as the value of the src attribute of img (HTML) or external-graphic (FO). The path given by img.src.path could be relative to the directory where the HTML/FO files are created, or it could be an absolute URI. The default value is empty. Be sure to include a trailing slash if needed. This prefix is not applied to any filerefs that start with "/" or contain "://".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.links.to.section</String>
											</field>
											<field name="description">
												<String>If zero, then an index entry in an index links directly to the location of the generated anchor that is output for the indexterm. If two identical indexterm elements exist in the same section, then both entries appear in the index with the same title but link to different locations. If non-zero, then an index entry in an index links to the section title containing the indexterm, rather than directly to the anchor output for the indexterm. Duplicate indexterm entries in the same section are dropped. The default value is 1, so index entries link to section titles by default. In both cases, the link text in an index entry is the title of the section containing the indexterm. That is because HTML does not have numbered pages. It also provides the reader with context information for each link. This parameter lets you choose which style of index linking you want. When set to 0, an index entry takes you to the precise location of its corresponding indexterm. However, if you have a lot of duplicate entries in sections, then you have a lot of duplicate titles in the index, which makes it more cluttered. The reader may not recognize why duplicate titles appear until they follow the links. Also, the links may land the reader in the middle of a section where the section title is not visible, which may also be confusing to the reader. When set to 1, an index entry link is less precise, but duplicate titles in the index entries are eliminated. Landing on the section title location may confirm the reader's expectation that a link that shows a section title will take them to that section title, not a location within the section.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.method</String>
											</field>
											<field name="description">
												<String>Select method used to group index entries in an index Description This parameter lets you select which method to use for sorting and grouping index entries in an index. Indexes in Latin-based languages that have accented characters typically sort together accented words and unaccented words. Thus �? (U+00C1 LATIN CAPITAL LETTER A WITH ACUTE) would sort together with A (U+0041 LATIN CAPITAL LETTER A), so both would appear in the A section of the index. Languages using other alphabets (such as Russian, which is written in the Cyrillic alphabet) and languages using ideographic chararacters (such as Japanese) require grouping specific to the languages and alphabets. The default indexing method is limited. It can group accented characters in Latin-based languages only. It cannot handle non-Latin alphabets or ideographic languages. The other indexing methods require extensions of one type or another, and do not work with all XSLT processors, which is why they are not used by default. The three choices for indexing method are: basic (default) Sort and groups words based only on the Latin alphabet. Words with accented Latin letters will group and sort with their respective primary letter, but words in non-Latin alphabets will be put in the Symbols section of the index. kosek This method sorts and groups words based on letter groups configured in the DocBook locale file for the given language. See, for example, the French locale file common/fr.xml. This method requires that the XSLT processor supports the EXSLT extensions (most do). It also requires support for using user-defined functions in xsl:key (xsltproc does not). This method is suitable for any language for which you can list all the individual characters that should appear in each letter group in an index. It is probably not practical to use it for ideographic languages such as Chinese that have hundreds or thousands of characters. To use the kosek method, you must: Use a processor that supports its extensions, such as Saxon 6 or Xalan (xsltproc and Saxon 8 do not). Set the index.method parameter's value to kosek. Import the appropriate index extensions stylesheet module fo/autoidx-kosek.xsl or html/autoidx-kosek.xsl into your customization. kimber This method uses extensions to the Saxon processor to implement sophisticated indexing processes. It uses its own configuration file, which can include information for any number of languages. Each language's configuration can group words using one of two processes. In the enumerated process similar to that used in the kosek method, you indicate the groupings character-by-character. In the between-key process, you specify the break-points in the sort order that should start a new group. The latter configuration is useful for ideographic languages such as Chinese, Japanese, and Korean. You can also define your own collation algorithms and how you want mixed Latin-alphabet words sorted. For a whitepaper describing the extensions, see: http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf. To download the extension library, see http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport. To use the kimber method, you must: Use Saxon (version 6 or 8) as your XSLT processor. Install and configure the Innodata Isogen library, using the documentation that comes with it. Set the index.method parameter's value to kimber. Import the appropriate index extensions stylesheet module fo/autoidx-kimber.xsl or html/autoidx-kimber.xsl into your customization. Default value: basic</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>basic</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.number.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between page references in a formatted index entry. Typically that would be a comma and a space. Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'number-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can override the gentext with the content of this parameter. The content can be a simple string, or it can be something more complex such as a call-template. In HTML index output, section title references are used instead of page number references. This punctuation appears between such section titles in an HTML index.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.on.role</String>
											</field>
											<field name="description">
												<String>If non-zero, then an index element that has a role attribute value will contain only those indexterm elements with a matching role value. If an index has no role attribute or it is blank, then the index will contain all indexterms in the current scope. If index.on.role is zero, then the role attribute has no effect on selecting indexterms for an index. If you are using DocBook version 4.3 or later, you should use the type attribute instead of role on indexterm and index, and set the index.on.type to a nonzero value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.on.type</String>
											</field>
											<field name="description">
												<String>If non-zero, then an index element that has a type attribute value will contain only those indexterm elements with a matching type attribute value. If an index has no type attribute or it is blank, then the index will contain all indexterms in the current scope. If index.on.type is zero, then the type attribute has no effect on selecting indexterms for an index. For those using DocBook version 4.2 or earlier, the type attribute is not available for index terms. However, you can achieve the same effect by using the role attribute in the same manner on indexterm and index, and setting the stylesheet parameter index.on.role to a nonzero value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.prefer.titleabbrev</String>
											</field>
											<field name="description">
												<String>If non-zero, and if a titleabbrev is defined, the abbreviated title is used as the link text of a back reference in the index.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.range.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between the two numbers of a page range in an index. This parameter is only used by those XSL-FO processors that support an extension for generating such page ranges (such as XEP). Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'range-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can override the gentext with the content of this parameter. The content can be a simple string, or it can be something more complex such as a call-template. In HTML index output, section title references are used instead of page number references. So there are no page ranges and this parameter has no effect.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.term.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between the end of an index term and its list of page references. Typically that might be a comma and a space. Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'term-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can fill in the content for this normally empty override parameter. The content can be a simple string, or it can be something more complex such as a call-template. For fo output, it could be an fo:leader element to provide space of a specific length, or a dot leader.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.olink.page.number</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines if cross references made between documents with olink will include page number citations. In most cases this is only applicable to references in printed output. The parameter has three possible values. no No page number references will be generated for olinks. yes Page number references will be generated for all olink references. The style of page reference may be changed if an xrefstyle attribute is used. maybe Page number references will not be generated for an olink element unless it has an xrefstyle attribute whose value specifies a page reference. Olinks that point to targets within the same document are treated as xrefs, and controlled by the insert.xref.page.number parameter. Page number references for olinks to external documents can only be inserted if the information exists in the olink database. This means each olink target element (div or obj) must have a page attribute whose value is its page number in the target document. The XSL stylesheets are not able to extract that information during processing because pages have not yet been created in XSLT transformation. Only the XSL-FO processor knows what page each element is placed on. Therefore some postprocessing must take place to populate page numbers in the olink database.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.olink.pdf.frag</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines whether the cross reference URIs to PDF documents made with olink will include fragment identifiers. When forming a URI to link to a PDF document, a fragment identifier (typically a '#' followed by an id value) appended to the PDF filename can be used by the PDF viewer to open the PDF file to a location within the document instead of the first page. However, not all PDF files have id values embedded in them, and not all PDF viewers can handle fragment identifiers. If insert.olink.pdf.frag is set to a non-zero value, then any olink targeting a PDF file will have the fragment identifier appended to the URI. The URI is formed by concatenating the value of the olink.base.uri parameter, the value of the baseuri attribute from the document element in the olink database with the matching targetdoc value, and the value of the href attribute for the targeted element in the olink database. The href attribute contains the fragment identifier. If insert.olink.pdf.frag is set to zero (the default value), then the href attribute from the olink database is not appended to PDF olinks, so the fragment identifier is left off. A PDF olink is any olink for which the baseuri attribute from the matching document element in the olink database ends with '.pdf'. Any other olinks will still have the fragment identifier added.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.xref.page.number</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines if cross references (xrefs) in printed output will include page number citations. It has three possible values. no No page number references will be generated. yes Page number references will be generated for all xref elements. The style of page reference may be changed if an xrefstyle attribute is used. maybe Page number references will not be generated for an xref element unless it has an xrefstyle attribute whose value specifies a page reference.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>keep.relative.image.uris</String>
											</field>
											<field name="description">
												<String>If non-zero, relative URIs (in, for example fileref attributes) will be used in the generated output. Otherwise, the URIs will be made absolute with respect to the base URI. Note that the stylesheets calculate (and use) the absolute form for some purposes, this only applies to the resulting output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.gentext.language</String>
											</field>
											<field name="description">
												<String>If this parameter is set to any value other than the empty string, its value will be used as the value for the language when generating text. Setting l10n.gentext.language overrides any settings within the document being formatted.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.lang.value.rfc.compliant</String>
											</field>
											<field name="description">
												<String>If non-zero, ensure that the values for all lang attributes in HTML output are RFC compliantSection 8.1.1, Language Codes, in the HTML 4.0 Recommendation states that: [RFC1766] defines and explains the language codes that must be used in HTML documents. Briefly, language codes consist of a primary code and a possibly empty series of subcodes: language-code = primary-code ( "-" subcode )* And in RFC 1766, Tags for the Identification of Languages, the EBNF for "language tag" is given as: Language-Tag = Primary-tag *( "-" Subtag ) Primary-tag = 1*8ALPHA Subtag = 1*8ALPHA . by taking any underscore characters in any lang values found in source documents, and replacing them with hyphen characters in output HTML files. For example, zh_CN in a source document becomes zh-CN in the HTML output form that source. This parameter does not cause any case change in lang values, because RFC 1766 explicitly states that all "language tags" (as it calls them) "are to be treated as case insensitive".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>label.from.part</String>
											</field>
											<field name="description">
												<String>If label.from.part is non-zero, then numbering of components �? preface, chapter, appendix, and reference (when reference occurs at the component level)�? is re-started within each part. If label.from.part is zero (the default), numbering of components is not re-started within each part; instead, components are numbered sequentially throughout each book, regardless of whether or not they occur within part instances.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.everyNth</String>
											</field>
											<field name="description">
												<String>If line numbering is enabled, everyNth line will be numbered. Note that numbering is one based, not zero based. See also linenumbering.extension, linenumbering.separator, linenumbering.width and use.extensions</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>5</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.extension</String>
											</field>
											<field name="description">
												<String>If non-zero, verbatim environments (address, literallayout, programlisting, screen, synopsis) that specify line numbering will have line numbers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.separator</String>
											</field>
											<field name="description">
												<String>The separator is inserted between line numbers and lines in the verbatim environment. The default value is a single white space. Note the interaction with linenumbering.width</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.width</String>
											</field>
											<field name="description">
												<String>If line numbering is enabled, line numbers will appear right justified in a field "width" characters wide.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>3</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>link.mailto.url</String>
											</field>
											<field name="description">
												<String>If not the empty string, this address will be used for the rel=made link element in the html head</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.clean.html</String>
											</field>
											<field name="description">
												<String>If make.clean.html is true, the stylesheets take extra effort to ensure that the resulting HTML is conforms to modern HTML coding standards. In addition to eliminating excessive and noncompliant coding, it moves presentation HTML coding to a CSS stylesheet. The resulting HTML is dependent on CSS for formatting, and so the stylesheet is capable of generating a supporting CSS file. The docbook.css.source and custom.css.source parameters control how a CSS file is generated. If you require your CSS to reside in the HTML head element, then the generate.css.header can be used to do that. The make.clean.html parameter is different from html.cleanup because the former changes the resulting markup; it does not use extension functions like the latter to manipulate result-tree-fragments, and is therefore applicable to any XSLT processor. If make.clean.html is set to zero (the default), then the stylesheet retains its original old style HTML formatting features.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.graphic.viewport</String>
											</field>
											<field name="description">
												<String>The HTML img element only supports the notion of content-area scaling; it doesn't support the distinction between a content-area and a viewport-area, so we have to make some compromises. If make.graphic.viewport is non-zero, a table will be used to frame the image. This creates an effective viewport-area. Tables and alignment don't work together, so this parameter is ignored if alignment is specified on an image.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.single.year.ranges</String>
											</field>
											<field name="description">
												<String>If non-zero, year ranges that span a single year will be printed in range notation (1998-1999) instead of discrete notation (1998, 1999).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.valid.html</String>
											</field>
											<field name="description">
												<String>If make.valid.html is true, the stylesheets take extra effort to ensure that the resulting HTML is valid. This may mean that some para tags are translated into HTML divs or that other substitutions occur. This parameter is different from html.cleanup because it changes the resulting markup; it does not use extension functions to manipulate result-tree-fragments and is therefore applicable to any XSLT processor.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.year.ranges</String>
											</field>
											<field name="description">
												<String>If non-zero, multiple copyright year elements will be collated into ranges. This works only if each year number is put into a separate year element. The copyright element permits multiple year elements. If a year element contains a dash or a comma, then that year element will not be merged into any range.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manifest</String>
											</field>
											<field name="description">
												<String>The name of the file to which a manifest is written (if the value of the generate.manifest parameter is non-zero).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>HTML.manifest</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manual.toc</String>
											</field>
											<field name="description">
												<String>The manual.toc identifies an explicit TOC that will be used for building the printed TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>menuchoice.menu.separator</String>
											</field>
											<field name="description">
												<String>Separator used to connect items of a menuchoice with guimenuitem or guisubmenu. Other elements are linked with menuchoice.separator. The default value is &amp;#x2192;, which is the &amp;rarr; (right arrow) character entity. The current FOP (0.20.5) requires setting the font-family explicitly. The default value also includes spaces around the arrow, which will allow a line to break. Replace the spaces with &amp;#xA0; (nonbreaking space) if you don't want those spaces to break.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>→</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>menuchoice.separator</String>
											</field>
											<field name="description">
												<String>Separator used to connect items of a menuchoice other than guimenuitem and guisubmenu. The latter elements are linked with menuchoice.menu.separator.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>+</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics</String>
											</field>
											<field name="description">
												<String>If non-zero, the navigational headers and footers in chunked HTML are presented in an alternate style that uses graphical icons for Next, Previous, Up, and Home. Default graphics are provided in the distribution. If zero, text is used instead of graphics.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension to use on navigational graphics used in the headers and footers of chunked HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.gif</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics.path</String>
											</field>
											<field name="description">
												<String>Sets the path, probably relative to the directory where the HTML files are created, to the navigational graphics used in the headers and footers of chunked HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>images/</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.image.depth</String>
											</field>
											<field name="description">
												<String>See nominal.image.width.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.image.width</String>
											</field>
											<field name="description">
												<String>Graphic widths expressed as a percentage are problematic. In the following discussion, we speak of width and contentwidth, but the same issues apply to depth and contentdepth. A width of 50% means "half of the available space for the image." That's fine. But note that in HTML, this is a dynamic property and the image size will vary if the browser window is resized. A contentwidth of 50% means "half of the actual image width". But what does that mean if the stylesheets cannot assess the image's actual size? Treating this as a width of 50% is one possibility, but it produces behavior (dynamic scaling) that seems entirely out of character with the meaning. Instead, the stylesheets define a nominal.image.width and convert percentages to actual values based on that nominal size.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.table.width</String>
											</field>
											<field name="description">
												<String>In order to convert CALS column widths into HTML column widths, it is sometimes necessary to have an absolute table width to use for conversion of mixed absolute and relative widths. This value must be an absolute length (not a percentage).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>6in</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.base.uri</String>
											</field>
											<field name="description">
												<String>When cross reference data is collected for resolving olinks, it may be necessary to prepend a base URI to each target's href. This parameter lets you set that base URI when cross reference data is collected. This feature is needed when you want to link to a document that is processed without chunking. The output filename for such a document is not known to the XSL stylesheet; the only target information consists of fragment identifiers such as #idref. To enable the resolution of olinks between documents, you should pass the name of the HTML output file as the value of this parameter. Then the hrefs recorded in the cross reference data collection look like outfile.html#idref, which can be reached as links from other documents.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.debug</String>
											</field>
											<field name="description">
												<String>If non-zero, then each olink will generate several messages about how it is being resolved during processing. This is useful when an olink does not resolve properly and the standard error messages are not sufficient to find the problem. You may need to read through the olink XSL templates to understand the context for some of the debug messages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.doctitle</String>
											</field>
											<field name="description">
												<String>When olinks between documents are resolved, the generated text may not make it clear that the reference is to another document. It is possible for the stylesheets to append the other document's title to external olinks. For this to happen, two parameters must be set. This olink.doctitle parameter should be set to either yes or maybe to enable this feature. And you should also set the current.docid parameter to the document id for the document currently being processed for output. Then if an olink's targetdoc id differs from the current.docid value, the stylesheet knows that it is a reference to another document and can append the target document's title to the generated olink text. The text for the target document's title is copied from the olink database from the ttl element of the top-level div for that document. If that ttl element is missing or empty, no title is output. The supported values for olink.doctitle are: yes Always insert the title to the target document if it is not the current document. no Never insert the title to the target document, even if requested in an xrefstyle attribute. maybe Only insert the title to the target document, if requested in an xrefstyle attribute. An xrefstyle attribute may override the global setting for individual olinks. The following values are supported in an xrefstyle attribute using the select: syntax: docname Insert the target document name for this olink using the docname gentext template, but only if the value of olink.doctitle is not no. docnamelong Insert the target document name for this olink using the docnamelong gentext template, but only if the value of olink.doctitle is not no. nodocname Omit the target document name even if the value of olink.doctitle is yes. Another way of inserting the target document name for a single olink is to employ an xrefstyle attribute using the template: syntax. The %o placeholder (the letter o, not zero) in such a template will be filled in with the target document's title when it is processed. This will occur regardless of the value of olink.doctitle. Note that prior to version 1.66 of the XSL stylesheets, the allowed values for this parameter were 0 and 1. Those values are still supported and mapped to 'no' and 'yes', respectively.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.fragid</String>
											</field>
											<field name="description">
												<String>The fragment identifier portion of an olink target.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>fragid=</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.lang.fallback.sequence</String>
											</field>
											<field name="description">
												<String>This parameter defines a list of lang values to search among to resolve olinks. Normally an olink tries to resolve to a document in the same language as the olink itself. The language of an olink is determined by its nearest ancestor element with a lang attribute, otherwise the value of the l10n.gentext.default.lang parameter. An olink database can contain target data for the same document in multiple languages. Each set of data has the same value for the targetdoc attribute in the document element in the database, but with a different lang attribute value. When an olink is being resolved, the target is first sought in the document with the same language as the olink. If no match is found there, then this parameter is consulted for additional languages to try. The olink.lang.fallback.sequence must be a whitespace separated list of lang values to try. The first one with a match in the olink database is used. The default value is empty. For example, a document might be written in German and contain an olink with targetdoc="adminguide". When the document is processed, the processor first looks for a target dataset in the olink database starting with: &lt;document targetdoc="adminguide" lang="de">. If there is no such element, then the olink.lang.fallback.sequence parameter is consulted. If its value is, for example, fr en, then the processor next looks for targetdoc="adminguide" lang="fr", and then for targetdoc="adminguide" lang="en". If there is still no match, it looks for targetdoc="adminguide" with no lang attribute. This parameter is useful when a set of documents is only partially translated, or is in the process of being translated. If a target of an olink has not yet been translated, then this parameter permits the processor to look for the document in other languages. This assumes the reader would rather have a link to a document in a different language than to have a broken link.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.outline.ext</String>
											</field>
											<field name="description">
												<String>The extension to be expected for OLink outline files Bob has this parameter as dead. Please don't use</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.olink</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.properties</String>
											</field>
											<field name="description">
												<String>This attribute set is applied to the fo:basic-link element of an olink. It is not applied to the optional page number or optional title of the external document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>pubid</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.pubid</String>
											</field>
											<field name="description">
												<String> </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>pubid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.resolver</String>
											</field>
											<field name="description">
												<String></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>/cgi-bin/olink</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.sysid</String>
											</field>
											<field name="description">
												<String></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>sysid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>othercredit.like.author.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, output of the othercredit element on titlepages is displayed in the same style as author and editor output. If zero then othercredit output is displayed using a style different than that of author and editor.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>pixels.per.inch</String>
											</field>
											<field name="description">
												<String>When lengths are converted to pixels, this value is used to determine the size of a pixel. The default value is taken from the XSL Recommendation.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>90</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>points.per.em</String>
											</field>
											<field name="description">
												<String>The fixed value used for calculations based upon the size of a character. The assumption made is that ten point font is in use. This assumption may not be valid.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>preface.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero then prefaces will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (arabic).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>prefer.internal.olink</String>
											</field>
											<field name="description">
												<String>If you are re-using XML content modules in multiple documents, you may want to redirect some of your olinks. This parameter permits you to redirect an olink to the current document. For example: you are writing documentation for a product, which includes 3 manuals: a little installation booklet (booklet.xml), a user guide (user.xml), and a reference manual (reference.xml). All 3 documents begin with the same introduction section (intro.xml) that contains a reference to the customization section (custom.xml) which is included in both user.xml and reference.xml documents. How do you write the link to custom.xml in intro.xml so that it is interpreted correctly in all 3 documents? If you use xref, it will fail in user.xml. If you use olink (pointing to reference.xml), the reference in user.xml will point to the customization section of the reference manual, while it is actually available in user.xml. If you set the prefer.internal.olink parameter to a non-zero value, then the processor will first look in the olink database for the olink's targetptr attribute value in document matching the current.docid parameter value. If it isn't found there, then it tries the document in the database with the targetdoc value that matches the olink's targetdoc attribute. This feature permits an olink reference to resolve to the current document if there is an element with an id matching the olink's targetptr value. The current document's olink data must be included in the target database for this to work. There is a potential for incorrect links if the same id attribute value is used for different content in different documents. Some of your olinks may be redirected to the current document when they shouldn't be. It is not possible to control individual olink instances.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>preferred.mediaobject.role</String>
											</field>
											<field name="description">
												<String>A mediaobject may contain several objects such as imageobjects. If the parameter use.role.for.mediaobject is non-zero, then the role attribute on imageobjects and other objects within a mediaobject container will be used to select which object will be used. If one of the objects has a role value that matches the preferred.mediaobject.role parameter, then it has first priority for selection. If more than one has such a role value, the first one is used. See the use.role.for.mediaobject parameter for the sequence of selection.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>process.empty.source.toc</String>
											</field>
											<field name="description">
												<String>Specifies that if an empty toc element is found in a source document, an automated TOC is generated at this point in the document. Depending on what the value of the generate.toc parameter is, setting this parameter to 1 could result in generation of duplicate automated TOCs. So the process.empty.source.toc is primarily useful as an "override": by placing an empty toc in your document and setting this parameter to 1, you can force a TOC to be generated even if generate.toc says not to.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>process.source.toc</String>
											</field>
											<field name="description">
												<String>Specifies that the contents of a non-empty "hard-coded" toc element in a source document are processed to generate a TOC in output. This parameter has no effect on automated generation of TOCs. An automated TOC may still be generated along with the "hard-coded" TOC. To suppress automated TOC generation, adjust the value of the generate.toc paramameter. The process.source.toc parameter also has no effect if the toc element is empty; handling for empty toc is controlled by the process.empty.source.toc parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.arch</String>
											</field>
											<field name="description">
												<String>Target profile for the arch attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by the profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.attribute</String>
											</field>
											<field name="description">
												<String>Target profile for the attribute attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.audience</String>
											</field>
											<field name="description">
												<String>Target profile for the audience attribute. The Value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.condition</String>
											</field>
											<field name="description">
												<String>Target profile for the condition attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.conformance</String>
											</field>
											<field name="description">
												<String>Target profile for the conformance attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.lang</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.os</String>
											</field>
											<field name="description">
												<String>Target profile for the os attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revision</String>
											</field>
											<field name="description">
												<String>Target profile for the revision attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revisionflag</String>
											</field>
											<field name="description">
												<String>Target profile for the revisionflag attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.role</String>
											</field>
											<field name="description">
												<String>Target profile for the role attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.security</String>
											</field>
											<field name="description">
												<String>Target profile for the security attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.status</String>
											</field>
											<field name="description">
												<String>Target profile for the status attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.userlevel</String>
											</field>
											<field name="description">
												<String>Target profile for the userlevel attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.value</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.vendor</String>
											</field>
											<field name="description">
												<String>Target profile for the vendor attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.wordsize</String>
											</field>
											<field name="description">
												<String>Target profile for the wordsize attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>punct.honorific</String>
											</field>
											<field name="description">
												<String>This parameter specifies the punctuation that should be added after an honorific in a personal name.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.defaultlabel</String>
											</field>
											<field name="description">
												<String>If no defaultlabel attribute is specified on a qandaset, this value is used. It is generally one of the legal values for the defaultlabel attribute (none, number or qanda), or one of the additional stylesheet-specific values (qnumber or qnumberanda). The default value is 'number'. The values are rendered as follows: qanda questions are labeled "Q:" and answers are labeled "A:". number The questions are enumerated and the answers are not labeled. qnumber The questions are labeled "Q:" followed by a number, and answers are not labeled. When sections are numbered, adding a label to the number distinguishes the question numbers from the section numbers. This value is not allowed in the defaultlabel attribute of a qandaset element. qnumberanda The questions are labeled "Q:" followed by a number, and the answers are labeled "A:". When sections are numbered, adding a label to the number distinguishes the question numbers from the section numbers. This value is not allowed in the defaultlabel attribute of a qandaset element. none No distinguishing label precedes Questions or Answers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>number</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.in.toc</String>
											</field>
											<field name="description">
												<String>If true (non-zero), then the generated table of contents for a document will include qandaset titles, qandadiv titles, and question elements. The default value (zero) excludes them from the TOC. This parameter does not affect any tables of contents that may be generated inside a qandaset or qandadiv.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.inherit.numeration</String>
											</field>
											<field name="description">
												<String>If non-zero, numbered qandadiv elements and question and answer inherit the enumeration of the ancestors of the qandaset.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.nested.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, instances of qandaentry that are children of answer elements are shown in the TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refclass.suppress</String>
											</field>
											<field name="description">
												<String>If the value of refclass.suppress is non-zero, then display of refclass contents is suppressed in output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.generate.name</String>
											</field>
											<field name="description">
												<String>If non-zero, a "NAME" section title is output before the list of refnames. This parameter and refentry.generate.title are mutually exclusive. This means that if you change this parameter to zero, you should set refentry.generate.title to non-zero unless you want get quite strange output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.generate.title</String>
											</field>
											<field name="description">
												<String>If non-zero, the reference page title or first name is output before the list of refnames. This parameter and refentry.generate.name are mutually exclusive. This means that if you change this parameter to non-zero, you should set refentry.generate.name to zero unless you want get quite strange output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.separator</String>
											</field>
											<field name="description">
												<String>If true, a separator will be generated between consecutive reference pages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.xref.manvolnum</String>
											</field>
											<field name="description">
												<String>if non-zero, the manvolnum is used when cross-referencing refentrys, either with xref or citerefentry.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>rootid</String>
											</field>
											<field name="description">
												<String>If rootid is not empty, it must be the value of an ID that occurs in the document being formatted. The entire document will be loaded and parsed, but formatting will begin at the element identified, rather than at the root. For example, this allows you to process only chapter 4 of a book. Because the entire document is available to the processor, automatic numbering, cross references, and other dependencies are correctly resolved.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>runinhead.default.title.end.punct</String>
											</field>
											<field name="description">
												<String>If non-zero, For a formalpara, use the specified string as the separator between the title and following text. The period is the default value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>runinhead.title.end.punct</String>
											</field>
											<field name="description">
												<String>Specify which characters are to be counted as punctuation. These characters are checked for a match with the last character of the title. If no match is found, the runinhead.default.title.end.punct contents are inserted. This is to avoid duplicated punctuation in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.!?:</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.autolabel.max.depth</String>
											</field>
											<field name="description">
												<String>When section numbering is turned on by the section.autolabel parameter, then this parameter controls the depth of section nesting that is numbered. Sections nested to a level deeper than this value will not be numbered.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>8</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>segmentedlist.as.table</String>
											</field>
											<field name="description">
												<String>If non-zero, segmentedlists will be formatted as tables.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>shade.verbatim</String>
											</field>
											<field name="description">
												<String>In the FO stylesheet, if this parameter is non-zero then the shade.verbatim.style properties will be applied to verbatim environments. In the HTML stylesheet, this parameter is now deprecated. Use CSS instead.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>shade.verbatim.style</String>
											</field>
											<field name="description">
												<String>Properties that specify the style of shaded verbatim listings. The parameters specified (the border and background color) are added to the styling of the xsl-fo output. A border might be specified as "thin black solid" for example. See xsl-fo</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>show.comments</String>
											</field>
											<field name="description">
												<String>If non-zero, comments will be displayed, otherwise they are suppressed. Comments here refers to the remark element (which was called comment prior to DocBook 4.0), not XML comments (&lt;-- like this -->) which are unavailable.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>show.revisionflag</String>
											</field>
											<field name="description">
												<String>If show.revisionflag is turned on, then the stylesheets may produce additional markup designed to allow a CSS stylesheet to highlight elements that have specific revisionflag settings. The markup inserted will be usually be either a &lt;span> or &lt;div> with an appropriate class attribute. (The value of the class attribute will be the same as the value of the revisionflag attribute). In some contexts, for example tables, where extra markup would be structurally illegal, the class attribute will be added to the appropriate container element. In general, the stylesheets only test for revisionflag in contexts where an importing stylesheet would have to redefine whole templates. Most of the revisionflag processing is expected to be done by another stylesheet, for example changebars.xsl.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>simplesect.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, simplesects will be included in the TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>spacing.paras</String>
											</field>
											<field name="description">
												<String>When non-zero, additional, empty paragraphs are inserted in several contexts (for example, around informal figures), to create a more pleasing visual appearance in many browsers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.header.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, header navigation will be suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.borders.with.css</String>
											</field>
											<field name="description">
												<String>If non-zero, CSS will be used to draw table borders.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.color</String>
											</field>
											<field name="description">
												<String>Set the color of table cell borders. If non-zero, the value is used for the border coloration. See CSS. A color is either a keyword or a numerical RGB specification. Keywords are aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, and yellow. To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.style</String>
											</field>
											<field name="description">
												<String>Specifies the border style of table cells. To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>solid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.thickness</String>
											</field>
											<field name="description">
												<String>If non-zero, specifies the thickness of borders on table cells. The units are points. See CSS To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0.5pt</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.footnote.number.format</String>
											</field>
											<field name="description">
												<String>The table.footnote.number.format specifies the format to use for footnote numeration (1, i, I, a, or A) in tables.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>a</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.footnote.number.symbols</String>
											</field>
											<field name="description">
												<String>If table.footnote.number.symbols is not the empty string, table footnotes will use the characters it contains as footnote symbols. For example, *&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720; will identify footnotes with ", †, ‡, ◊, and ✠ . If there are more footnotes than symbols, the stylesheets will fall back to numbered footnotes using table.footnote.number.format. The use of symbols for footnotes depends on the ability of your processor (or browser) to render the symbols you select. Not all systems are capable of displaying the full range of Unicode characters. If the quoted characters in the preceding paragraph are not displayed properly, that's a good indicator that you may have trouble using those symbols for footnotes.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.color</String>
											</field>
											<field name="description">
												<String>Specifies the border color of table frames.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.style</String>
											</field>
											<field name="description">
												<String>Specifies the border style of table frames.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>solid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.thickness</String>
											</field>
											<field name="description">
												<String>Specifies the thickness of the border on the table's frame.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0.5pt</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tablecolumns.extension</String>
											</field>
											<field name="description">
												<String>The table columns extension function adjusts the widths of table columns in the HTML result to more accurately reflect the specifications in the CALS table.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>target.database.document</String>
											</field>
											<field name="description">
												<String>To resolve olinks between documents, the stylesheets use a master database document that identifies the target datafiles for all the documents within the scope of the olinks. This parameter value is the URI of the master document to be read during processing to resolve olinks. The default value is olinkdb.xml. The data structure of the file is defined in the targetdatabase.dtd DTD. The database file provides the high level elements to record the identifiers, locations, and relationships of documents. The cross reference data for individual documents is generally pulled into the database using system entity references or XIncludes. See also targets.filename.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>olinkdb.xml</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>targets.filename</String>
											</field>
											<field name="description">
												<String>In order to resolve olinks efficiently, the stylesheets can generate an external data file containing information about all potential cross reference endpoints in a document. This parameter lets you change the name of the generated file from the default name target.db. The name must agree with that used in the target database used to resolve olinks during processing. See also target.database.document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>target.db</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.delims</String>
											</field>
											<field name="description">
												<String>For compatibility with DSSSL based DBTeXMath from Allin Cottrell you should set this parameter to 0. This feature is useful for print/PDF output only if you use the obsolete and now unsupported PassiveTeX XSL-FO engine. Related Parameters tex.math.in.alt, passivetex.extensions See Also You can also use the dbtex delims processing instruction to control whether delimiters are output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.file</String>
											</field>
											<field name="description">
												<String>Name of auxiliary file for TeX equations. This file can be processed by dvi2bitmap to get bitmap versions of equations for HTML output. Related Parameters tex.math.in.alt, tex.math.delims, More information For how-to documentation on embedding TeX equations and generating output from them, see DBTeXMath.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>tex-math-equations.tex</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.in.alt</String>
											</field>
											<field name="description">
												<String>If you want type math directly in TeX notation in equations, this parameter specifies notation used. Currently are supported two values -- plain and latex. Empty value means that you are not using TeX math at all. Preferred way for including TeX alternative of math is inside of textobject element. Eg.: &lt;inlineequation> &lt;inlinemediaobject> &lt;imageobject> &lt;imagedata fileref="eq1.gif"/> &lt;/imageobject> &lt;textobject>&lt;phrase>E=mc squared&lt;/phrase>&lt;/textobject> &lt;textobject role="tex">&lt;phrase>E=mc^2&lt;/phrase>&lt;/textobject> &lt;/inlinemediaobject> &lt;/inlineequation> If you are using graphic element, you can store TeX inside alt element: &lt;inlineequation> &lt;alt role="tex">a^2+b^2=c^2&lt;/alt> &lt;graphic fileref="a2b2c2.gif"/> &lt;/inlineequation> If you want use this feature, you should process your FO with PassiveTeX, which only supports TeX math notation. When calling stylsheet, don't forget to specify also passivetex.extensions=1. If you want equations in HTML, just process generated file tex-math-equations.tex by TeX or LaTeX. Then run dvi2bitmap program on result DVI file. You will get images for equations in your document. This feature is useful for print/PDF output only if you use the obsolete and now unsupported PassiveTeX XSL-FO engine. Related Parameters tex.math.delims, passivetex.extensions, tex.math.file</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>textdata.default.encoding</String>
											</field>
											<field name="description">
												<String>Specifies the encoding of any external text files included using textdata element. This value is used only when you do not specify encoding by the appropriate attribute directly on textdata. An empty string is interpreted as the system default encoding.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>textinsert.extension</String>
											</field>
											<field name="description">
												<String>Enables the textinsert extension element Description The textinsert extension element inserts the contents of a file into the result tree (as text). To use the textinsert extension element, you must use either Saxon or Xalan as your XSLT processor (it doesn't work with xsltproc), along with either the DocBook Saxon extensions or DocBook Xalan extensions (for more information about those extensions, see DocBook Saxon Extensions and DocBook Xalan Extensions), and you must set both the use.extensions and textinsert.extension parameters to 1. As an alternative to using the textinsert element, consider using an Xinclude element with the parse="text" attribute and value specified, as detailed in Using XInclude for text inclusions. See Also You can also use the dbhtml-include href processing instruction to insert external files — both files containing plain text and files with markup content (including HTML content). More information For how-to documentation on inserting contents of external code files and other text files into output, see External code files. For guidelines on inserting contents of HTML files into output, see Inserting external HTML code. Default value: 1</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.list.type</String>
											</field>
											<field name="description">
												<String>When an automatically generated Table of Contents (or List of Titles) is produced, this HTML element will be used to make the list.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>dl</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.max.depth</String>
											</field>
											<field name="description">
												<String>Specifies the maximal depth of TOC on all levels.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>8</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ulink.target</String>
											</field>
											<field name="description">
												<String>If ulink.target is non-zero, its value will be used for the target attribute on anchors generated for ulinks.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.embed.for.svg</String>
											</field>
											<field name="description">
												<String>If non-zero, an embed element will be created for SVG figures. An object is always created, this parameter merely controls whether or not an additional embed is generated inside the object. On the plus side, this may be more portable among browsers and plug-ins. On the minus side, it isn't valid HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.local.olink.style</String>
											</field>
											<field name="description">
												<String>When cross reference data is collected for use by olinks, the data for each potential target includes one field containing a completely assembled cross reference string, as if it were an xref generated in that document. Other fields record the separate title, number, and element name of each target. When an olink is formed to a target from another document, the olink resolves to that preassembled string by default. If the use.local.olink.style parameter is set to non-zero, then instead the cross reference string is formed again from the target title, number, and element name, using the stylesheet processing the targeting document. Then olinks will match the xref style in the targeting document rather than in the target document. If both documents are processed with the same stylesheet, then the results will be the same.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.role.as.xrefstyle</String>
											</field>
											<field name="description">
												<String>In DocBook documents that conform to a schema older than V4.3, this parameter allows role to serve the purpose of specifying the cross reference style. If non-zero, the role attribute on xref will be used to select the cross reference style. In DocBook V4.3, the xrefstyle attribute was added for this purpose. If the xrefstyle attribute is present, role will be ignored, regardless of the setting of this parameter. Example The following small stylesheet shows how to configure the stylesheets to make use of the cross reference style: &lt;?xml version="1.0"?> &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"> &lt;xsl:import href="../xsl/html/docbook.xsl"/> &lt;xsl:output method="html"/> &lt;xsl:param name="local.l10n.xml" select="document('')"/> &lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"> &lt;l:l10n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0" language="en"> &lt;l:context name="xref"> &lt;l:template name="chapter" style="title" text="Chapter %n, %t"/> &lt;l:template name="chapter" text="Chapter %n"/> &lt;/l:context> &lt;/l:l10n> &lt;/l:i18n> &lt;/xsl:stylesheet> With this stylesheet, the cross references in the following document: &lt;?xml version="1.0" encoding="utf-8"?> &lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"> &lt;book id="book">&lt;title>Book&lt;/title> &lt;preface> &lt;title>Preface&lt;/title> &lt;para>Normal: &lt;xref linkend="ch1"/>.&lt;/para> &lt;para>Title: &lt;xref xrefstyle="title" linkend="ch1"/>.&lt;/para> &lt;/preface> &lt;chapter id="ch1"> &lt;title>First Chapter&lt;/title> &lt;para>Irrelevant.&lt;/para> &lt;/chapter> &lt;/book> will appear as: Normal: Chapter 1. Title: Chapter 1, First Chapter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.role.for.mediaobject</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute on imageobjects or other objects within a mediaobject container will be used to select which object will be used. The order of selection when then parameter is non-zero is: If the stylesheet parameter preferred.mediaobject.role has a value, then the object whose role equals that value is selected. Else if an object's role attribute has a value of html for HTML processing or fo for FO output, then the first of such objects is selected. Else the first suitable object is selected. If the value of use.role.for.mediaobject is zero, then role attributes are not considered and the first suitable object with or without a role value is used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.svg</String>
											</field>
											<field name="description">
												<String>If non-zero, SVG will be considered an acceptable image format. SVG is passed through to the result tree, so correct rendering of the resulting diagram depends on the formatter (FO processor or web browser) that is used to process the output from the stylesheet.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.as.table</String>
											</field>
											<field name="description">
												<String>If non-zero, variablelists will be formatted as tables. A processing instruction exists to specify a particular width for the column containing the terms: dbhtml term-width=".25in" You can override this setting with a processing instruction as the child of variablelist: dbhtml list-presentation="table" or dbhtml list-presentation="list". This parameter only applies to the HTML transformations. In the FO case, proper list markup is robust enough to handle the formatting. But see also variablelist.as.blocks. &lt;variablelist> &lt;?dbhtml list-presentation="table"?> &lt;?dbhtml term-width="1.5in"?> &lt;?dbfo list-presentation="list"?> &lt;?dbfo term-width="1in"?> &lt;varlistentry> &lt;term>list&lt;/term> &lt;listitem> &lt;para> Formatted as a table even if variablelist.as.table is set to 0. &lt;/para> &lt;/listitem> &lt;/varlistentry> &lt;/variablelist></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.term.break.after</String>
											</field>
											<field name="description">
												<String>Set a non-zero value for the variablelist.term.break.after parameter to generate a line break between terms in a multi-term varlistentry. If you set a non-zero value for variablelist.term.break.after, you may also want to set the value of the variablelist.term.separator parameter to an empty string (to suppress rendering of the default comma and space after each term).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.term.separator</String>
											</field>
											<field name="description">
												<String>When a varlistentry contains multiple term elements, the string specified in the value of the variablelist.term.separator parameter is placed after each term except the last. To generate a line break between multiple terms in a varlistentry, set a non-zero value for the variablelist.term.break.after parameter. If you do so, you may also want to set the value of the variablelist.term.separator parameter to an empty string (to suppress rendering of the default comma and space after each term).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>, </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.copyright</String>
											</field>
											<field name="description">
												<String>The copyright note that will be added in the footer of the Table of Contents frame (the left side frame of the WebHelp output).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.custom.resources</String>
											</field>
											<field name="description">
												<String>The file path to a directory that contains resources files. All files from this directory will be copied to the root of the WebHelp output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.favicon</String>
											</field>
											<field name="description">
												<String>The file path of a small image used as favicon.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.footer.file</String>
											</field>
											<field name="description">
												<String>Path to an XML file that includes the footer content for your WebHelp output pages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.footer.include</String>
											</field>
											<field name="description">
												<String>Specifies whether or not to include footer in each WebHelp page. Possible values: yes, no. If set to no, no footer is added to the WebHelp pages. If set to yes and the webhelp.footer.file parameter has a value, then the content of that file is used as footer. If the webhelp.footer.file has no value then the default Oxygen footer is inserted in each WebHelp page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>yes</String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>writing.mode</String>
											</field>
											<field name="description">
												<String>Sets direction of text flow and text alignment based on locale. The value is normally taken from the gentext file for the lang attribute of the document's root element, using the key name 'writing-mode' to look it up in the gentext file. But the param can also be set on the command line to override that gentext value. Accepted values are: lr-tb Left-to-right text flow in each line, lines stack top to bottom. rl-tb Right-to-left text flow in each line, lines stack top to bottom. tb-rl Top-to-bottom text flow in each vertical line, lines stack right to left. Supported by only a few XSL-FO processors. Not supported in HTML output. lr Shorthand for lr-tb. rl Shorthand for rl-tb. tb Shorthand for tb-rl.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> writing-mode </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.label-page.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both label and page but no title, then the value of this parameter is inserted between label and page number in the output. If a title is included, then other separators are used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.label-title.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both label and title, then the value of this parameter is inserted between label and title in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>: </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.title-page.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both title and page number, then the value of this parameter is inserted between title and page number in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.with.number.and.title</String>
											</field>
											<field name="description">
												<String>A cross reference may include the number (for example, the number of an example or figure) and the title which is a required child of some targets. This parameter inserts both the relevant number as well as the title into the link.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
									</list>
								</field>
								<field name="jvmArgs">
									<String>-Xmx256m</String>
								</field>
								<field name="useCustomJavaHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customJavaHomeDir">
									<String></String>
								</field>
								<field name="useCustomANTHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customANTHomeDir">
									<String></String>
								</field>
								<field name="workingDir">
									<String>${cfd}</String>
								</field>
								<field name="showConsoleAlways">
									<Boolean>false</Boolean>
								</field>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook WebHelp Classic Mobile (Deprecated)</String>
								</field>
								<field name="baseURL">
									<null/>
								</field>
								<field name="footerURL">
									<null/>
								</field>
								<field name="fOPMethod">
									<null/>
								</field>
								<field name="fOProcessorName">
									<null/>
								</field>
								<field name="headerURL">
									<null/>
								</field>
								<field name="inputXSLURL">
									<null/>
								</field>
								<field name="inputXMLURL">
									<null/>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>ANT</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfd}/out/webhelp-mobile/index.html</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>false</Boolean>
								</field>
								<field name="xsltParams">
									<list/>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>ANT</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${oxygenHome}/classes/</String>
										<String>${oxygenHome}/lib/oxygen*.jar</String>
										<String>${oxygenHome}/lib/resolver.jar</String>
										<String>${oxygenHome}/lib/jing.jar</String>
										<String>${oxygenHome}/lib/xercesImpl.jar</String>
										<String>${oxygenHome}/lib/saxon.jar</String>
										<String>${oxygenHome}/lib/saxon9ee.jar</String>
										<String>${oxygenHome}/lib/xml-apis.jar</String>
										<String>${oxygenHome}/lib/xml-apis-ext.jar</String>
										<String>${oxygenHome}/lib/log4j.jar</String>
										<String>${oxygenHome}/lib/lucene-*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/com.oxygenxml.webhelp.classic/lib/xhtml-indexer.jar</String>
									</String-array>
								</field>
							</antScenario>
							<antScenario>
								<field name="additionalAntArgs">
									<String></String>
								</field>
								<field name="buildTarget">
									<String>webhelp-feedback</String>
								</field>
								<field name="buildFilePath">
									<String>${frameworkDir}/xsl/com.oxygenxml.webhelp.classic/build_docbook.xml</String>
								</field>
								<field name="ditaParams">
									<list>
										<antParameter>
											<field name="name">
												<String>admon.graphics</String>
											</field>
											<field name="description">
												<String>If value is 1 use Docbook admon graphics. If value is 0 do not use Docbook admon graphics.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension for admonition graphics. The following formats of
												    admonition graphics are supported: GIF (.gif extension), PNG (.png extension), SVG
												    (the .svg extension, TIFF (.tif extension).</String>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook admon image files.</String>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>appendix.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then appendices will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (upperalpha).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>A</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>base.dir</String>
											</field>
											<field name="description">
												<String>Base directory for output HTML files.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/webhelp-feedback/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.path</String>
											</field>
											<field name="description">
												<String>Sets the path to the directory holding the callout graphics. This location is normally relative to the output html directory. see base.dir. Always terminate the directory with / since the graphic file is appended to this string, hence needs the separator.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chapter.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then chapters will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (arabic).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.first.sections</String>
											</field>
											<field name="description">
												<String>If non-zero, a chunk will be created for the first top-level sect1 or section elements in each component. Otherwise, that section will be part of the chunk for its parent.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.section.depth</String>
											</field>
											<field name="description">
												<String>This parameter sets the depth of section chunking.</String>
											</field>
											<field name="value">
												<String>3</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.encoding</String>
											</field>
											<field name="description">
												<String>The encoding of the output XHTML files.</String>
											</field>
											<field name="value">
												<String>UTF-8</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.indent</String>
											</field>
											<field name="description">
												<String>The value of the indent specification for generated pages. Not all processors support specification of this parameter.</String>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>clean.output</String>
											</field>
											<field name="description">
												<String>If set to 'true' the output directory is removed before starting the transformation.</String>
											</field>
											<field name="value">
												<String>false</String>
											</field>
											<field name="defaultValue">
												<String>false</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>false</String>
													<String>true</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>component.label.includes.part.label</String>
											</field>
											<field name="description">
												<String>If non-zero, number labels for chapter, appendix, and other component elements are prefixed with the label of the part element that contains them. So you might see Chapter II.3 instead of Chapter 3. Also, the labels for formal elements such as table and figure will include the part label. If there is no part element container, then no prefix is generated. This feature is most useful when the label.from.part parameter is turned on. In that case, there would be more than one chapter 1, and the extra part label prefix will identify each chapter unambiguously.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>draft.mode</String>
											</field>
											<field name="description">
												<String>If Docbook draft mode is used. Possible values: yes, no.</String>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>draft.watermark.image</String>
											</field>
											<field name="description">
												<String>The image to be used for draft watermarks.</String>
											</field>
											<field name="value">
												<String>oxygen-webhelp/resources/img/draft.png</String>
											</field>
											<field name="defaultValue">
												<String>oxygen-webhelp/resources/img/draft.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.index</String>
											</field>
											<field name="description">
												<String>Specify if an index should be generated.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.section.toc.level</String>
											</field>
											<field name="description">
												<String>The generate.section.toc.level parameter controls the depth of section in which TOCs will be generated. Note that this is related to, but not the same as toc.section.depth, which controls the depth to which TOC entries will be generated in a given TOC. If, for example, generate.section.toc.level is 3, TOCs will be generated in first, second, and third level sections, but not in fourth level sections.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.source</String>
											</field>
											<field name="description">
												<String>If value if 1 the source code from programlisting elements is highlighted accoeding to source language syntax.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.xslthl.config</String>
											</field>
											<field name="description">
												<String>Path of configuration file for syntax highlight of source code from programlisting elements.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.ext</String>
											</field>
											<field name="description">
												<String>Extension of output HTML files.</String>
											</field>
											<field name="value">
												<String>.html</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>inherit.keywords</String>
											</field>
											<field name="description">
												<String>If inherit.keywords is non-zero, the keyword meta for each HTML head element will include all of the keywords from ancestor elements. Otherwise, only the keywords from the current section will be used.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>input.dir</String>
											</field>
											<field name="description">
												<String>Path of directory containing the input files.</String>
											</field>
											<field name="value">
												<String>${cfd}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.gentext.default.language</String>
											</field>
											<field name="description">
												<String>The value of the l10n.gentext.default.language parameter is used as the language for generated text if no setting is provided in the source document.</String>
											</field>
											<field name="value">
												<String>en</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manifest.in.base.dir</String>
											</field>
											<field name="description">
												<String>If non-zero, the manifest file as well as project files for HTML Help and Eclipse Help are written into base.dir instead of the current directory.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.showtitles</String>
											</field>
											<field name="description">
												<String>If non-zero, the headers and footers of chunked HTML display the titles of the next and previous chunks, along with the words 'Next' and 'Previous' (or the equivalent graphical icons if navig.graphics is true). If false (zero), then only the words 'Next' and 'Previous' (or the icons) are displayed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>output.dir</String>
											</field>
											<field name="description">
												<String>Path where the output files will be created.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/webhelp-feedback</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>para.propagates.style</String>
											</field>
											<field name="description">
												<String>If true, the role attribute of para elements will be passed through to the HTML as a class attribute on the p generated for the paragraph.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>part.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, then parts will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (upperroman).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>I</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>phrase.propagates.style</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute of phrase elements will be passed through to the HTML as a class attribute on a span that surrounds the phrase.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qandadiv.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, unlabeled qandadivs will be enumerated.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>reference.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero, references will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any non-zero value other than the above will generate the default number format (upperroman).</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>I</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>root.filename</String>
											</field>
											<field name="description">
												<String>The name of the root HTML file when chunking. The extension is added to the value of this parameter.</String>
											</field>
											<field name="value">
												<String>oxygen-main</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.autolabel</String>
											</field>
											<field name="description">
												<String>If true (non-zero), unlabeled sections will be enumerated.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.label.includes.component.label</String>
											</field>
											<field name="description">
												<String>If non-zero, section labels are prefixed with the label of the component that contains them.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.footer.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, footer navigation will be suppressed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, header and footer navigation will be suppressed.</String>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.section.depth</String>
											</field>
											<field name="description">
												<String>Specifies the depth to which recursive sections should appear in the TOC.</String>
											</field>
											<field name="value">
												<String>3</String>
											</field>
											<field name="defaultValue">
												<String>2</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.extensions</String>
											</field>
											<field name="description">
												<String>If non-zero, extensions may be used. Each extension is further controlled by its own parameter. But if use.extensions is zero, no extensions will be used.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.id.as.filename</String>
											</field>
											<field name="description">
												<String>If use.id.as.filename is non-zero, the filename of chunk elements that have IDs will be derived from the ID value.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.stemming</String>
											</field>
											<field name="description">
												<String>Controls whether or not you want to include stemming search algorithms into the published output (default setting is false).</String>
											</field>
											<field name="value">
												<String>false</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.product.id</String>
											</field>
											<field name="description">
												<String>This parameter specifies a short name for the documentation target, or product (for example, mobile-phone-user-guide, hvac-installation-guide).</String>
											</field>
											<field name="value">
												<String>${ask('Please enter the documentation product ID:', string, 'oxy-webhelp')}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.product.version</String>
											</field>
											<field name="description">
												<String>The documentation version. New comments are bound to this version. Multiple documentation versions can be deployed on the same server.</String>
											</field>
											<field name="value">
												<String>${ask('Please enter the documentation version number:', string, '1.0')}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xml.file</String>
											</field>
											<field name="description">
												<String>Path to Docbook XML file.</String>
											</field>
											<field name="value">
												<String>${cf}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.style</String>
											</field>
											<field name="description">
												<String>Specifies the value of the CSS style attribute that should be added to admonitions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.textlabel</String>
											</field>
											<field name="description">
												<String>If true (non-zero), admonitions are presented with a generated text label such as Note or Warning in the appropriate language. If zero, such labels are turned off, but any title child of the admonition element are still output. The default value is 1.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotate.toc</String>
											</field>
											<field name="description">
												<String>If true, TOCs will be annotated. At present, this just means that the refpurpose of refentry TOC entries will be displayed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.css</String>
											</field>
											<field name="description">
												<String>If annotation.support is enabled and the document contains annotations, then the CSS in this parameter will be included in the document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> /* ====================================================================== Annotations */ div.annotation-list { visibility: hidden; } div.annotation-nocss { position: absolute; visibility: hidden; } div.annotation-popup
													{ position: absolute; z-index: 4; visibility: hidden; padding: 0px; margin: 2px; border-style: solid; border-width: 1px; width: 200px; background-color: white; } div.annotation-title { padding: 1px; font-weight: bold;
													border-bottom-style: solid; border-bottom-width: 1px; color: white; background-color: black; } div.annotation-body { padding: 2px; } div.annotation-body p { margin-top: 0px; padding-top: 0px; } div.annotation-close {
													position: absolute; top: 2px; right: 2px; } </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.graphic.close</String>
											</field>
											<field name="description">
												<String>annotation.graphic.close uri annotation.graphic.close Image for identifying a link that closes an annotation popup Description This image is used on popup annotations as the “x�? that the user can click to dismiss the popup. This image is used on popup annotations as the “x�? that the user can click to dismiss the popup. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels. Default value: http://docbook.sourceforge.net/release/images/annot-close.png</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> http://docbook.sourceforge.net/release/images/annot-close.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.graphic.open</String>
											</field>
											<field name="description">
												<String>This image is used inline to identify the location of annotations. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>http://docbook.sourceforge.net/release/images/annot-open.png</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.js</String>
											</field>
											<field name="description">
												<String>If annotation.support is enabled and the document contains annotations, then the URIs listed in this parameter will be included. These JavaScript files are required for popup annotation support.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> http://docbook.sourceforge.net/release/script/AnchorPosition.js http://docbook.sourceforge.net/release/script/PopupWindow.js</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>annotation.support</String>
											</field>
											<field name="description">
												<String>If non-zero, the stylesheets will attempt to support annotation elements in HTML by including some JavaScript (see annotation.js).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>author.othername.in.middle</String>
											</field>
											<field name="description">
												<String>If non-zero, the othername of an author appears between the firstname and surname. Otherwise, othername is suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>autotoc.label.in.hyperlink</String>
											</field>
											<field name="description">
												<String>If the value of autotoc.label.in.hyperlink is non-zero, labels are included in hyperlinked titles in the TOC. If it is instead zero, labels are still displayed prior to the hyperlinked titles, but are not hyperlinked along with the titles.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>autotoc.label.separator</String>
											</field>
											<field name="description">
												<String>String used to separate labels and titles in a table of contents.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>. </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>biblioentry.item.separator</String>
											</field>
											<field name="description">
												<String>Text to separate bibliography entries</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>. </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.collection</String>
											</field>
											<field name="description">
												<String>Maintaining bibliography entries across a set of documents is tedious, time consuming, and error prone. It makes much more sense, usually, to store all of the bibliography entries in a single place and simply extract the ones you need in each document. That's the purpose of the bibliography.collection parameter. To setup a global bibliography database, follow these steps: First, create a stand-alone bibliography document that contains all of the documents that you wish to reference. Make sure that each bibliography entry (whether you use biblioentry or bibliomixed) has an ID. My global bibliography, ~/bibliography.xml begins like this: &lt;!DOCTYPE bibliography PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"> &lt;bibliography>&lt;title>References&lt;/title> &lt;bibliomixed id="xml-rec">&lt;abbrev>XML 1.0&lt;/abbrev>Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors. &lt;citetitle>&lt;ulink url="http://www.w3.org/TR/REC-xml">Extensible Markup Language (XML) 1.0 Second Edition&lt;/ulink>&lt;/citetitle>. World Wide Web Consortium, 2000. &lt;/bibliomixed> &lt;bibliomixed id="xml-names">&lt;abbrev>Namespaces&lt;/abbrev>Tim Bray, Dave Hollander, and Andrew Layman, editors. &lt;citetitle>&lt;ulink url="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML&lt;/ulink>&lt;/citetitle>. World Wide Web Consortium, 1999. &lt;/bibliomixed> &lt;!-- ... --> &lt;/bibliography> When you create a bibliography in your document, simply provide empty bibliomixed entries for each document that you wish to cite. Make sure that these elements have the same ID as the corresponding real entry in your global bibliography. For example: &lt;bibliography>&lt;title>Bibliography&lt;/title> &lt;bibliomixed id="xml-rec"/> &lt;bibliomixed id="xml-names"/> &lt;bibliomixed id="DKnuth86">Donald E. Knuth. &lt;citetitle>Computers and Typesetting: Volume B, TeX: The Program&lt;/citetitle>. Addison-Wesley, 1986. ISBN 0-201-13437-3. &lt;/bibliomixed> &lt;bibliomixed id="relaxng"/> &lt;/bibliography> Note that it's perfectly acceptable to mix entries from your global bibliography with normal entries. You can use xref or other elements to cross-reference your bibliography entries in exactly the same way you do now. Finally, when you are ready to format your document, simply set the bibliography.collection parameter (in either a customization layer or directly through your processor's interface) to point to your global bibliography. A relative path in the parameter is interpreted in one of two ways: If your document contains no links to empty bibliographic elements, then the path is relative to the file containing the first bibliomixed element in the document. If your document does contain links to empty bibliographic elements, then the path is relative to the file containing the first such link element in the document. Once the collection file is opened by the first instance described above, it stays open for the current document and the relative path is not reinterpreted again. The stylesheets will format the bibliography in your document as if all of the entries referenced appeared there literally.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>http://docbook.sourceforge.net/release/bibliography/bibliography.xml</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.numbered</String>
											</field>
											<field name="description">
												<String>If non-zero bibliography entries will be numbered</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bibliography.style</String>
											</field>
											<field name="description">
												<String>Currently only normal and iso690 styles are supported. In order to use ISO690 style to the full extent you might need to use additional markup described on the following WiKi page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>normal</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>blurb.on.titlepage.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, output from authorblurb and personblurb elements is displayed on title pages. If zero (the default), output from those elements is suppressed on title pages (unless you are using a titlepage customization that causes them to be included).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>bridgehead.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, bridgeheads appear in the TOC. Note that this option is not fully supported and may be removed in a future version of the stylesheets.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.defaultcolumn</String>
											</field>
											<field name="description">
												<String>If a callout does not identify a column (for example, if it uses the linerange unit), it will appear in the default column.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>60</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics</String>
											</field>
											<field name="description">
												<String>If non-zero, callouts are presented with graphics (e.g., reverse-video circled numbers instead of "(1)", "(2)", etc.). Default graphics are provided in the distribution.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension to use on callout graphics. The Docbook XSL distribution provides callout graphics in the following formats: SVG (extension: .svg) PNG (extension: .png) GIF (extension: .gif)</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.png</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.number.limit</String>
											</field>
											<field name="description">
												<String>If callout.graphics is non-zero, graphics are used to represent callout numbers instead of plain text. The value of callout.graphics.number.limit is the largest number for which a graphic exists. If the callout number exceeds this limit, the default presentation "(plain text instead of a graphic)" will be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>15</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.list.table</String>
											</field>
											<field name="description">
												<String>The default presentation of calloutlists uses an HTML DL element. Some browsers don't align DLs very well if callout.graphics is used. With this option turned on, calloutlists are presented in an HTML TABLE, which usually results in better alignment of the callout number with the callout description.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode</String>
											</field>
											<field name="description">
												<String>The stylesheets can use either an image of the numbers one to ten, or the single Unicode character which represents the numeral, in white on a black background. Use this to select the Unicode character option.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode.number.limit</String>
											</field>
											<field name="description">
												<String>If callout.unicode is non-zero, unicode characters are used to represent callout numbers. The value of callout.unicode.number.limit is the largest number for which a unicode character exists. If the callout number exceeds this limit, the default presentation "(nnn)" will always be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.unicode.start.character</String>
											</field>
											<field name="description">
												<String>If callout.graphics is zero and callout.unicode is non-zero, unicode characters are used to represent callout numbers. The value of callout.unicode.start.character is the decimal unicode value used for callout number one. Currently, only values 9312 and 10102 are supported in the stylesheets for this parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10102</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callouts.extension</String>
											</field>
											<field name="description">
												<String>The callouts extension processes areaset elements in programlistingco and other text-based callout elements.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.append</String>
											</field>
											<field name="description">
												<String>Specifies content to append to the end of HTML files output by the html/chunk.xsl stylesheet, after the closing &lt;html> tag. You probably don't want to set any value for this parameter; but if you do, the only value it should ever be set to is a newline character: &amp;#x0a; or &amp;#10;</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.quietly</String>
											</field>
											<field name="description">
												<String>If zero (the default), the XSL processor emits a message naming each separate chunk filename as it is being output. If nonzero, then the messages are suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.separate.lots</String>
											</field>
											<field name="description">
												<String>If non-zero, each of the ToC and LoTs (List of Examples, List of Figures, etc.) will be put in its own separate chunk. The title page includes generated links to each of the separate files. This feature depends on the chunk.tocs.and.lots parameter also being non-zero.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.toc</String>
											</field>
											<field name="description">
												<String>The chunk.toc identifies an explicit TOC that will be used for chunking. This parameter is only used by the chunktoc.xsl stylesheet (and customization layers built from it).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.tocs.and.lots</String>
											</field>
											<field name="description">
												<String>If non-zero, ToC and LoT (List of Examples, List of Figures, etc.) will be put in a separate chunk. At the moment, this chunk is not in the normal forward/backward navigation list. Instead, a new link is added to the navigation footer. This feature is still somewhat experimental. Feedback welcome.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunk.tocs.and.lots.has.title</String>
											</field>
											<field name="description">
												<String>If non-zero title of document is shown before ToC/LoT in separate chunk.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunked.filename.prefix</String>
											</field>
											<field name="description">
												<String>If specified, the chunked.filename.prefix parameter specifies a prefix string to add to each generated chunk filename. For example: &lt;xsl:param name="chunked.filename.prefix">admin-&lt;xsl:param> will produce chunked filenames like: admin-index.html admin-ch01.html admin-ch01s01.html ... Trying to use the base.dir parameter to add a string prefix (by omitting the trailing slash) no longer works (it never worked completely anyway). That parameter value should contain only a directory path, and now gets a trailing slash appended if it was omitted from the param.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>citerefentry.link</String>
											</field>
											<field name="description">
												<String>If non-zero, a web link will be generated, presumably to an online man->HTML gateway. The text of the link is generated by the generate.citerefentry.link template.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>collect.xref.targets</String>
											</field>
											<field name="description">
												<String>In order to resolve olinks efficiently, the stylesheets can generate an external data file containing information about all potential cross reference endpoints in a document. This parameter determines whether the collection process is run when the document is processed by the stylesheet. The default value is no, which means the data file is not generated during processing. The other choices are yes, which means the data file is created and the document is processed for output, and only, which means the data file is created but the document is not processed for output. See also targets.filename.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>contrib.inline.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero (the default), output of the contrib element is displayed as inline content rather than as block content.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>css.decoration</String>
											</field>
											<field name="description">
												<String>If non-zero, then html elements produced by the stylesheet may be decorated with style attributes. For example, the li tags produced for list items may include a fragment of CSS in the style attribute which sets the CSS property "list-style-type".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>current.docid</String>
											</field>
											<field name="description">
												<String>When olinks between documents are resolved for HTML output, the stylesheet can compute the relative path between the current document and the target document. The stylesheet needs to know the targetdoc identifiers for both documents, as they appear in the target.database.document database file. This parameter passes to the stylesheet the targetdoc identifier of the current document, since that identifier does not appear in the document itself. This parameter can also be used for print output. If an olink's targetdoc id differs from the current.docid, then the stylesheet can append the target document's title to the generated olink text. That identifies to the reader that the link is to a different document, not the current document. See also olink.doctitle to enable that feature.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>custom.css.source</String>
											</field>
											<field name="description">
												<String>The custom.css.source parameter enables you to add CSS styles to DocBook's HTML output. The parameter specifies the name of a file containing custom CSS styles. The file must be a well-formed XML file that consists of a single style root element that contains CSS styles as its text content. For example: &lt;?xml version="1.0"?> &lt;style> h2 { font-weight: bold; color: blue; } ... &lt;/style> The filename specified by the parameter should have a .xml filename suffix, although that is not required. The default value of this parameter is blank. If custom.css.source is not blank, then the stylesheet takes the following actions. These actions take place regardless of the value of the make.clean.html parameter. The stylesheet uses the XSLT document() function to open the file specified by the parameter and load it into a variable. The stylesheet forms an output pathname consisting of the value of the base.dir parameter (if it is set) and the value of custom.css.source, with the .xml suffix stripped off. The stylesheet removes the style wrapper element and writes just the CSS text content to the output file. The stylesheet adds a link element to the HTML HEAD element to reference this external CSS stylesheet. For example: &lt;link rel="stylesheet" href="custom.css" type="text/css"> If the make.clean.html parameter is nonzero (the default is zero), and if the docbook.css.source parameter is not blank (the default is not blank), then the stylesheet will also generate a default CSS file and add a link tag to reference it. The link to the custom CSS comes after the link to the default, so it should cascade properly in most browsers. If you do not want two link tags, and instead want your custom CSS to import the default generated CSS file, then do the following: Add a line like the following to your custom CSS source file: @import url("docbook.css") Set the docbook.css.link parameter to zero. This will omit the link tag that references the default CSS file. If you set make.clean.html to nonzero but you do not want the default CSS generated, then also set the docbook.css.source parameter to blank. Then no default CSS will be generated, and so all CSS styles must come from your custom CSS file. You can use the generate.css.header parameter to instead write the CSS to each HTML HEAD element in a style tag instead of an external CSS file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.float.class</String>
											</field>
											<field name="description">
												<String>Selects the direction in which a float should be placed. for xsl-fo this is before, for html it is left. For Western texts, the before direction is the top of the page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> left before </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.image.width</String>
											</field>
											<field name="description">
												<String>If specified, this value will be used for the width attribute on images that do not specify any viewport dimensions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.table.frame</String>
											</field>
											<field name="description">
												<String>This value will be used when there is no frame attribute on the table.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>all</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>default.table.width</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used for the width attribute on tables that do not specify an alternate width (with the dbhtml table-width or dbfo table-width processing instruction).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>docbook.css.link</String>
											</field>
											<field name="description">
												<String>The stylesheets are capable of generating a default CSS stylesheet file. The parameters make.clean.html and docbook.css.source control that feature. Normally if a default CSS file is generated, then the stylesheet inserts a link tag in the HTML HEAD element to reference it. However, you can omit that link reference if you set the docbook.css.link to zero (1 is the default). This parameter is useful when you want to import the default CSS into a custom CSS file generated using the custom.css.source parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>docbook.css.source</String>
											</field>
											<field name="description">
												<String>The docbook.css.source parameter specifies the name of the file containing the default DocBook CSS styles. Those styles are necessary when the make.clean.html parameter is nonzero. The file is a well-formed XML file that must consist of a single style root element that contains CSS styles as its text content. The default value of the parameter (and filename) is docbook.css.xml. The stylesheets ship with the default file. You can substitute your own and specify its path in this parameter. If docbook.css.source is not blank, and make.clean.html is nonzero, then the stylesheet takes the following actions: The stylesheet uses the XSLT document() function to open the file specified by the parameter and load it into a variable. The stylesheet forms an output pathname consisting of the value of the base.dir parameter (if it is set) and the value of docbook.css.source, with the .xml suffix stripped off. The stylesheet removes the style wrapper element and writes just the CSS text content to the output file. The stylesheet adds a link element to the HTML HEAD element to reference the external CSS stylesheet. For example: &lt;link rel="stylesheet" href="docbook.css" type="text/css"> However, if the docbook.css.link parameter is set to zero, then no link is written for the default CSS file. That is useful if a custom CSS file will import the default CSS stylesheet to ensure proper cascading of styles. If the docbook.css.source parameter is changed from its default docbook.css.xml to blank, then no default CSS is generated. Likewise if the make.clean.html parameter is set to zero, then no default CSS is generated. The custom.css.source parameter can be used instead to generate a complete custom CSS file. You can use the generate.css.header parameter to instead write the CSS to each HTML HEAD element in a style tag instead of an external CSS file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>docbook.css.xml</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.assignment</String>
											</field>
											<field name="description">
												<String>The ebnf.assignment parameter determines what text is used to show assignment in productions in productionsets. While ::= is common, so are several other operators.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> ::= </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.statement.terminator</String>
											</field>
											<field name="description">
												<String>The ebnf.statement.terminator parameter determines what text is used to terminate each production in productionset. Some notations end each statement with a period.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.table.bgcolor</String>
											</field>
											<field name="description">
												<String>Sets the background color for EBNF tables (a pale brown). No bgcolor attribute is output if ebnf.table.bgcolor is set to the null string.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>#F5DCB3</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ebnf.table.border</String>
											</field>
											<field name="description">
												<String>Selects the border on EBNF tables. If non-zero, the tables have borders, otherwise they don't.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>editedby.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, a localized Edited by heading is displayed above editor names in output of the editor element.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>email.delimiters.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, delimiters For delimiters, the stylesheets are currently hard-coded to output angle brackets. are generated around e-mail addresses (the output of the email element).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>emphasis.propagates.style</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute of emphasis elements will be passed through to the HTML as a class attribute on a span that surrounds the emphasis.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>entry.propagates.style</String>
											</field>
											<field name="description">
												<String>If true, the role attribute of entry elements will be passed through to the HTML as a class attribute on the td or th generated for the table cell.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>exsl.node.set.available</String>
											</field>
											<field name="description">
												<String>If non-zero, then the exsl:node-set() function is available to be used in the stylesheet. If zero, then the function is not available. This param automatically detects the presence of the function and does not normally need to be set manually. This param was created to handle a long-standing bug in the Xalan processor that fails to detect the function even though it is available.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> 1 0 </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>firstterm.only.link</String>
											</field>
											<field name="description">
												<String>If non-zero, only firstterms will be automatically linked to the glossary. If glossary linking is not enabled, this parameter has no effect.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footer.rule</String>
											</field>
											<field name="description">
												<String>If non-zero, a rule will be drawn above the page footers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footnote.number.format</String>
											</field>
											<field name="description">
												<String>The footnote.number.format specifies the format to use for footnote numeration (1, i, I, a, or A).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>footnote.number.symbols</String>
											</field>
											<field name="description">
												<String>If footnote.number.symbols is not the empty string, footnotes will use the characters it contains as footnote symbols. For example, *&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720; will identify footnotes with *, †, ‡,◊, and ✠. If there are more footnotes than symbols, the stylesheets will fall back to numbered footnotes using footnote.number.format. The use of symbols for footnotes depends on the ability of your processor (or browser) to render the symbols you select. Not all systems are capable of displaying the full range of Unicode characters. If the quoted characters in the preceding paragraph are not displayed properly, that's a good indicator that you may have trouble using those symbols for footnotes.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>formal.procedures</String>
											</field>
											<field name="description">
												<String>Formal procedures are numbered and always have a title.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>formal.title.placement</String>
											</field>
											<field name="description">
												<String>Specifies where formal object titles should occur. For each formal object type (figure, example, equation, table, and procedure) you can specify either the keyword before or after.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> figure before example before equation before table before procedure before task before </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>funcsynopsis.decoration</String>
											</field>
											<field name="description">
												<String>If non-zero, elements of the funcsynopsis will be decorated (e.g. rendered as bold or italic text). The decoration is controlled by templates that can be redefined in a customization layer.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>funcsynopsis.style</String>
											</field>
											<field name="description">
												<String>If funcsynopsis.style is ansi, ANSI-style function synopses are generated for a funcsynopsis, otherwise K&amp;R-style function synopses are generated.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>kr</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>function.parens</String>
											</field>
											<field name="description">
												<String>If non-zero, the formatting of a function element will include generated parentheses.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.consistent.ids</String>
											</field>
											<field name="description">
												<String>When the stylesheet assigns an id value to an output element, the generate-id() function may be used. That function may not produce consistent values between runs. Version control systems may misidentify the changing id values as changes to the document. If you set this parameter's value to 1, then the template named object.id will replace the use of the function generate-id() with &lt;xsl:number level="multiple" count="*"/>. This counts preceding elements to generate a unique number for the id value. This param does not associate permanent unique id values with particular elements. The id values are consistent only as long as the document structure does not change. If the document structure changes, then the counting of elements changes, and all id values after the first such change may be different, even when there is no change to the element itself or its output. The default value of this parameter is zero, so generate-id() is used by default.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.css.header</String>
											</field>
											<field name="description">
												<String>The stylesheets are capable of generating both default and custom CSS stylesheet files. The parameters make.clean.html, docbook.css.source, and custom.css.source control that feature. If you require that CSS styles reside in the HTML HEAD element instead of external CSS files, then set the generate.css.header parameter to nonzero (it is zero by default). Then instead of generating the CSS in external files, they are wrapped in style elements in the HEAD element of each HTML output file.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.id.attributes</String>
											</field>
											<field name="description">
												<String>If non-zero, the HTML stylesheet will generate ID attributes on containers. For example, the markup: &lt;section id="foo">&lt;title>Some Title&lt;/title> &lt;para>Some para.&lt;/para> &lt;/section> might produce: &lt;div class="section" id="foo"> &lt;h2>Some Title&lt;/h2> &lt;p>Some para.&lt;/p> &lt;/div> The alternative is to generate anchors: &lt;div class="section"> &lt;h2>&lt;a name="foo">&lt;/a>Some Title&lt;/h2> &lt;p>Some para.&lt;/p> &lt;/div> Because the name attribute of the a element and the id attribute of other tags are both of type ID, producing both generates invalid documents. As of version 1.50, you can use this switch to control which type of identifier is generated. For backwards-compatibility, generating a anchors is preferred. Note: at present, this switch is incompletely implemented. Disabling ID attributes will suppress them, but enabling ID attributes will not suppress the anchors.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.legalnotice.link</String>
											</field>
											<field name="description">
												<String>If the value of generate.legalnotice.link is non-zero, the stylesheet: writes the contents of legalnotice to a separate HTML file inserts a hyperlink to the legalnotice file adds (in the HTML head) either a single link or element or multiple link elements (depending on the value of the html.head.legalnotice.link.multiple parameter), with the value or values derived from the html.head.legalnotice.link.types parameter Otherwise, if generate.legalnotice.link is zero, legalnotice contents are rendered on the title page. The name of the separate HTML file is computed as follows: If a filename is given by the dbhtml filename processing instruction, that filename is used. If the legalnotice has an id/xml:id attribute, and if use.id.as.filename != 0, the filename is the concatenation of the id value and the value of the html.ext parameter. If the legalnotice does not have an id/xml:id attribute, or if use.id.as.filename = 0, the filename is the concatenation of "ln-", auto-generated id value, and html.ext value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.manifest</String>
											</field>
											<field name="description">
												<String>If non-zero, a list of HTML files generated by the stylesheet transformation is written to the file named by the manifest parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.meta.abstract</String>
											</field>
											<field name="description">
												<String>If non-zero, document abstracts will be reproduced in the HTML head, with >meta name="description" content="..."</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.revhistory.link</String>
											</field>
											<field name="description">
												<String>If non-zero, the contents of revhistory are written to a separate HTML file and a link to the file is generated. Otherwise, revhistory contents are rendered on the title page. The name of the separate HTML file is computed as follows: If a filename is given by the dbhtml filename processing instruction, that filename is used. If the revhistory has an id/xml:id attribute, and if use.id.as.filename != 0, the filename is the concatenation of the id value and the value of the html.ext parameter. If the revhistory does not have an id/xml:id attribute, or if use.id.as.filename = 0, the filename is the concatenation of "rh-", auto-generated id value, and html.ext value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>generate.toc</String>
											</field>
											<field name="description">
												<String>This parameter has a structured value. It is a table of space-delimited path/value pairs. Each path identifies some element in the source document using a restricted subset of XPath (only the implicit child axis, no wildcards, no predicates). Paths can be either relative or absolute. When processing a particular element, the stylesheets consult this table to determine if a ToC (or LoT(s)) should be generated. For example, consider the entry: book toc,figure This indicates that whenever a book is formatted, a Table Of Contents and a List of Figures should be generated. Similarly, /chapter toc indicates that whenever a document that has a root of chapter is formatted, a Table of Contents should be generated. The entry chapter would match all chapters, but /chapter matches only chapter document elements. Generally, the longest match wins. So, for example, if you want to distinguish articles in books from articles in parts, you could use these two entries: book/article toc,figure part/article toc Note that an article in a part can never match a book/article, so if you want nothing to be generated for articles in parts, you can simply leave that rule out. If you want to leave the rule in, to make it explicit that you're turning something off, use the value nop. For example, the following entry disables ToCs and LoTs for articles: article nop Do not simply leave the word article in the file without a matching value. That'd be just begging the silly little path/value parser to get confused. Section ToCs are further controlled by the generate.section.toc.level parameter. For a given section level to have a ToC, it must have both an entry in generate.toc and be within the range enabled by generate.section.toc.level.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> appendix toc,title article/appendix nop article toc,title book toc,title,figure,table,example,equation chapter toc,title part toc,title preface toc,title qandadiv toc qandaset toc reference toc,title sect1 toc sect2 toc
													sect3 toc sect4 toc sect5 toc section toc set toc,title </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossary.collection</String>
											</field>
											<field name="description">
												<String>Glossaries maintained independently across a set of documents are likely to become inconsistent unless considerable effort is expended to keep them in sync. It makes much more sense, usually, to store all of the glossary entries in a single place and simply extract the ones you need in each document. That's the purpose of the glossary.collection parameter. To setup a global glossary database, follow these steps: Setting Up the Glossary Database First, create a stand-alone glossary document that contains all of the entries that you wish to reference. Make sure that each glossary entry has an ID. Here's an example glossary: &lt;?xml version="1.0" encoding="utf-8"?> &lt;!DOCTYPE glossary PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"> &lt;glossary> &lt;glossaryinfo> &lt;editor>&lt;firstname>Eric&lt;/firstname>&lt;surname>Raymond&lt;/surname>&lt;/editor> &lt;title>Jargon File 4.2.3 (abridged)&lt;/title> &lt;releaseinfo>Just some test data&lt;/releaseinfo> &lt;/glossaryinfo> &lt;glossdiv>&lt;title>0&lt;/title> &lt;glossentry> &lt;glossterm>0&lt;/glossterm> &lt;glossdef> &lt;para>Numeric zero, as opposed to the letter `O' (the 15th letter of the English alphabet). In their unmodified forms they look a lot alike, and various kluges invented to make them visually distinct have compounded the confusion. If your zero is center-dotted and letter-O is not, or if letter-O looks almost rectangular but zero looks more like an American football stood on end (or the reverse), you're probably looking at a modern character display (though the dotted zero seems to have originated as an option on IBM 3270 controllers). If your zero is slashed but letter-O is not, you're probably looking at an old-style ASCII graphic set descended from the default typewheel on the venerable ASR-33 Teletype (Scandinavians, for whom /O is a letter, curse this arrangement). (Interestingly, the slashed zero long predates computers; Florian Cajori's monumental "A History of Mathematical Notations" notes that it was used in the twelfth and thirteenth centuries.) If letter-O has a slash across it and the zero does not, your display is tuned for a very old convention used at IBM and a few other early mainframe makers (Scandinavians curse &lt;emphasis>this&lt;/emphasis> arrangement even more, because it means two of their letters collide). Some Burroughs/Unisys equipment displays a zero with a &lt;emphasis>reversed&lt;/emphasis> slash. Old CDC computers rendered letter O as an unbroken oval and 0 as an oval broken at upper right and lower left. And yet another convention common on early line printers left zero unornamented but added a tail or hook to the letter-O so that it resembled an inverted Q or cursive capital letter-O (this was endorsed by a draft ANSI standard for how to draw ASCII characters, but the final standard changed the distinguisher to a tick-mark in the upper-left corner). Are we sufficiently confused yet?&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;glossentry> &lt;glossterm>1TBS&lt;/glossterm> &lt;glossdef> &lt;para role="accidence"> &lt;phrase role="pronounce">&lt;/phrase> &lt;phrase role="partsofspeach">n&lt;/phrase> &lt;/para> &lt;para>The "One True Brace Style"&lt;/para> &lt;glossseealso>indent style&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> &lt;!-- ... --> &lt;/glossdiv> &lt;!-- ... --> &lt;/glossary> Marking Up Glossary Terms That takes care of the glossary database, now you have to get the entries into your document. Unlike bibliography entries, which can be empty, creating placeholder glossary entries would be very tedious. So instead, support for glossary.collection relies on implicit linking. In your source document, simply use firstterm and glossterm to identify the terms you wish to have included in the glossary. The stylesheets assume that you will either set the baseform attribute correctly, or that the content of the element exactly matches a term in your glossary. If you're using a glossary.collection, don't make explicit links on the terms in your document. So, in your document, you might write things like this: &lt;para>This is dummy text, without any real meaning. The point is simply to reference glossary terms like &lt;glossterm>0&lt;/glossterm> and the &lt;firstterm baseform="1TBS">One True Brace Style (1TBS)&lt;/firstterm>. The &lt;glossterm>1TBS&lt;/glossterm>, as you can probably imagine, is a nearly religious issue.&lt;/para> If you set the firstterm.only.link parameter, only the terms marked with firstterm will be links. Otherwise, all the terms will be linked. Marking Up the Glossary The glossary itself has to be identified for the stylesheets. For lack of a better choice, the role is used. To identify the glossary as the target for automatic processing, set the role to auto. The title of this glossary (and any other information from the glossaryinfo that's rendered by your stylesheet) will be displayed, but the entries will come from the database. Unfortunately, the glossary can't be empty, so you must put in at least one glossentry. The content of this entry is irrelevant, it will not be rendered: &lt;glossary role="auto"> &lt;glossentry> &lt;glossterm>Irrelevant&lt;/glossterm> &lt;glossdef> &lt;para>If you can see this, the document was processed incorrectly. Use the &lt;parameter>glossary.collection&lt;/parameter> parameter.&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;/glossary> What about glossary divisions? If your glossary database has glossary divisions and your automatic glossary contains at least one glossdiv, the automic glossary will have divisions. If the glossdiv is missing from either location, no divisions will be rendered. Glossary entries (and divisions, if appropriate) in the glossary will occur in precisely the order they occur in your database. Formatting the Document Finally, when you are ready to format your document, simply set the glossary.collection parameter (in either a customization layer or directly through your processor's interface) to point to your global glossary. A relative path in the parameter is interpreted in one of two ways: If the parameter glossterm.auto.link is set to zero, then the path is relative to the file containing the empty glossary element in the document. If the parameter glossterm.auto.link is set to non-zero, then the path is relative to the file containing the first inline glossterm or firstterm in the document to be linked. Once the collection file is opened by the first instance described above, it stays open for the current document and the relative path is not reinterpreted again. The stylesheets will format the glossary in your document as if all of the entries implicilty referenced appeared there literally. Limitations Glossary cross-references within the glossary are not supported. For example, this will not work: &lt;glossentry> &lt;glossterm>gloss-1&lt;/glossterm> &lt;glossdef>&lt;para>A description that references &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/para> &lt;glossseealso>gloss-2&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> If you put glossary cross-references in your glossary that way, you'll get the cryptic error: Warning: glossary.collection specified, but there are 0 automatic glossaries. Instead, you must do two things: Markup your glossary using glossseealso: &lt;glossentry> &lt;glossterm>gloss-1&lt;/glossterm> &lt;glossdef>&lt;para>A description that references &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/para> &lt;glossseealso>gloss-2&lt;/glossseealso> &lt;/glossdef> &lt;/glossentry> Make sure there is at least one glossterm reference to gloss-2 in your document. The easiest way to do that is probably within a remark in your automatic glossary: &lt;glossary role="auto"> &lt;remark>Make sure there's a reference to &lt;glossterm>gloss-2&lt;/glossterm>.&lt;/remark> &lt;glossentry> &lt;glossterm>Irrelevant&lt;/glossterm> &lt;glossdef> &lt;para>If you can see this, the document was processed incorrectly. Use the &lt;parameter>glossary.collection&lt;/parameter> parameter.&lt;/para> &lt;/glossdef> &lt;/glossentry> &lt;/glossary></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossary.sort</String>
											</field>
											<field name="description">
												<String>If non-zero, then the glossentry elements within a glossary, glossdiv, or glosslist are sorted on the glossterm, using the current lang setting. If zero (the default), then glossentry elements are not sorted and are presented in document order.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossentry.show.acronym</String>
											</field>
											<field name="description">
												<String>A setting of yes means they should be displayed; no means they shouldn't. If primary is used, then they are shown as the primary text for the entry. This setting controls both acronym and abbrev elements in the glossentry.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>glossterm.auto.link</String>
											</field>
											<field name="description">
												<String>If non-zero, links from inline glossterms to the corresponding glossentry elements in a glossary or glosslist will be automatically generated. This is useful when your glossterms are consistent and you don't want to add links manually. The automatic link generation feature is not used on glossterm elements that have a linkend attribute.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphic.default.extension</String>
											</field>
											<field name="description">
												<String>If a graphic or mediaobject includes a reference to a filename that does not include an extension, and the format attribute is unspecified, the default extension will be used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphicsize.extension</String>
											</field>
											<field name="description">
												<String>If non-zero (and if use.extensions is non-zero and if you're using a processor that supports extension functions), the getWidth and getDepth functions will be used to extract image sizes from graphics. The main supported image formats are GIF, JPEG, and PNG. Somewhat cruder support for EPS and PDF images is also available.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>graphicsize.use.img.src.path</String>
											</field>
											<field name="description">
												<String>If non-zero img.src.path parameter will be appended before filenames passed to extension functions for measuring image dimensions.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>header.rule</String>
											</field>
											<field name="description">
												<String>If non-zero, a rule will be drawn below the page headers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>highlight.default.language</String>
											</field>
											<field name="description">
												<String>This language is used when there is no language attribute on programlisting.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.append</String>
											</field>
											<field name="description">
												<String>Specifies content to append to the end of HTML files output by the html/docbook.xsl stylesheet, after the closing &lt;html> tag. You probably don't want to set any value for this parameter; but if you do, the only value it should ever be set to is a newline character: &amp;#x0a; or &amp;#10;</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.base</String>
											</field>
											<field name="description">
												<String>If html.base is set, it is used for the base element in the head of the html documents. The parameter specifies the base URL for all relative URLs in the document. This is useful for dynamically served html where the base URI needs to be shifted.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cellpadding</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used as the default cellpadding value in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or 5%</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cellspacing</String>
											</field>
											<field name="description">
												<String>If non-zero, this value will be used as the default cellspacing value in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or 5%</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.cleanup</String>
											</field>
											<field name="description">
												<String>If non-zero, and if the EXSLT extensions are supported by your processor, the resulting HTML will be cleaned up. This improves the chances that the resulting HTML will be valid. It may also improve the formatting of some elements. This parameter is different from make.valid.html because it uses extension functions to manipulate result-tree-fragments.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.extra.head.links</String>
											</field>
											<field name="description">
												<String>If non-zero, extra link elements will be generated in the head of chunked HTML files. These extra links point to chapters, appendixes, sections, etc. as supported by the Site Navigation Bar in Mozilla 1.0 (as of CR1, at least).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.head.legalnotice.link.multiple</String>
											</field>
											<field name="description">
												<String>If html.head.legalnotice.link.multiple is non-zero and the value of html.head.legalnotice.link.types contains multiple link types, then the stylesheet generates (in the head section of the HTML source) one link element for each link type specified. For example, if the value of html.head.legalnotice.link.types is "copyright license": &lt;link rel="copyright" href="ln-id2524073.html" title="Legal Notice"> &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice"> Otherwise, the stylesheet generates generates a single link instance; for example: &lt;link rel="copyright license" href="ln-id2524073.html" title="Legal Notice">. Default value: 1</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.head.legalnotice.link.types</String>
											</field>
											<field name="description">
												<String>The value of html.head.legalnotice.link.types is a space-separated list of link types, as described in Section 6.12 of the HTML 4.01 specification. If the value of the generate.legalnotice.link parameter is non-zero, then the stylesheet generates (in the head section of the HTML source) either a single HTML link element or, if the value of the html.head.legalnotice.link.multiple is non-zero, one link element for each link type specified. Each link has the following attributes: a rel attribute whose value is derived from the value of html.head.legalnotice.link.types an href attribute whose value is set to the URL of the file containing the legalnotice a title attribute whose value is set to the title of the corresponding legalnotice (or a title programatically determined by the stylesheet). For example: &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice">. In an ideal world, the default value of html.head.legalnotice.link.types would probably be "license", since the content of the DocBook legalnotice is typically license information, not copyright information. However, the default value is "copyright" for pragmatic reasons: because that's among the set of "recognized link types" listed in Section 6.12 of the HTML 4.01 specification, and because certain browsers and browser extensions are preconfigured to recognize that value. Default value: copyright</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>copyright</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.longdesc</String>
											</field>
											<field name="description">
												<String>If non-zero, HTML files will be created for the longdesc attribute. These files are created from the textobjects in mediaobjects and inlinemediaobject. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.longdesc.link</String>
											</field>
											<field name="description">
												<String>If non-zero, links will be created to the HTML files created for the longdesc attribute. It makes no sense to enable this option without also enabling the html.longdesc parameter. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.script</String>
											</field>
											<field name="description">
												<String>The html.script parameter is either empty (default), indicating that no script element should be generated in the html output, or it is a list of one or more script locations. Multiple script locations are space-delimited. If you need to reference a script URI that includes a space, encode it with %20. A separate html script element will be generated for each script in the order they are listed in the parameter. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.script.type</String>
											</field>
											<field name="description">
												<String>The type of script to place in the HTML script element. Specifically, the value of the script element's type attribute. The default value is text/javascript. This param is used only when the stylesheet parameter html.script is non-blank and specifies the location of a script. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>text/javascript</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet</String>
											</field>
											<field name="description">
												<String>The html.stylesheet parameter is either empty, indicating that no stylesheet link tag should be generated in the html output, or it is a list of one or more stylesheet files. Multiple stylesheets are space-delimited. If you need to reference a stylesheet URI that includes a space, encode it with %20. A separate html link element will be generated for each stylesheet in the order they are listed in the parameter. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet.type</String>
											</field>
											<field name="description">
												<String>The type of the stylesheet to place in the HTML link tag. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>text/css</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>id.warnings</String>
											</field>
											<field name="description">
												<String>If non-zero, the stylesheet will issue a warning for any element (other than the root element) which has a title but does not have an ID. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ignore.image.scaling</String>
											</field>
											<field name="description">
												<String>If non-zero, the scaling attributes on graphics and media objects are ignored. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>img.src.path</String>
											</field>
											<field name="description">
												<String>Add a path prefix to the value of the fileref attribute of graphic, inlinegraphic, and imagedata elements. The resulting compound path is used in the output as the value of the src attribute of img (HTML) or external-graphic (FO). The path given by img.src.path could be relative to the directory where the HTML/FO files are created, or it could be an absolute URI. The default value is empty. Be sure to include a trailing slash if needed. This prefix is not applied to any filerefs that start with "/" or contain "://".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.links.to.section</String>
											</field>
											<field name="description">
												<String> If zero, then an index entry in an index links directly to the location of the generated anchor that is output for the indexterm. If two identical indexterm elements exist in the same section, then both entries appear in the index with the same title but link to different locations. If non-zero, then an index entry in an index links to the section title containing the indexterm, rather than directly to the anchor output for the indexterm. Duplicate indexterm entries in the same section are dropped. The default value is 1, so index entries link to section titles by default. In both cases, the link text in an index entry is the title of the section containing the indexterm. That is because HTML does not have numbered pages. It also provides the reader with context information for each link. This parameter lets you choose which style of index linking you want. When set to 0, an index entry takes you to the precise location of its corresponding indexterm. However, if you have a lot of duplicate entries in sections, then you have a lot of duplicate titles in the index, which makes it more cluttered. The reader may not recognize why duplicate titles appear until they follow the links. Also, the links may land the reader in the middle of a section where the section title is not visible, which may also be confusing to the reader. When set to 1, an index entry link is less precise, but duplicate titles in the index entries are eliminated. Landing on the section title location may confirm the reader's expectation that a link that shows a section title will take them to that section title, not a location within the section. </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.method</String>
											</field>
											<field name="description">
												<String>This parameter lets you select which method to use for sorting and grouping index entries in an index. Indexes in Latin-based languages that have accented characters typically sort together accented words and unaccented words. Thus Ă� (U+00C1 LATIN CAPITAL LETTER A WITH ACUTE) would sort together with A (U+0041 LATIN CAPITAL LETTER A), so both would appear in the A section of the index. Languages using other alphabets (such as Russian,  which is written in the Cyrillic alphabet) and languages using ideographic chararacters (such as Japanese) require grouping specific to the languages and alphabets. The default indexing method is limited. It can group accented characters in Latin-based languages only. It cannot handle non-Latin alphabets or ideographic languages. The other indexing methods require extensions of one type or another, and do not work with all XSLT processors, which is why they are not used by default. The three choices for indexing method are:
basic
(default)  Sort and groups words based only on the Latin alphabet. Words with accented Latin letters will group and sort with their respective primary letter, but words in non-Latin alphabets will be put in the Symbols section of the index.

kosek
This method sorts and groups words based on letter groups configured in the DocBook locale file for the given language. See, for example, the French locale file common/fr.xml. This method requires that the XSLT processor supports the EXSLT extensions (most do). It also requires support for using  user-defined functions in xsl:key (xsltproc does not). This method is suitable for any language for which you can list all the individual characters that should appear in each letter group in an index. It is probably not practical to use it for ideographic languages such as Chinese that have hundreds or thousands of characters. To use the kosek method, you must: Use a processor that supports its extensions, such as Saxon 6 or Xalan (xsltproc and Saxon 8 do not). Set the index.method parameter's value to kosek. Import the appropriate index extensions stylesheet module fo/autoidx-kosek.xsl or  html/autoidx-kosek.xsl into your customization.

kimber

This method uses extensions to the Saxon processor to implement sophisticated indexing processes. It uses its own  configuration file, which can include information for any number of languages. Each language's configuration can group words using one of two processes. In the enumerated process similar to that used in the kosek method, you indicate the groupings character-by-character. In the between-key process, you specify the break-points in the sort order that should start a new group. The latter configuration is useful for ideographic languages such as Chinese, Japanese, and Korean. You can also define your own collation algorithms and how you want mixed Latin-alphabet words sorted. For a whitepaper describing the extensions, see: http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf. To download the extension library, see http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport. To use the kimber method, you must: Use Saxon (version 6 or 8) as your XSLT processor. Install and configure the Innodata Isogen library, using the documentation that comes with it. Set the index.method parameter's value to kimber. Import the appropriate index extensions stylesheet module fo/autoidx-kimber.xsl or html/autoidx-kimber.xsl into your customization. Default value: basic</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>basic</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.number.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between page references in a formatted index entry. Typically that would be a comma and a space. Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'number-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can override the gentext with the content of this parameter. The content can be a simple string, or it can be something more complex such as a call-template. In HTML index output, section title references are used instead of page number references. This punctuation appears between such section titles in an HTML index.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.on.role</String>
											</field>
											<field name="description">
												<String>If non-zero, then an index element that has a role attribute value will contain only those indexterm elements with a matching role value. If an index has no role attribute or it is blank, then the index will contain all indexterms in the current scope. If index.on.role is zero, then the role attribute has no effect on selecting indexterms for an index. If you are using DocBook version 4.3 or later, you should use the type attribute instead of role on indexterm and index, and set the index.on.type to a nonzero value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.on.type</String>
											</field>
											<field name="description">
												<String>If non-zero, then an index element that has a type attribute value will contain only those indexterm elements with a matching type attribute value. If an index has no type attribute or it is blank, then the index will contain all indexterms in the current scope. If index.on.type is zero, then the type attribute has no effect on selecting indexterms for an index. For those using DocBook version 4.2 or earlier, the type attribute is not available for index terms. However, you can achieve the same effect by using the role attribute in the same manner on indexterm and index, and setting the stylesheet parameter index.on.role to a nonzero value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.prefer.titleabbrev</String>
											</field>
											<field name="description">
												<String>If non-zero, and if a titleabbrev is defined, the abbreviated title is used as the link text of a back reference in the index.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.range.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between the two numbers of a page range in an index. This parameter is only used by those XSL-FO processors that support an extension for generating such page ranges (such as XEP). Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'range-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can override the gentext with the content of this parameter. The content can be a simple string, or it can be something more complex such as a call-template. In HTML index output, section title references are used instead of page number references. So there are no page ranges and this parameter has no effect.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>index.term.separator</String>
											</field>
											<field name="description">
												<String>This parameter permits you to override the text to insert between the end of an index term and its list of page references. Typically that might be a comma and a space. Because this text may be locale dependent, this parameter's value is normally taken from a gentext template named 'term-separator' in the context 'index' in the stylesheet locale file for the language of the current document. This parameter can be used to override the gentext string, and would typically be used on the command line. This parameter would apply to all languages. So this text string can be customized in two ways. You can reset the default gentext string using the local.l10n.xml parameter, or you can fill in the content for this normally empty override parameter. The content can be a simple string, or it can be something more complex such as a call-template. For fo output, it could be an fo:leader element to provide space of a specific length, or a dot leader.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.olink.page.number</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines if cross references made between documents with olink will include page number citations. In most cases this is only applicable to references in printed output. The parameter has three possible values. no No page number references will be generated for olinks. yes Page number references will be generated for all olink references. The style of page reference may be changed if an xrefstyle attribute is used. maybe Page number references will not be generated for an olink element unless it has an xrefstyle attribute whose value specifies a page reference. Olinks that point to targets within the same document are treated as xrefs, and controlled by the insert.xref.page.number parameter. Page number references for olinks to external documents can only be inserted if the information exists in the olink database. This means each olink target element (div or obj) must have a page attribute whose value is its page number in the target document. The XSL stylesheets are not able to extract that information during processing because pages have not yet been created in XSLT transformation. Only the XSL-FO processor knows what page each element is placed on. Therefore some postprocessing must take place to populate page numbers in the olink database.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.olink.pdf.frag</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines whether the cross reference URIs to PDF documents made with olink will include fragment identifiers. When forming a URI to link to a PDF document, a fragment identifier (typically a '#' followed by an id value) appended to the PDF filename can be used by the PDF viewer to open the PDF file to a location within the document instead of the first page. However, not all PDF files have id values embedded in them, and not all PDF viewers can handle fragment identifiers. If insert.olink.pdf.frag is set to a non-zero value, then any olink targeting a PDF file will have the fragment identifier appended to the URI. The URI is formed by concatenating the value of the olink.base.uri parameter, the value of the baseuri attribute from the document element in the olink database with the matching targetdoc value, and the value of the href attribute for the targeted element in the olink database. The href attribute contains the fragment identifier. If insert.olink.pdf.frag is set to zero (the default value), then the href attribute from the olink database is not appended to PDF olinks, so the fragment identifier is left off. A PDF olink is any olink for which the baseuri attribute from the matching document element in the olink database ends with '.pdf'. Any other olinks will still have the fragment identifier added.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>insert.xref.page.number</String>
											</field>
											<field name="description">
												<String>The value of this parameter determines if cross references (xrefs) in printed output will include page number citations. It has three possible values. no No page number references will be generated. yes Page number references will be generated for all xref elements. The style of page reference may be changed if an xrefstyle attribute is used. maybe Page number references will not be generated for an xref element unless it has an xrefstyle attribute whose value specifies a page reference.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>keep.relative.image.uris</String>
											</field>
											<field name="description">
												<String>If non-zero, relative URIs (in, for example fileref attributes) will be used in the generated output. Otherwise, the URIs will be made absolute with respect to the base URI. Note that the stylesheets calculate (and use) the absolute form for some purposes, this only applies to the resulting output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.gentext.language</String>
											</field>
											<field name="description">
												<String>If this parameter is set to any value other than the empty string, its value will be used as the value for the language when generating text. Setting l10n.gentext.language overrides any settings within the document being formatted.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>l10n.lang.value.rfc.compliant</String>
											</field>
											<field name="description">
												<String>If non-zero, ensure that the values for all lang attributes in HTML output are RFC compliantSection 8.1.1, Language Codes, in the HTML 4.0 Recommendation states that: [RFC1766] defines and explains the language codes that must be used in HTML documents. Briefly, language codes consist of a primary code and a possibly empty series of subcodes: language-code = primary-code ( "-" subcode )* And in RFC 1766, Tags for the Identification of Languages, the EBNF for "language tag" is given as: Language-Tag = Primary-tag *( "-" Subtag ) Primary-tag = 1*8ALPHA Subtag = 1*8ALPHA . by taking any underscore characters in any lang values found in source documents, and replacing them with hyphen characters in output HTML files. For example, zh_CN in a source document becomes zh-CN in the HTML output form that source. This parameter does not cause any case change in lang values, because RFC 1766 explicitly states that all "language tags" (as it calls them) "are to be treated as case insensitive".</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>label.from.part</String>
											</field>
											<field name="description">
												<String>If label.from.part is non-zero, then numbering of components " preface, chapter, appendix, and reference (when reference occurs at the component level) " is re-started within each part. If label.from.part is zero (the default), numbering of components is not re-started within each part; instead, components are numbered sequentially throughout each book, regardless of whether or not they occur within part instances.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.everyNth</String>
											</field>
											<field name="description">
												<String>If line numbering is enabled, everyNth line will be numbered. Note that numbering is one based, not zero based. See also linenumbering.extension, linenumbering.separator, linenumbering.width and use.extensions</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>5</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.extension</String>
											</field>
											<field name="description">
												<String>If non-zero, verbatim environments (address, literallayout, programlisting, screen, synopsis) that specify line numbering will have line numbers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.separator</String>
											</field>
											<field name="description">
												<String>The separator is inserted between line numbers and lines in the verbatim environment. The default value is a single white space. Note the interaction with linenumbering.width</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>linenumbering.width</String>
											</field>
											<field name="description">
												<String>If line numbering is enabled, line numbers will appear right justified in a field "width" characters wide.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>3</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>link.mailto.url</String>
											</field>
											<field name="description">
												<String>If not the empty string, this address will be used for the rel=made link element in the html head</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.clean.html</String>
											</field>
											<field name="description">
												<String>If make.clean.html is true, the stylesheets take extra effort to ensure that the resulting HTML is conforms to modern HTML coding standards. In addition to eliminating excessive and noncompliant coding, it moves presentation HTML coding to a CSS stylesheet. The resulting HTML is dependent on CSS for formatting, and so the stylesheet is capable of generating a supporting CSS file. The docbook.css.source and custom.css.source parameters control how a CSS file is generated. If you require your CSS to reside in the HTML head element, then the generate.css.header can be used to do that. The make.clean.html parameter is different from html.cleanup because the former changes the resulting markup; it does not use extension functions like the latter to manipulate result-tree-fragments, and is therefore applicable to any XSLT processor. If make.clean.html is set to zero (the default), then the stylesheet retains its original old style HTML formatting features.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.graphic.viewport</String>
											</field>
											<field name="description">
												<String>The HTML img element only supports the notion of content-area scaling; it doesn't support the distinction between a content-area and a viewport-area, so we have to make some compromises. If make.graphic.viewport is non-zero, a table will be used to frame the image. This creates an effective viewport-area. Tables and alignment don't work together, so this parameter is ignored if alignment is specified on an image.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.single.year.ranges</String>
											</field>
											<field name="description">
												<String>If non-zero, year ranges that span a single year will be printed in range notation (1998-1999) instead of discrete notation (1998, 1999).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.valid.html</String>
											</field>
											<field name="description">
												<String>If make.valid.html is true, the stylesheets take extra effort to ensure that the resulting HTML is valid. This may mean that some para tags are translated into HTML divs or that other substitutions occur. This parameter is different from html.cleanup because it changes the resulting markup; it does not use extension functions to manipulate result-tree-fragments and is therefore applicable to any XSLT processor.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>make.year.ranges</String>
											</field>
											<field name="description">
												<String>If non-zero, multiple copyright year elements will be collated into ranges. This works only if each year number is put into a separate year element. The copyright element permits multiple year elements. If a year element contains a dash or a comma, then that year element will not be merged into any range.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manifest</String>
											</field>
											<field name="description">
												<String>The name of the file to which a manifest is written (if the value of the generate.manifest parameter is non-zero).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>HTML.manifest</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>manual.toc</String>
											</field>
											<field name="description">
												<String>The manual.toc identifies an explicit TOC that will be used for building the printed TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>menuchoice.menu.separator</String>
											</field>
											<field name="description">
												<String>Separator used to connect items of a menuchoice with guimenuitem or guisubmenu. Other elements are linked with menuchoice.separator. The default value is &amp;#x2192;, which is the &amp;rarr; (right arrow) character entity. The current FOP (0.20.5) requires setting the font-family explicitly. The default value also includes spaces around the arrow, which will allow a line to break. Replace the spaces with &amp;#xA0; (nonbreaking space) if you don't want those spaces to break.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>→</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>menuchoice.separator</String>
											</field>
											<field name="description">
												<String>Separator used to connect items of a menuchoice other than guimenuitem and guisubmenu. The latter elements are linked with menuchoice.menu.separator.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>+</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics</String>
											</field>
											<field name="description">
												<String>If non-zero, the navigational headers and footers in chunked HTML are presented in an alternate style that uses graphical icons for Next, Previous, Up, and Home. Default graphics are provided in the distribution. If zero, text is used instead of graphics.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension to use on navigational graphics used in the headers and footers of chunked HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.gif</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>navig.graphics.path</String>
											</field>
											<field name="description">
												<String>Sets the path, probably relative to the directory where the HTML files are created, to the navigational graphics used in the headers and footers of chunked HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>images/</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.image.depth</String>
											</field>
											<field name="description">
												<String>See nominal.image.width.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.image.width</String>
											</field>
											<field name="description">
												<String>Graphic widths expressed as a percentage are problematic. In the following discussion, we speak of width and contentwidth, but the same issues apply to depth and contentdepth. A width of 50% means "half of the available space for the image." That's fine. But note that in HTML, this is a dynamic property and the image size will vary if the browser window is resized. A contentwidth of 50% means "half of the actual image width". But what does that mean if the stylesheets cannot assess the image's actual size? Treating this as a width of 50% is one possibility, but it produces behavior (dynamic scaling) that seems entirely out of character with the meaning. Instead, the stylesheets define a nominal.image.width and convert percentages to actual values based on that nominal size.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>nominal.table.width</String>
											</field>
											<field name="description">
												<String>In order to convert CALS column widths into HTML column widths, it is sometimes necessary to have an absolute table width to use for conversion of mixed absolute and relative widths. This value must be an absolute length (not a percentage).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>6in</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.base.uri</String>
											</field>
											<field name="description">
												<String>When cross reference data is collected for resolving olinks, it may be necessary to prepend a base URI to each target's href. This parameter lets you set that base URI when cross reference data is collected. This feature is needed when you want to link to a document that is processed without chunking. The output filename for such a document is not known to the XSL stylesheet; the only target information consists of fragment identifiers such as #idref. To enable the resolution of olinks between documents, you should pass the name of the HTML output file as the value of this parameter. Then the hrefs recorded in the cross reference data collection look like outfile.html#idref, which can be reached as links from other documents.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.debug</String>
											</field>
											<field name="description">
												<String>If non-zero, then each olink will generate several messages about how it is being resolved during processing. This is useful when an olink does not resolve properly and the standard error messages are not sufficient to find the problem. You may need to read through the olink XSL templates to understand the context for some of the debug messages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.doctitle</String>
											</field>
											<field name="description">
												<String>When olinks between documents are resolved, the generated text may not make it clear that the reference is to another document. It is possible for the stylesheets to append the other document's title to external olinks. For this to happen, two parameters must be set. This olink.doctitle parameter should be set to either yes or maybe to enable this feature. And you should also set the current.docid parameter to the document id for the document currently being processed for output. Then if an olink's targetdoc id differs from the current.docid value, the stylesheet knows that it is a reference to another document and can append the target document's title to the generated olink text. The text for the target document's title is copied from the olink database from the ttl element of the top-level div for that document. If that ttl element is missing or empty, no title is output. The supported values for olink.doctitle are: yes Always insert the title to the target document if it is not the current document. no Never insert the title to the target document, even if requested in an xrefstyle attribute. maybe Only insert the title to the target document, if requested in an xrefstyle attribute. An xrefstyle attribute may override the global setting for individual olinks. The following values are supported in an xrefstyle attribute using the select: syntax: docname Insert the target document name for this olink using the docname gentext template, but only if the value of olink.doctitle is not no. docnamelong Insert the target document name for this olink using the docnamelong gentext template, but only if the value of olink.doctitle is not no. nodocname Omit the target document name even if the value of olink.doctitle is yes. Another way of inserting the target document name for a single olink is to employ an xrefstyle attribute using the template: syntax. The %o placeholder (the letter o, not zero) in such a template will be filled in with the target document's title when it is processed. This will occur regardless of the value of olink.doctitle. Note that prior to version 1.66 of the XSL stylesheets, the allowed values for this parameter were 0 and 1. Those values are still supported and mapped to 'no' and 'yes', respectively.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>no</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.fragid</String>
											</field>
											<field name="description">
												<String>The fragment identifier portion of an olink target.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>fragid=</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.lang.fallback.sequence</String>
											</field>
											<field name="description">
												<String>This parameter defines a list of lang values to search among to resolve olinks. Normally an olink tries to resolve to a document in the same language as the olink itself. The language of an olink is determined by its nearest ancestor element with a lang attribute, otherwise the value of the l10n.gentext.default.lang parameter. An olink database can contain target data for the same document in multiple languages. Each set of data has the same value for the targetdoc attribute in the document element in the database, but with a different lang attribute value. When an olink is being resolved, the target is first sought in the document with the same language as the olink. If no match is found there, then this parameter is consulted for additional languages to try. The olink.lang.fallback.sequence must be a whitespace separated list of lang values to try. The first one with a match in the olink database is used. The default value is empty. For example, a document might be written in German and contain an olink with targetdoc="adminguide". When the document is processed, the processor first looks for a target dataset in the olink database starting with: &lt;document targetdoc="adminguide" lang="de">. If there is no such element, then the olink.lang.fallback.sequence parameter is consulted. If its value is, for example, fr en, then the processor next looks for targetdoc="adminguide" lang="fr", and then for targetdoc="adminguide" lang="en". If there is still no match, it looks for targetdoc="adminguide" with no lang attribute. This parameter is useful when a set of documents is only partially translated, or is in the process of being translated. If a target of an olink has not yet been translated, then this parameter permits the processor to look for the document in other languages. This assumes the reader would rather have a link to a document in a different language than to have a broken link.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.outline.ext</String>
											</field>
											<field name="description">
												<String>The extension to be expected for OLink outline files Bob has this parameter as dead. Please don't use</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.olink</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.properties</String>
											</field>
											<field name="description">
												<String>This attribute set is applied to the fo:basic-link element of an olink. It is not applied to the optional page number or optional title of the external document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>pubid</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.pubid</String>
											</field>
											<field name="description">
												<String> </String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>pubid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.resolver</String>
											</field>
											<field name="description">
												<String></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>/cgi-bin/olink</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>olink.sysid</String>
											</field>
											<field name="description">
												<String></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>sysid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>othercredit.like.author.enabled</String>
											</field>
											<field name="description">
												<String>If non-zero, output of the othercredit element on titlepages is displayed in the same style as author and editor output. If zero then othercredit output is displayed using a style different than that of author and editor.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>pixels.per.inch</String>
											</field>
											<field name="description">
												<String>When lengths are converted to pixels, this value is used to determine the size of a pixel. The default value is taken from the XSL Recommendation.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>90</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>points.per.em</String>
											</field>
											<field name="description">
												<String>The fixed value used for calculations based upon the size of a character. The assumption made is that ten point font is in use. This assumption may not be valid.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>10</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>preface.autolabel</String>
											</field>
											<field name="description">
												<String>If non-zero then prefaces will be numbered using the parameter value as the number format if the value matches one of the following: 1 or arabic Arabic numeration (1, 2, 3 ...). A or upperalpha Uppercase letter numeration (A, B, C ...). a or loweralpha Lowercase letter numeration (a, b, c ...). I or upperroman Uppercase roman numeration (I, II, III ...). i or lowerroman Lowercase roman letter numeration (i, ii, iii ...). Any nonzero value other than the above will generate the default number format (arabic).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>prefer.internal.olink</String>
											</field>
											<field name="description">
												<String>If you are re-using XML content modules in multiple documents, you may want to redirect some of your olinks. This parameter permits you to redirect an olink to the current document. For example: you are writing documentation for a product, which includes 3 manuals: a little installation booklet (booklet.xml), a user guide (user.xml), and a reference manual (reference.xml). All 3 documents begin with the same introduction section (intro.xml) that contains a reference to the customization section (custom.xml) which is included in both user.xml and reference.xml documents. How do you write the link to custom.xml in intro.xml so that it is interpreted correctly in all 3 documents? If you use xref, it will fail in user.xml. If you use olink (pointing to reference.xml), the reference in user.xml will point to the customization section of the reference manual, while it is actually available in user.xml. If you set the prefer.internal.olink parameter to a non-zero value, then the processor will first look in the olink database for the olink's targetptr attribute value in document matching the current.docid parameter value. If it isn't found there, then it tries the document in the database with the targetdoc value that matches the olink's targetdoc attribute. This feature permits an olink reference to resolve to the current document if there is an element with an id matching the olink's targetptr value. The current document's olink data must be included in the target database for this to work. There is a potential for incorrect links if the same id attribute value is used for different content in different documents. Some of your olinks may be redirected to the current document when they shouldn't be. It is not possible to control individual olink instances.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>preferred.mediaobject.role</String>
											</field>
											<field name="description">
												<String>A mediaobject may contain several objects such as imageobjects. If the parameter use.role.for.mediaobject is non-zero, then the role attribute on imageobjects and other objects within a mediaobject container will be used to select which object will be used. If one of the objects has a role value that matches the preferred.mediaobject.role parameter, then it has first priority for selection. If more than one has such a role value, the first one is used. See the use.role.for.mediaobject parameter for the sequence of selection.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>process.empty.source.toc</String>
											</field>
											<field name="description">
												<String>Specifies that if an empty toc element is found in a source document, an automated TOC is generated at this point in the document. Depending on what the value of the generate.toc parameter is, setting this parameter to 1 could result in generation of duplicate automated TOCs. So the process.empty.source.toc is primarily useful as an "override": by placing an empty toc in your document and setting this parameter to 1, you can force a TOC to be generated even if generate.toc says not to.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>process.source.toc</String>
											</field>
											<field name="description">
												<String>Specifies that the contents of a non-empty "hard-coded" toc element in a source document are processed to generate a TOC in output. This parameter has no effect on automated generation of TOCs. An automated TOC may still be generated along with the "hard-coded" TOC. To suppress automated TOC generation, adjust the value of the generate.toc paramameter. The process.source.toc parameter also has no effect if the toc element is empty; handling for empty toc is controlled by the process.empty.source.toc parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.arch</String>
											</field>
											<field name="description">
												<String>Target profile for the arch attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by the profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.attribute</String>
											</field>
											<field name="description">
												<String>Target profile for the attribute attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.audience</String>
											</field>
											<field name="description">
												<String>Target profile for the audience attribute. The Value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.condition</String>
											</field>
											<field name="description">
												<String>Target profile for the condition attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.conformance</String>
											</field>
											<field name="description">
												<String>Target profile for the conformance attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.lang</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.os</String>
											</field>
											<field name="description">
												<String>Target profile for the os attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revision</String>
											</field>
											<field name="description">
												<String>Target profile for the revision attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revisionflag</String>
											</field>
											<field name="description">
												<String>Target profile for the revisionflag attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.role</String>
											</field>
											<field name="description">
												<String>Target profile for the role attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.security</String>
											</field>
											<field name="description">
												<String>Target profile for the security attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.status</String>
											</field>
											<field name="description">
												<String>Target profile for the status attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.userlevel</String>
											</field>
											<field name="description">
												<String>Target profile for the userlevel attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.value</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.vendor</String>
											</field>
											<field name="description">
												<String>Target profile for the vendor attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.wordsize</String>
											</field>
											<field name="description">
												<String>Target profile for the wordsize attribute. The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>punct.honorific</String>
											</field>
											<field name="description">
												<String>This parameter specifies the punctuation that should be added after an honorific in a personal name.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.defaultlabel</String>
											</field>
											<field name="description">
												<String>If no defaultlabel attribute is specified on a qandaset, this value is used. It is generally one of the legal values for the defaultlabel attribute (none, number or qanda), or one of the additional stylesheet-specific values (qnumber or qnumberanda). The default value is 'number'. The values are rendered as follows: qanda questions are labeled "Q:" and answers are labeled "A:". number The questions are enumerated and the answers are not labeled. qnumber The questions are labeled "Q:" followed by a number, and answers are not labeled. When sections are numbered, adding a label to the number distinguishes the question numbers from the section numbers. This value is not allowed in the defaultlabel attribute of a qandaset element. qnumberanda The questions are labeled "Q:" followed by a number, and the answers are labeled "A:". When sections are numbered, adding a label to the number distinguishes the question numbers from the section numbers. This value is not allowed in the defaultlabel attribute of a qandaset element. none No distinguishing label precedes Questions or Answers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>number</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.in.toc</String>
											</field>
											<field name="description">
												<String>If true (non-zero), then the generated table of contents for a document will include qandaset titles, qandadiv titles, and question elements. The default value (zero) excludes them from the TOC. This parameter does not affect any tables of contents that may be generated inside a qandaset or qandadiv.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.inherit.numeration</String>
											</field>
											<field name="description">
												<String>If non-zero, numbered qandadiv elements and question and answer inherit the enumeration of the ancestors of the qandaset.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>qanda.nested.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, instances of qandaentry that are children of answer elements are shown in the TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refclass.suppress</String>
											</field>
											<field name="description">
												<String>If the value of refclass.suppress is non-zero, then display of refclass contents is suppressed in output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.generate.name</String>
											</field>
											<field name="description">
												<String>If non-zero, a "NAME" section title is output before the list of refnames. This parameter and refentry.generate.title are mutually exclusive. This means that if you change this parameter to zero, you should set refentry.generate.title to non-zero unless you want get quite strange output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.generate.title</String>
											</field>
											<field name="description">
												<String>If non-zero, the reference page title or first name is output before the list of refnames. This parameter and refentry.generate.name are mutually exclusive. This means that if you change this parameter to non-zero, you should set refentry.generate.name to zero unless you want get quite strange output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.separator</String>
											</field>
											<field name="description">
												<String>If true, a separator will be generated between consecutive reference pages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>refentry.xref.manvolnum</String>
											</field>
											<field name="description">
												<String>if non-zero, the manvolnum is used when cross-referencing refentrys, either with xref or citerefentry.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>rootid</String>
											</field>
											<field name="description">
												<String>If rootid is not empty, it must be the value of an ID that occurs in the document being formatted. The entire document will be loaded and parsed, but formatting will begin at the element identified, rather than at the root. For example, this allows you to process only chapter 4 of a book. Because the entire document is available to the processor, automatic numbering, cross references, and other dependencies are correctly resolved.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>runinhead.default.title.end.punct</String>
											</field>
											<field name="description">
												<String>If non-zero, For a formalpara, use the specified string as the separator between the title and following text. The period is the default value.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>runinhead.title.end.punct</String>
											</field>
											<field name="description">
												<String>Specify which characters are to be counted as punctuation. These characters are checked for a match with the last character of the title. If no match is found, the runinhead.default.title.end.punct contents are inserted. This is to avoid duplicated punctuation in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>.!?:</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>section.autolabel.max.depth</String>
											</field>
											<field name="description">
												<String>When section numbering is turned on by the section.autolabel parameter, then this parameter controls the depth of section nesting that is numbered. Sections nested to a level deeper than this value will not be numbered.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>8</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>segmentedlist.as.table</String>
											</field>
											<field name="description">
												<String>If non-zero, segmentedlists will be formatted as tables.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>shade.verbatim</String>
											</field>
											<field name="description">
												<String>In the FO stylesheet, if this parameter is non-zero then the shade.verbatim.style properties will be applied to verbatim environments. In the HTML stylesheet, this parameter is now deprecated. Use CSS instead.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>shade.verbatim.style</String>
											</field>
											<field name="description">
												<String>Properties that specify the style of shaded verbatim listings. The parameters specified (the border and background color) are added to the styling of the xsl-fo output. A border might be specified as "thin black solid" for example. See xsl-fo</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>show.comments</String>
											</field>
											<field name="description">
												<String>If non-zero, comments will be displayed, otherwise they are suppressed. Comments here refers to the remark element (which was called comment prior to DocBook 4.0), not XML comments (&lt;-- like this -->) which are unavailable.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>show.revisionflag</String>
											</field>
											<field name="description">
												<String>If show.revisionflag is turned on, then the stylesheets may produce additional markup designed to allow a CSS stylesheet to highlight elements that have specific revisionflag settings. The markup inserted will be usually be either a &lt;span> or &lt;div> with an appropriate class attribute. (The value of the class attribute will be the same as the value of the revisionflag attribute). In some contexts, for example tables, where extra markup would be structurally illegal, the class attribute will be added to the appropriate container element. In general, the stylesheets only test for revisionflag in contexts where an importing stylesheet would have to redefine whole templates. Most of the revisionflag processing is expected to be done by another stylesheet, for example changebars.xsl.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>simplesect.in.toc</String>
											</field>
											<field name="description">
												<String>If non-zero, simplesects will be included in the TOC.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>spacing.paras</String>
											</field>
											<field name="description">
												<String>When non-zero, additional, empty paragraphs are inserted in several contexts (for example, around informal figures), to create a more pleasing visual appearance in many browsers.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>suppress.header.navigation</String>
											</field>
											<field name="description">
												<String>If non-zero, header navigation will be suppressed.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.borders.with.css</String>
											</field>
											<field name="description">
												<String>If non-zero, CSS will be used to draw table borders.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.color</String>
											</field>
											<field name="description">
												<String>Set the color of table cell borders. If non-zero, the value is used for the border coloration. See CSS. A color is either a keyword or a numerical RGB specification. Keywords are aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, and yellow. To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.style</String>
											</field>
											<field name="description">
												<String>Specifies the border style of table cells. To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>solid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.cell.border.thickness</String>
											</field>
											<field name="description">
												<String>If non-zero, specifies the thickness of borders on table cells. The units are points. See CSS To control properties of cell borders in HTML output, you must also turn on the table.borders.with.css parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0.5pt</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.footnote.number.format</String>
											</field>
											<field name="description">
												<String>The table.footnote.number.format specifies the format to use for footnote numeration (1, i, I, a, or A) in tables.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>a</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.footnote.number.symbols</String>
											</field>
											<field name="description">
												<String>If table.footnote.number.symbols is not the empty string, table footnotes will use the characters it contains as footnote symbols. For example, *&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720; will identify footnotes with *, †, ‡,◊, and ✠ . If there are more footnotes than symbols, the stylesheets will fall back to numbered footnotes using table.footnote.number.format. The use of symbols for footnotes depends on the ability of your processor (or browser) to render the symbols you select. Not all systems are capable of displaying the full range of Unicode characters. If the quoted characters in the preceding paragraph are not displayed properly, that's a good indicator that you may have trouble using those symbols for footnotes.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.color</String>
											</field>
											<field name="description">
												<String>Specifies the border color of table frames.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.style</String>
											</field>
											<field name="description">
												<String>Specifies the border style of table frames.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>solid</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>table.frame.border.thickness</String>
											</field>
											<field name="description">
												<String>Specifies the thickness of the border on the table's frame.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0.5pt</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tablecolumns.extension</String>
											</field>
											<field name="description">
												<String>The table columns extension function adjusts the widths of table columns in the HTML result to more accurately reflect the specifications in the CALS table.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>target.database.document</String>
											</field>
											<field name="description">
												<String>To resolve olinks between documents, the stylesheets use a master database document that identifies the target datafiles for all the documents within the scope of the olinks. This parameter value is the URI of the master document to be read during processing to resolve olinks. The default value is olinkdb.xml. The data structure of the file is defined in the targetdatabase.dtd DTD. The database file provides the high level elements to record the identifiers, locations, and relationships of documents. The cross reference data for individual documents is generally pulled into the database using system entity references or XIncludes. See also targets.filename.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>olinkdb.xml</String>
											</field>
											<field name="type">
												<Integer>0</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>targets.filename</String>
											</field>
											<field name="description">
												<String>In order to resolve olinks efficiently, the stylesheets can generate an external data file containing information about all potential cross reference endpoints in a document. This parameter lets you change the name of the generated file from the default name target.db. The name must agree with that used in the target database used to resolve olinks during processing. See also target.database.document.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>target.db</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.delims</String>
											</field>
											<field name="description">
												<String>For compatibility with DSSSL based DBTeXMath from Allin Cottrell you should set this parameter to 0. This feature is useful for print/PDF output only if you use the obsolete and now unsupported PassiveTeX XSL-FO engine. Related Parameters tex.math.in.alt, passivetex.extensions See Also You can also use the dbtex delims processing instruction to control whether delimiters are output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.file</String>
											</field>
											<field name="description">
												<String>Name of auxiliary file for TeX equations. This file can be processed by dvi2bitmap to get bitmap versions of equations for HTML output. Related Parameters tex.math.in.alt, tex.math.delims, More information For how-to documentation on embedding TeX equations and generating output from them, see DBTeXMath.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>tex-math-equations.tex</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>tex.math.in.alt</String>
											</field>
											<field name="description">
												<String>If you want type math directly in TeX notation in equations, this parameter specifies notation used. Currently are supported two values -- plain and latex. Empty value means that you are not using TeX math at all. Preferred way for including TeX alternative of math is inside of textobject element. Eg.: &lt;inlineequation> &lt;inlinemediaobject> &lt;imageobject> &lt;imagedata fileref="eq1.gif"/> &lt;/imageobject> &lt;textobject>&lt;phrase>E=mc squared&lt;/phrase>&lt;/textobject> &lt;textobject role="tex">&lt;phrase>E=mc^2&lt;/phrase>&lt;/textobject> &lt;/inlinemediaobject> &lt;/inlineequation> If you are using graphic element, you can store TeX inside alt element: &lt;inlineequation> &lt;alt role="tex">a^2+b^2=c^2&lt;/alt> &lt;graphic fileref="a2b2c2.gif"/> &lt;/inlineequation> If you want use this feature, you should process your FO with PassiveTeX, which only supports TeX math notation. When calling stylsheet, don't forget to specify also passivetex.extensions=1. If you want equations in HTML, just process generated file tex-math-equations.tex by TeX or LaTeX. Then run dvi2bitmap program on result DVI file. You will get images for equations in your document. This feature is useful for print/PDF output only if you use the obsolete and now unsupported PassiveTeX XSL-FO engine. Related Parameters tex.math.delims, passivetex.extensions, tex.math.file</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>textdata.default.encoding</String>
											</field>
											<field name="description">
												<String>Specifies the encoding of any external text files included using textdata element. This value is used only when you do not specify encoding by the appropriate attribute directly on textdata. An empty string is interpreted as the system default encoding.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>textinsert.extension</String>
											</field>
											<field name="description">
												<String>Enables the textinsert extension element Description The textinsert extension element inserts the contents of a file into the result tree (as text). To use the textinsert extension element, you must use either Saxon or Xalan as your XSLT processor (it doesn’t work with xsltproc), along with either the DocBook Saxon extensions or DocBook Xalan extensions (for more information about those extensions, see DocBook Saxon Extensions and DocBook Xalan Extensions), and you must set both the use.extensions and textinsert.extension parameters to 1. As an alternative to using the textinsert element, consider using an Xinclude element with the parse="text" attribute and value specified, as detailed in Using XInclude for text inclusions. See Also You can also use the dbhtml-include href processing instruction to insert external files — both files containing plain text and files with markup content (including HTML content). More information For how-to documentation on inserting contents of external code files and other text files into output, see External code files. For guidelines on inserting contents of HTML files into output, see Inserting external HTML code. Default value: 1</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.list.type</String>
											</field>
											<field name="description">
												<String>When an automatically generated Table of Contents (or List of Titles) is produced, this HTML element will be used to make the list.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>dl</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>toc.max.depth</String>
											</field>
											<field name="description">
												<String>Specifies the maximal depth of TOC on all levels.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>8</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>ulink.target</String>
											</field>
											<field name="description">
												<String>If ulink.target is non-zero, its value will be used for the target attribute on anchors generated for ulinks.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.embed.for.svg</String>
											</field>
											<field name="description">
												<String>If non-zero, an embed element will be created for SVG figures. An object is always created, this parameter merely controls whether or not an additional embed is generated inside the object. On the plus side, this may be more portable among browsers and plug-ins. On the minus side, it isn't valid HTML.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.local.olink.style</String>
											</field>
											<field name="description">
												<String>When cross reference data is collected for use by olinks, the data for each potential target includes one field containing a completely assembled cross reference string, as if it were an xref generated in that document. Other fields record the separate title, number, and element name of each target. When an olink is formed to a target from another document, the olink resolves to that preassembled string by default. If the use.local.olink.style parameter is set to non-zero, then instead the cross reference string is formed again from the target title, number, and element name, using the stylesheet processing the targeting document. Then olinks will match the xref style in the targeting document rather than in the target document. If both documents are processed with the same stylesheet, then the results will be the same.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.role.as.xrefstyle</String>
											</field>
											<field name="description">
												<String>In DocBook documents that conform to a schema older than V4.3, this parameter allows role to serve the purpose of specifying the cross reference style. If non-zero, the role attribute on xref will be used to select the cross reference style. In DocBook V4.3, the xrefstyle attribute was added for this purpose. If the xrefstyle attribute is present, role will be ignored, regardless of the setting of this parameter. Example The following small stylesheet shows how to configure the stylesheets to make use of the cross reference style: &lt;?xml version="1.0"?> &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"> &lt;xsl:import href="../xsl/html/docbook.xsl"/> &lt;xsl:output method="html"/> &lt;xsl:param name="local.l10n.xml" select="document('')"/> &lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"> &lt;l:l10n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0" language="en"> &lt;l:context name="xref"> &lt;l:template name="chapter" style="title" text="Chapter %n, %t"/> &lt;l:template name="chapter" text="Chapter %n"/> &lt;/l:context> &lt;/l:l10n> &lt;/l:i18n> &lt;/xsl:stylesheet> With this stylesheet, the cross references in the following document: &lt;?xml version="1.0" encoding="utf-8"?> &lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"> &lt;book id="book">&lt;title>Book&lt;/title> &lt;preface> &lt;title>Preface&lt;/title> &lt;para>Normal: &lt;xref linkend="ch1"/>.&lt;/para> &lt;para>Title: &lt;xref xrefstyle="title" linkend="ch1"/>.&lt;/para> &lt;/preface> &lt;chapter id="ch1"> &lt;title>First Chapter&lt;/title> &lt;para>Irrelevant.&lt;/para> &lt;/chapter> &lt;/book> will appear as: Normal: Chapter 1. Title: Chapter 1, First Chapter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.role.for.mediaobject</String>
											</field>
											<field name="description">
												<String>If non-zero, the role attribute on imageobjects or other objects within a mediaobject container will be used to select which object will be used. The order of selection when then parameter is non-zero is: If the stylesheet parameter preferred.mediaobject.role has a value, then the object whose role equals that value is selected. Else if an object's role attribute has a value of html for HTML processing or fo for FO output, then the first of such objects is selected. Else the first suitable object is selected. If the value of use.role.for.mediaobject is zero, then role attributes are not considered and the first suitable object with or without a role value is used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>use.svg</String>
											</field>
											<field name="description">
												<String>If non-zero, SVG will be considered an acceptable image format. SVG is passed through to the result tree, so correct rendering of the resulting diagram depends on the formatter (FO processor or web browser) that is used to process the output from the stylesheet.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.as.table</String>
											</field>
											<field name="description">
												<String>If non-zero, variablelists will be formatted as tables. A processing instruction exists to specify a particular width for the column containing the terms: dbhtml term-width=".25in" You can override this setting with a processing instruction as the child of variablelist: dbhtml list-presentation="table" or dbhtml list-presentation="list". This parameter only applies to the HTML transformations. In the FO case, proper list markup is robust enough to handle the formatting. But see also variablelist.as.blocks. &lt;variablelist> &lt;?dbhtml list-presentation="table"?> &lt;?dbhtml term-width="1.5in"?> &lt;?dbfo list-presentation="list"?> &lt;?dbfo term-width="1in"?> &lt;varlistentry> &lt;term>list&lt;/term> &lt;listitem> &lt;para> Formatted as a table even if variablelist.as.table is set to 0. &lt;/para> &lt;/listitem> &lt;/varlistentry> &lt;/variablelist></String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.term.break.after</String>
											</field>
											<field name="description">
												<String>Set a non-zero value for the variablelist.term.break.after parameter to generate a line break between terms in a multi-term varlistentry. If you set a non-zero value for variablelist.term.break.after, you may also want to set the value of the variablelist.term.separator parameter to an empty string (to suppress rendering of the default comma and space after each term).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>0</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>variablelist.term.separator</String>
											</field>
											<field name="description">
												<String>When a varlistentry contains multiple term elements, the string specified in the value of the variablelist.term.separator parameter is placed after each term except the last. To generate a line break between multiple terms in a varlistentry, set a non-zero value for the variablelist.term.break.after parameter. If you do so, you may also want to set the value of the variablelist.term.separator parameter to an empty string (to suppress rendering of the default comma and space after each term).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>, </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.copyright</String>
											</field>
											<field name="description">
												<String>The copyright note that will be added in the footer of the Table of Contents frame (the left side frame of the WebHelp output).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.custom.resources</String>
											</field>
											<field name="description">
												<String>The file path to a directory that contains resources files. All files from this directory will be copied to the root of the WebHelp output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.favicon</String>
											</field>
											<field name="description">
												<String>The file path of a small image used as favicon.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.footer.file</String>
											</field>
											<field name="description">
												<String>Path to an XML file that includes the footer content for your WebHelp output pages.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.footer.include</String>
											</field>
											<field name="description">
												<String>Specifies whether or not to include footer in each WebHelp page. Possible values: yes, no. If set to no, no footer is added to the WebHelp pages. If set to yes and the webhelp.footer.file parameter has a value, then the content of that file is used as footer. If the webhelp.footer.file has no value then the default Oxygen footer is inserted in each WebHelp page.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>yes</String>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>yes</String>
													<String>no</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.logo.image</String>
											</field>
											<field name="description">
												<String>The file path of a small image with the company logo that will be added to the title in the header area.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.logo.image.target.url</String>
											</field>
											<field name="description">
												<String>Specifies a target URL that is set on the logo image. When you click the logo image, you will be redirected to this address.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.search.ranking</String>
											</field>
											<field name="description">
												<String>If this parameter is set to false then the 5-star rating mechanism is no longer included in the search results that are displayed on the Search tab (default setting is true).</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>true</String>
											</field>
											<field name="type">
												<Integer>4</Integer>
											</field>
											<field name="possibleValues">
												<String-array>
													<null/>
													<String>true</String>
													<String>false</String>
												</String-array>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>webhelp.skin.css</String>
											</field>
											<field name="description">
												<String>Path to a CSS file that sets the style theme in the output WebHelp pages. It can be one of the predefined skin CSS from the OXYGEN_INSTALL_DIR\frameworks\docbook\xsl\com.oxygenxml.webhelp.classic\predefined-skins directory, or it can be a custom skin CSS generated with the Oxygen Skin Builder web application.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String></String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>writing.mode</String>
											</field>
											<field name="description">
												<String>Sets direction of text flow and text alignment based on locale. The value is normally taken from the gentext file for the lang attribute of the document's root element, using the key name 'writing-mode' to look it up in the gentext file. But the param can also be set on the command line to override that gentext value. Accepted values are: lr-tb Left-to-right text flow in each line, lines stack top to bottom. rl-tb Right-to-left text flow in each line, lines stack top to bottom. tb-rl Top-to-bottom text flow in each vertical line, lines stack right to left. Supported by only a few XSL-FO processors. Not supported in HTML output. lr Shorthand for lr-tb. rl Shorthand for rl-tb. tb Shorthand for tb-rl.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> writing-mode </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.label-page.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both label and page but no title, then the value of this parameter is inserted between label and page number in the output. If a title is included, then other separators are used.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.label-title.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both label and title, then the value of this parameter is inserted between label and title in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>: </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.title-page.separator</String>
											</field>
											<field name="description">
												<String>This parameter allows you to control the punctuation of certain types of generated cross reference text. When cross reference text is generated for an xref or olink element using an xrefstyle attribute that makes use of the select: feature, and the selected components include both title and page number, then the value of this parameter is inserted between title and page number in the output.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String> </String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xref.with.number.and.title</String>
											</field>
											<field name="description">
												<String>A cross reference may include the number (for example, the number of an example or figure) and the title which is a required child of some targets. This parameter inserts both the relevant number as well as the title into the link.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<String>1</String>
											</field>
											<field name="type">
												<Integer>2</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
									</list>
								</field>
								<field name="jvmArgs">
									<String>-Xmx256m</String>
								</field>
								<field name="useCustomJavaHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customJavaHomeDir">
									<String></String>
								</field>
								<field name="useCustomANTHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customANTHomeDir">
									<String></String>
								</field>
								<field name="workingDir">
									<String>${cfd}</String>
								</field>
								<field name="showConsoleAlways">
									<Boolean>false</Boolean>
								</field>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook WebHelp Classic with Feedback</String>
								</field>
								<field name="baseURL">
									<null/>
								</field>
								<field name="footerURL">
									<null/>
								</field>
								<field name="fOPMethod">
									<null/>
								</field>
								<field name="fOProcessorName">
									<null/>
								</field>
								<field name="headerURL">
									<null/>
								</field>
								<field name="inputXSLURL">
									<null/>
								</field>
								<field name="inputXMLURL">
									<null/>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>ANT</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfd}/out/webhelp-feedback/oxygen-webhelp/feedback/resources/installation.html</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>false</Boolean>
								</field>
								<field name="xsltParams">
									<list/>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>ANT</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${oxygenHome}/classes/</String>
										<String>${oxygenHome}/lib/oxygen*.jar</String>
										<String>${oxygenHome}/lib/resolver.jar</String>
										<String>${oxygenHome}/lib/jing.jar</String>
										<String>${oxygenHome}/lib/xercesImpl.jar</String>
										<String>${oxygenHome}/lib/saxon.jar</String>
										<String>${oxygenHome}/lib/saxon9ee.jar</String>
										<String>${oxygenHome}/lib/xml-apis.jar</String>
										<String>${oxygenHome}/lib/xml-apis-ext.jar</String>
										<String>${oxygenHome}/lib/log4j.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${oxygenHome}/lib/lucene-*.jar</String>
										<String>${framework}/xsl/com.oxygenxml.webhelp.classic/lib/xhtml-indexer.jar</String>
									</String-array>
								</field>
							</antScenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook 4 -> DocBook 5 Conversion</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/5.0/tools/db4-upgrade.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="outputFile">
									<File>${cfd}/${cfn}-db5.xml</File>
								</field>
								<field name="outputResource">
									<String>${cfd}/${cfn}-db5.xml</String>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<null/>
								</field>
								<field name="openInEditor">
									<Boolean>true</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list/>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>Saxon6.5.5</String>
								</field>
								<field name="extensionURLs">
									<String-array/>
								</field>
							</scenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook HTML</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/xsl/html/docbook_custom.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<File>${cfd}/out/html/${cfn}.html</File>
								</field>
								<field name="outputResource">
									<String>${cfd}/out/html/${cfn}.html</String>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<null/>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.extension</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>base.dir</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${cfd}/out/html/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>callout.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>draft.mode</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.source</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.xslthl.config</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>img.src.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>../../</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
									</list>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>Saxon6.5.5</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
									</String-array>
								</field>
							</scenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook HTML - Chunk</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/xsl/html/chunk_custom.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfdu}/out/html-chunks/index.html</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.extension</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>base.dir</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${cfd}/out/html-chunks/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>callout.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>draft.mode</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.source</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.xslthl.config</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>img.src.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>../../</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
									</list>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>Saxon6.5.5</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
									</String-array>
								</field>
							</scenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook PDF</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/xsl/fo/docbook_custom.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>true</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<File>${cfd}/out/pdf/${cfn}.pdf</File>
								</field>
								<field name="outputResource">
									<String>${cfd}/out/pdf/${cfn}.pdf</String>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<null/>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.extension</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>body.font.family</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>Times New Roman, Arial Unicode MS, Tahoma, Batang, serif</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>callout.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>draft.mode</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>fop.extensions</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>0</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>fop1.extensions</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.source</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.xslthl.config</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>monospace.font.family</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>monospace, Courier New, Courier, Consolas, Liberation Mono, Arial Unicode MS</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>paper.type</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>A4</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>title.font.family</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>Arial, Arial Unicode MS, Tahoma, Batang, sans-serif</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
									</list>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>Saxon6.5.5</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
									</String-array>
								</field>
							</scenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook XHTML</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/xsl/xhtml/docbook_custom.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<File>${cfd}/out/xhtml/${cfn}.xhtml</File>
								</field>
								<field name="outputResource">
									<String>${cfd}/out/xhtml/${cfn}.xhtml</String>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<null/>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.extension</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>base.dir</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${cfd}/out/xhtml/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>callout.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>draft.mode</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.source</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.xslthl.config</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>html.ext</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.xhtml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>img.src.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>../../</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
									</list>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>Saxon6.5.5</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
									</String-array>
								</field>
							</scenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook XHTML - Chunk</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/xsl/xhtml/chunk_custom.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfdu}/out/xhtml-chunks/index.xhtml</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.extension</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>admon.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>base.dir</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${cfd}/out/xhtml-chunks/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>callout.graphics.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>draft.mode</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.source</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>highlight.xslthl.config</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>${framework}/xsl/highlighting/xslthl-config.xml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>html.ext</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>.xhtml</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>img.src.path</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>../../</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
									</list>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>Saxon6.5.5</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${framework}/xsl/extensions/xslthl*.jar</String>
										<String>${framework}/xsl/extensions/saxon65.jar</String>
									</String-array>
								</field>
							</scenario>
							<antScenario>
								<field name="additionalAntArgs">
									<String></String>
								</field>
								<field name="buildTarget">
									<String></String>
								</field>
								<field name="buildFilePath">
									<String>${frameworkDir}/xsl/epub/bin/build.xml</String>
								</field>
								<field name="ditaParams">
									<list>
										<antParameter>
											<field name="name">
												<String>chunker.output.encoding</String>
											</field>
											<field name="description">
												<String>The encoding of the XHTML files that will be included in the ePUB book.</String>
											</field>
											<field name="value">
												<String>UTF-8</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet</String>
											</field>
											<field name="description">
												<String>The path of a custom CSS stylesheet file that must be applied to the HTML pages of the ePub book. The CSS file will be copied inside the target ePub book.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>outputFile</String>
											</field>
											<field name="description">
												<String>Path where the output EPUB will be saved.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/epub/${cfn}.epub</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics</String>
											</field>
											<field name="description">
												<String>If value is 1 use Docbook admon graphics. If value is 0 do not use Docbook admon graphics.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook admon image files.</String>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension for admonition graphics. The following formats of
												    admonition graphics are supported: GIF (.gif extension), PNG (.png extension), SVG
												    (the .svg extension, TIFF (.tif extension).</String>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook callout image files.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.arch</String>
											</field>
											<field name="description">
												<String>Target profile for the arch attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by the profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.attribute</String>
											</field>
											<field name="description">
												<String>Target profile for the attribute attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.audience</String>
											</field>
											<field name="description">
												<String>Target profile for the audience attribute.

The Value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.condition</String>
											</field>
											<field name="description">
												<String>Target profile for the condition attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.conformance</String>
											</field>
											<field name="description">
												<String>Target profile for the conformance attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.lang</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.os</String>
											</field>
											<field name="description">
												<String>Target profile for the os attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revision</String>
											</field>
											<field name="description">
												<String>Target profile for the revision attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revisionflag</String>
											</field>
											<field name="description">
												<String>Target profile for the revisionflag attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.role</String>
											</field>
											<field name="description">
												<String>Target profile for the role attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.security</String>
											</field>
											<field name="description">
												<String>Target profile for the security attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.status</String>
											</field>
											<field name="description">
												<String>Target profile for the status attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.userlevel</String>
											</field>
											<field name="description">
												<String>Target profile for the userlevel attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.value</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.vendor</String>
											</field>
											<field name="description">
												<String>Target profile for the vendor attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.wordsize</String>
											</field>
											<field name="description">
												<String>Target profile for the wordsize attribute.

The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xmlFile</String>
											</field>
											<field name="description">
												<String>Path to Docbook XML file.</String>
											</field>
											<field name="value">
												<String>${cf}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
									</list>
								</field>
								<field name="jvmArgs">
									<String>-Xmx256m</String>
								</field>
								<field name="useCustomJavaHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customJavaHomeDir">
									<String></String>
								</field>
								<field name="useCustomANTHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customANTHomeDir">
									<String></String>
								</field>
								<field name="workingDir">
									<String>${cfd}</String>
								</field>
								<field name="showConsoleAlways">
									<Boolean>true</Boolean>
								</field>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook EPUB</String>
								</field>
								<field name="baseURL">
									<null/>
								</field>
								<field name="footerURL">
									<null/>
								</field>
								<field name="fOPMethod">
									<null/>
								</field>
								<field name="fOProcessorName">
									<null/>
								</field>
								<field name="headerURL">
									<null/>
								</field>
								<field name="inputXSLURL">
									<null/>
								</field>
								<field name="inputXMLURL">
									<null/>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>ANT</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfd}/out/epub/${cfn}.epub</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>false</Boolean>
								</field>
								<field name="xsltParams">
									<list/>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>ANT</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${oxygenHome}/classes/</String>
										<String>${oxygenHome}/lib/oxygen.jar</String>
										<String>${oxygenHome}/lib/oxygenAuthor.jar</String>
										<String>${oxygenHome}/lib/oxygenDeveloper.jar</String>
										<String>${oxygenHome}/lib/oxygenEclipse.jar</String>
										<String>${oxygenHome}/lib/oxygenAuthorEclipse.jar</String>
										<String>${oxygenHome}/lib/oxygenDeveloperEclipse.jar</String>
										<String>${oxygenHome}/lib/resolver.jar</String>
										<String>${oxygenHome}/lib/jing.jar</String>
										<String>${oxygenHome}/lib/xercesImpl.jar</String>
										<String>${oxygenHome}/lib/saxon.jar</String>
										<String>${oxygenHome}/lib/xml-apis.jar</String>
										<String>${oxygenHome}/lib/xml-apis-ext.jar</String>
										<String>${oxygenHome}/lib/log4j.jar</String>
									</String-array>
								</field>
							</antScenario>
							<antScenario>
								<field name="additionalAntArgs">
									<String></String>
								</field>
								<field name="buildTarget">
									<String></String>
								</field>
								<field name="buildFilePath">
									<String>${frameworkDir}/xsl/epub3/build.xml</String>
								</field>
								<field name="ditaParams">
									<list>
										<antParameter>
											<field name="name">
												<String>admon.graphics</String>
											</field>
											<field name="description">
												<String>If value is 1 use Docbook admon graphics. If value is 0 do not use Docbook admon graphics.</String>
											</field>
											<field name="value">
												<String>1</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.extension</String>
											</field>
											<field name="description">
												<String>Sets the filename extension for admonition graphics. The following formats of
												    admonition graphics are supported: GIF (.gif extension), PNG (.png extension), SVG
												    (the .svg extension, TIFF (.tif extension).</String>
											</field>
											<field name="value">
												<String>.png</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>admon.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook admon image files.</String>
											</field>
											<field name="value">
												<String>${framework}/css/img/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>callout.graphics.path</String>
											</field>
											<field name="description">
												<String>Path of directory containing the Docbook callout image files.</String>
											</field>
											<field name="value">
												<String>${framework}/xsl/images/callouts/</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>chunker.output.encoding</String>
											</field>
											<field name="description">
												<String>The encoding of the XHTML files that will be included in the ePUB book.</String>
											</field>
											<field name="value">
												<String>UTF-8</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>html.stylesheet</String>
											</field>
											<field name="description">
												<String>The path of a custom CSS stylesheet file that must be applied to the HTML pages of the ePub book. The CSS file will be copied inside the target ePub book.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>outputFile</String>
											</field>
											<field name="description">
												<String>Path where the output EPUB will be saved.</String>
											</field>
											<field name="value">
												<String>${cfd}/out/epub3/${cfn}.epub</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.arch</String>
											</field>
											<field name="description">
												<String>Target profile for the arch attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by the profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.attribute</String>
											</field>
											<field name="description">
												<String>Target profile for the attribute attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.audience</String>
											</field>
											<field name="description">
												<String>Target profile for the audience attribute.
                                                    
                                                    The Value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.condition</String>
											</field>
											<field name="description">
												<String>Target profile for the condition attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.conformance</String>
											</field>
											<field name="description">
												<String>Target profile for the conformance attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.lang</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.os</String>
											</field>
											<field name="description">
												<String>Target profile for the os attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revision</String>
											</field>
											<field name="description">
												<String>Target profile for the revision attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.revisionflag</String>
											</field>
											<field name="description">
												<String>Target profile for the revisionflag attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.role</String>
											</field>
											<field name="description">
												<String>Target profile for the role attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.security</String>
											</field>
											<field name="description">
												<String>Target profile for the security attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.status</String>
											</field>
											<field name="description">
												<String>Target profile for the status attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.userlevel</String>
											</field>
											<field name="description">
												<String>Target profile for the userlevel attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.value</String>
											</field>
											<field name="description">
												<String>Target profile for the lang attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.vendor</String>
											</field>
											<field name="description">
												<String>Target profile for the vendor attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>profile.wordsize</String>
											</field>
											<field name="description">
												<String>Target profile for the wordsize attribute.
                                                    
                                                    The value of this parameter specifies profiles which should be included in the output. You can specify multiple profiles by separating them by semicolon. You can change separator character by profile.separator parameter.</String>
											</field>
											<field name="value">
												<null/>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
										<antParameter>
											<field name="name">
												<String>xmlFile</String>
											</field>
											<field name="description">
												<String>Path to Docbook XML file.</String>
											</field>
											<field name="value">
												<String>${cf}</String>
											</field>
											<field name="defaultValue">
												<null/>
											</field>
											<field name="type">
												<Integer>5</Integer>
											</field>
											<field name="possibleValues">
												<null/>
											</field>
											<field name="possibleValuesDescriptions">
												<null/>
											</field>
										</antParameter>
									</list>
								</field>
								<field name="jvmArgs">
									<String>-Xmx256m</String>
								</field>
								<field name="useCustomJavaHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customJavaHomeDir">
									<String></String>
								</field>
								<field name="useCustomANTHome">
									<Boolean>false</Boolean>
								</field>
								<field name="customANTHomeDir">
									<String></String>
								</field>
								<field name="workingDir">
									<String>${cfd}</String>
								</field>
								<field name="showConsoleAlways">
									<Boolean>true</Boolean>
								</field>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook EPUB3</String>
								</field>
								<field name="baseURL">
									<null/>
								</field>
								<field name="footerURL">
									<null/>
								</field>
								<field name="fOPMethod">
									<null/>
								</field>
								<field name="fOProcessorName">
									<null/>
								</field>
								<field name="headerURL">
									<null/>
								</field>
								<field name="inputXSLURL">
									<null/>
								</field>
								<field name="inputXMLURL">
									<null/>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>ANT</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="outputFile">
									<null/>
								</field>
								<field name="outputResource">
									<null/>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>true</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<String>${cfd}/out/epub3/${cfn}.epub</String>
								</field>
								<field name="openInEditor">
									<Boolean>false</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>false</Boolean>
								</field>
								<field name="xsltParams">
									<list/>
								</field>
								<field name="cascadingStylesheets">
									<String-array/>
								</field>
								<field name="xslTransformer">
									<String>ANT</String>
								</field>
								<field name="extensionURLs">
									<String-array>
										<String>${oxygenHome}/classes/</String>
										<String>${oxygenHome}/lib/oxygen.jar</String>
										<String>${oxygenHome}/lib/oxygenAuthor.jar</String>
										<String>${oxygenHome}/lib/oxygenDeveloper.jar</String>
										<String>${oxygenHome}/lib/oxygenEclipse.jar</String>
										<String>${oxygenHome}/lib/oxygenAuthorEclipse.jar</String>
										<String>${oxygenHome}/lib/oxygenDeveloperEclipse.jar</String>
										<String>${oxygenHome}/lib/resolver.jar</String>
										<String>${oxygenHome}/lib/jing.jar</String>
										<String>${oxygenHome}/lib/xercesImpl.jar</String>
										<String>${oxygenHome}/lib/saxon.jar</String>
										<String>${oxygenHome}/lib/xml-apis.jar</String>
										<String>${oxygenHome}/lib/xml-apis-ext.jar</String>
										<String>${oxygenHome}/lib/log4j.jar</String>
									</String-array>
								</field>
							</antScenario>
							<scenario>
								<field name="advancedOptionsMap">
									<null/>
								</field>
								<field name="name">
									<String>DocBook to DITA</String>
								</field>
								<field name="baseURL">
									<String></String>
								</field>
								<field name="footerURL">
									<String></String>
								</field>
								<field name="fOPMethod">
									<String>pdf</String>
								</field>
								<field name="fOProcessorName">
									<String>Apache FOP</String>
								</field>
								<field name="headerURL">
									<String></String>
								</field>
								<field name="inputXSLURL">
									<String>${framework}/5.0/tools/db4-upgrade.xsl</String>
								</field>
								<field name="inputXMLURL">
									<String>${currentFileURL}</String>
								</field>
								<field name="defaultScenario">
									<Boolean>false</Boolean>
								</field>
								<field name="isFOPPerforming">
									<Boolean>false</Boolean>
								</field>
								<field name="type">
									<String>XSL</String>
								</field>
								<field name="saveAs">
									<Boolean>true</Boolean>
								</field>
								<field name="openInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="outputFile">
									<File>${cfd}/${cfn}.dita</File>
								</field>
								<field name="outputResource">
									<String>${cfd}/${cfn}.dita</String>
								</field>
								<field name="openOtherLocationInBrowser">
									<Boolean>false</Boolean>
								</field>
								<field name="locationToOpenInBrowserURL">
									<null/>
								</field>
								<field name="openInEditor">
									<Boolean>true</Boolean>
								</field>
								<field name="showInHTMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInXMLPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInSVGPane">
									<Boolean>false</Boolean>
								</field>
								<field name="showInResultSetPane">
									<Boolean>false</Boolean>
								</field>
								<field name="useXSLTInput">
									<Boolean>true</Boolean>
								</field>
								<field name="xsltParams">
									<list>
										<transformationParameter>
											<field name="paramDescription">
												<paramDescriptor>
													<field name="localName">
														<String>IDENTIFY_SOURCE</String>
													</field>
													<field name="prefix">
														<null/>
													</field>
													<field name="namespace">
														<null/>
													</field>
												</paramDescriptor>
											</field>
											<field name="value">
												<String>no</String>
											</field>
											<field name="hasXPathValue">
												<Boolean>false</Boolean>
											</field>
										</transformationParameter>
									</list>
								</field>
								<field name="cascadingStylesheets">
									<String-array>
										<String>${frameworks}/dita/DITA-OT/plugins/dbdita/db2dita/docbook2dita.xsl</String>
									</String-array>
								</field>
								<field name="xslTransformer">
									<String>Saxon-EE</String>
								</field>
								<field name="extensionURLs">
									<String-array/>
								</field>
							</scenario>
						</scenario-array>
					</field>
					<field name="validationScenarios">
						<validationScenario-array>
							<validationScenario>
								<field name="pairs">
									<list>
										<validationUnit>
											<field name="validationType">
												<validationUnitType>
													<field name="validationInputType">
														<String>text/any</String>
													</field>
												</validationUnitType>
											</field>
											<field name="url">
												<String>${currentFileURL}</String>
											</field>
											<field name="validationEngine">
												<validationEngine>
													<field name="engineType">
														<String>&lt;Default engine></String>
													</field>
													<field name="allowsAutomaticValidation">
														<Boolean>true</Boolean>
													</field>
												</validationEngine>
											</field>
											<field name="allowAutomaticValidation">
												<Boolean>true</Boolean>
											</field>
											<field name="extensions">
												<null/>
											</field>
											<field name="validationSchema">
												<null/>
											</field>
										</validationUnit>
										<validationUnit>
											<field name="validationType">
												<validationUnitType>
													<field name="validationInputType">
														<String>text/xml</String>
													</field>
												</validationUnitType>
											</field>
											<field name="url">
												<String>${currentFileURL}</String>
											</field>
											<field name="validationEngine">
												<validationEngine>
													<field name="engineType">
														<String>Table Layout Validation</String>
													</field>
													<field name="allowsAutomaticValidation">
														<Boolean>true</Boolean>
													</field>
												</validationEngine>
											</field>
											<field name="allowAutomaticValidation">
												<Boolean>true</Boolean>
											</field>
											<field name="extensions">
												<null/>
											</field>
											<field name="validationSchema">
												<null/>
											</field>
										</validationUnit>
									</list>
								</field>
								<field name="type">
									<String>Validation_scenario</String>
								</field>
								<field name="name">
									<String>Docbook</String>
								</field>
							</validationScenario>
						</validationScenario-array>
					</field>
					<field name="defaultValidationScenarios">
						<list>
							<String>Docbook</String>
						</list>
					</field>
					<field name="defaultTransformationScenarios">
						<null/>
					</field>
					<field name="extensionsBundleClassName">
						<String>ro.sync.ecss.extensions.docbook.DocBook4ExtensionsBundle</String>
					</field>
					<field name="useImposedInitialPage">
						<Boolean>true</Boolean>
					</field>
					<field name="imposedInitialPage">
						<String>Author</String>
					</field>
					<field name="elementLocatorExtension">
						<null/>
					</field>
					<field name="schemaManagerFilterExtension">
						<null/>
					</field>
					<field name="authorSWTDndExtension">
						<null/>
					</field>
					<field name="textSWTDndExtension">
						<null/>
					</field>
					<field name="authorSwingDndExtension">
						<null/>
					</field>
					<field name="cssStylesFilterExtension">
						<null/>
					</field>
					<field name="attributesValueEditor">
						<null/>
					</field>
					<field name="priority">
						<Integer>2</Integer>
					</field>
					<field name="xmlNodeCustomizerExtension">
						<null/>
					</field>
					<field name="externalObjectInsertionHandler">
						<null/>
					</field>
					<field name="customAttributeValueEditor">
						<null/>
					</field>
					<field name="textModeExternalObjectInsertionHandler">
						<null/>
					</field>
				</documentTypeDescriptor>
			</documentTypeDescriptor-array>
		</entry>
	</serializableOrderedMap>
</serialized>