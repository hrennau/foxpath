<?xml version="1.0" encoding="UTF-8"?>
<project name="dita2reveal" default="dita2reveal" basedir="." xmlns:dita="http://dita-ot.sourceforge.net">
    
    <!-- ================================================== 
        Properties
    -->
    
    <!-- Output directory of the reveal transformation -->
    <property name="output.dir" value="${dita.dir}${file.separator}..${file.separator}..${file.separator}out${file.separator}reveal"/>
    
    <!-- Download URL of the reveal.js archive. -->
    <property name="reveal.download.url" value="https://github.com/hakimel/reveal.js/archive/2.6.2.zip"/>
    
    <!-- Filename of the reveal.js archive. -->
    <property name="reveal.archive.name" value="2.6.2.zip"/>
    
    <!-- Directory name of reveal.js that is stored in the downloaded archive. -->
    <property name="reveal.directory.name" value="reveal.js-2.6.2"/>
    
    <!-- HTML version. Property is required by DITA-OT2.x -->
    <property name="html-version" value="html5"/>
    
    <!-- File extension of the output files -->
    <property name="args.outext" value=".html"/>
    
    <!-- EXM-33356 FIXED REVEAL JS DIR FOR NOW -->
    <property name="revealCacheDir" value="${dita.plugin.org.doctales.reveal.dir}"/>
    <!-- Cache directory for reveal.js files. -->
    <property name="revealCacheDir" value="${user.home}${file.separator}.ditaToRevealJSCache"/>
    
    
    <!-- ==================================================
         Extension Points
    -->
    <extension-point id="org.doctales.reveal.param" name="Custom parameters"/>
    
    
    <!-- ================================================== 
        Targets
    -->
    
    <!-- The main target -->
    <target name="dita2reveal" unless="noMap" depends="
        clean_reveal,
        build-init,
        preprocess,
        dita.map.xhtml,
        dita.topics.xhtml.reveal,
        prepare_reveal,
        copy-user-css
        " dita:extension="depends org.dita.dost.platform.InsertDependsAction"/>
    
    <target name="reveal" unless="noMap" depends="dita2reveal" />
    
    <!-- Clean the out/reveal directory -->
    <target name="clean_reveal">
        <condition property="isRevealJS">
            <equals arg1="${transtype}" arg2="reveal" />
        </condition>
        
        <echo>CLEAN REVEAL ${isRevealJS} |${transtype}|</echo>
        <delete dir="${output.dir}" />
    </target>
    
    <!-- Meta target for reveal.js processing. -->
    <target name="prepare_reveal">
        <!--<mkdir dir="${revealCacheDir}"/>
        <get
            verbose="on"
            src="${reveal.download.url}"
            dest="${revealCacheDir}"
            skipexisting="true"/>
        <unzip
            src="${revealCacheDir}${file.separator}${reveal.archive.name}"
            dest="${revealCacheDir}"/>-->
        <copy todir="${output.dir}">
            <fileset dir="${revealCacheDir}${file.separator}${reveal.directory.name}"/>
        </copy>
        <delete file="${output.dir}${file.separator}index.html"/>
        <move file="${output.dir}${file.separator}${dita.map.filename.root}${args.outext}" tofile="${output.dir}${file.separator}index${args.outext}"/>
        <delete dir="${output.dir}${file.separator}test"/>
    </target>
    
    
    
    <!-- 
        Set the 'reveal.css' property, if the user provides a custom CSS file.
    -->
    <target name="copy-user-css-condition">
        <condition property="reveal.css.set" else="false">
            <isset property="reveal.css"/>
        </condition>
    </target>
    
    
    
    <!-- 
        Copy user defined CSS files to the output directory.
    -->
    <target name="copy-user-css"
        description="Execute this target only, when reveal.css is provided by the user."
        if="reveal.css"
        depends="copy-user-css-condition">
        <echo>Custom CSS file set ? ${reveal.css.set}</echo>
        <copy file="${reveal.css}" todir="${output.dir}${file.separator}css${file.separator}theme"/>
    </target>
    
    
    
    <!-- Automatically set "chunk='to-content'" on the temporary input file. -->
    <target name="setchunk" description="Set @chunk to-content on the temp input bookmap" if="isRevealJS">
    	<replaceregexp file="${dita.temp.dir}${file.separator}${dita.input.filename}" match="chunk=('|&quot;)(.*)('|&quot;)" replace="" encoding="UTF-8"/>	
        <replace file="${dita.temp.dir}${file.separator}${dita.input.filename}" token="&lt;bookmap " value="&lt;bookmap chunk='to-content' " encoding="UTF-8"/>
        <replace file="${dita.temp.dir}${file.separator}${dita.input.filename}" token="&lt;map " value="&lt;map chunk='to-content' " encoding="UTF-8"/>
	</target>
    
    <!-- XSLT transformation -->
    <!--<target name="dita.topics.xhtml.reveal" depends="dita.xhtml.init" description="Build XHTML output from dita inner and outer topics,which will adjust the directory.">-->
    <target name="dita.topics.xhtml.reveal" description="Build XHTML output from dita inner and outer topics,which will adjust the directory.">
        <xslt basedir="${dita.temp.dir}"
            destdir="${output.dir}"
            includesfile="${dita.temp.dir}${file.separator}${fullditatopicfile}"
            reloadstylesheet="${dita.xhtml.reloadstylesheet}"
            classpathref="dost.class.path"
            extension="${args.outext}"
            style="${dita.plugin.org.doctales.reveal.dir}/xsl/reveal.xsl"
            filenameparameter="FILENAME"
            filedirparameter="FILEDIR">
            
            <excludesfile name="${dita.temp.dir}${file.separator}${resourceonlyfile}" if="resourceonlyfile"></excludesfile>
            <includesfile name="${dita.temp.dir}${file.separator}${chunkedtopicfile}" if="chunkedtopicfile"></includesfile>
            <param name="TRANSTYPE" expression="${transtype}"></param>
            <param name="DITAEXT" expression="${dita.ext}" if="dita.ext"></param>
            <param name="FILTERFILE" expression="${dita.input.valfile.url}" if="dita.input.valfile"></param>
            <param name="CSS" expression="${args.css.file}" if="args.css.file"></param>
            <param name="CSSPATH" expression="${user.csspath}" if="user.csspath"></param>
            <param name="HDF" expression="${args.hdf}" if="args.hdf"></param>
            <param name="HDR" expression="${args.hdr}" if="args.hdr"></param>
            <param name="FTR" expression="${args.ftr}" if="args.ftr"></param>
            <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
            <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
            <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
            <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
            <param name="NOPARENTLINK" expression="${args.hide.parent.link}" if="args.hide.parent.link"></param>
            <param name="include.rellinks" expression="${include.rellinks}"></param>
            <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
            <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
            <param name="genDefMeta" expression="${args.gen.default.meta}" if="args.gen.default.meta"></param>
            <param name="OUTEXT" expression="${args.outext}" if="out.ext"></param>
            <param name="BASEDIR" expression="${basedir}"></param>
            <param name="OUTPUTDIR" expression="${output.dir}"></param>
            <param name="DBG" expression="${args.debug}" if="args.debug"></param>
            <param name="DEFAULTLANG" expression="${args.default.language}" if="args.default.language"></param>
            
            <!-- Switch the style sheet. -->
            <param name="reveal.css" expression="${args.reveal.css}" if="args.reveal.css"></param>
            
            <!-- Display controls in the bottom right corner. -->
            <param name="reveal.controls" expression="${args.reveal.controls}" if="args.reveal.controls"></param>
            
            <!-- Display a presentation progress bar. -->
            <param name="reveal.progress" expression="${args.reveal.progress}" if="args.reveal.progress"></param>
            
            <!-- Display the page number of the current slide. -->
            <param name="reveal.slidenumber" expression="${args.reveal.slidenumber}" if="args.reveal.slidenumber"></param>
            
            <!-- Push each slide change to the browser history. -->
            <param name="reveal.history" expression="${args.reveal.history}" if="args.reveal.history"></param>
            
            <!-- Enable keyboard shortcuts for navigation. -->
            <param name="reveal.keyboard" expression="${args.reveal.keyboard}" if="args.reveal.keyboard"></param>
            
            <!-- Enable the slide overview mode. -->
            <param name="reveal.overview" expression="${args.reveal.overview}" if="args.reveal.overview"></param>
            
            <!-- Vertical centering of slides. -->
            <param name="reveal.center" expression="${args.reveal.center}" if="args.reveal.center"></param>
            
            <!-- Enables touch navigation on devices with touch input. -->
            <param name="reveal.touch" expression="${args.reveal.touch}" if="args.reveal.touch"></param>
            
            <!-- Loop the presentation. -->
            <param name="reveal.loop" expression="${args.reveal.loop}" if="args.reveal.loop"></param>
            
            <!-- Change the presentation direction to be right-to-left. -->
            <param name="reveal.rtl" expression="${args.reveal.rtl}" if="args.reveal.rtl"></param>
            
            <!-- Turns fragments on and off globally. -->
            <param name="reveal.fragments" expression="${args.reveal.fragments}" if="args.reveal.fragments"></param>
            
            <!--
                Flags if the presentation is running in an embedded mode,
                i.e. contained within a limited portion of the screen.
            -->
            <param name="reveal.embedded" expression="${args.reveal.embedded}" if="args.reveal.embedded"></param>
            
            <!--
                Number of milliseconds between automatically proceeding to the
                next slide, disabled when set to 0, this value can be overwritten
                by using a data-autoslide attribute on your slides
            -->
            <param name="reveal.autoslide" expression="${args.reveal.autoslide}" if="args.reveal.autoslide"></param>
            
            <!-- Stop auto-sliding after user input. -->
            <param name="reveal.autoslidestoppable" expression="${args.reveal.autoslidestoppable}" if="args.reveal.autoslidestoppable"></param>
            
            <!-- Enable slide navigation via mouse wheel. -->
            <param name="reveal.mousewheel" expression="${args.reveal.mousewheel}" if="args.reveal.mousewheel"></param>
            
            <!-- Hides the address bar on mobile devices. -->
            <param name="reveal.hideaddressbar" expression="${args.reveal.hideaddressbar}" if="args.reveal.hideaddressbar"></param>
            
            <!-- Opens links in an iframe preview overlay. -->
            <param name="reveal.previewlinks" expression="${args.reveal.previewlinks}" if="args.reveal.previewlinks"></param>
            
            <!-- Set the transition style. -->
            <param name="reveal.transition" expression="${args.reveal.transition}" if="args.reveal.transition"></param>
            
            <!-- Set the transition speed. -->
            <param name="reveal.transitionspeed" expression="${args.reveal.transitionspeed}" if="args.reveal.transitionspeed"></param>
            
            <!-- Set the transition style for full page slide backgrounds. -->
            <param name="reveal.backgroundtransition" expression="${args.reveal.backgroundtransition}" if="args.reveal.backgroundtransition"></param>
            
            <!-- Set the number of slides away from the current that are visible. -->
            <param name="reveal.viewdistance" expression="${args.reveal.viewdistance}" if="args.reveal.viewdistance"></param>
            
            <!-- Set the parallax background image. -->
            <param name="reveal.parallaxbackgroundimage" expression="${args.reveal.parallaxbackgroundimage}" if="args.reveal.parallaxbackgroundimage"></param>
            
            <!-- Set the parallax background size. -->
            <param name="reveal.parallaxbackgroundsize" expression="${args.reveal.parallaxbackgroundsize}" if="args.reveal.parallaxbackgroundsize"></param>
            
            <!-- Generate vertical slides. -->
            <param name="reveal.generate.vertical.slides" expression="${args.reveal.generate.vertical.slides}" if="args.reveal.generate.vertical.slides"></param>
            
            <xmlcatalog refid="dita.catalog"/>
        </xslt>
    </target>
</project>
