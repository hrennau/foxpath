<project name="dita2epub" default="dita2epub"
  xmlns:dita="http://dita-ot.sourceforge.net"
  >
  
  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="epub.dir" file="${ant.file.dita2epub}"/>

	<!-- Global properties that affect the base Toolkit processing: -->
	
  <condition property="preprocess.maplink.skip" value="true">
    <isset property="epub.exclude.auto.rellinks" />
  </condition>
  <condition property="preprocess.move-links.skip" value="true">
    <isset property="epub.exclude.auto.rellinks" />
  </condition>  	

	
	<target name="dita2epub"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
		dita:depends="d4p.map-driven-build-init, build-init, preprocess, epub"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>
  
  <target name="epub"
    unless="noMap"
    depends="dita.map.epub, zipepub"/>
	  
  <target name="zipepub">
    <!-- Two steps because mimetype must go in first,
      uncompressed. Looks like ant puts later zipped files in
      first, so mimetype is in second zip task. -->
      <!-- OXYGEN PATCH START for ANT 1.9  EXM-28673 -->
      <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub" 
             basedir="${epub.temp.dir}" 
             compress="true" 
             includes="META-INF${file.separator}container.xml,toc.ncx,
                            content.opf,container.opf,**/*.html,**/*.css,**/*.HTML,**/*.CSS,
                            **/*.jpg,**/*.jpeg,**/*.gif,**/*.png,**/*.svg,
                            **/*.JPG,**/*.JPEG,**/*.GIF,**/*.PNG,**/*.SVG"
             zip64Mode="never"/>
      <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub" 
             basedir="${epub.temp.dir}" 
             includes="mimetype" 
             update="true" 
             keepcompression="true" 
             compress="false"
             zip64Mode="never"/>
      <!-- OXYGEN PATCH END for ANT 1.9  EXM-28673 -->
  </target>
  
    
  <target name="dita.map.epub.init"
    description="Init properties for Epub">
  	
  	<property name="epub.temp.dir" value="${dita.temp.dir}${file.separator}epub_temp"/>
  	
    <property name="d4p.is.map.driven" value="true"/>

    <condition property="topics.output.dir" value="topics">
  		<not>
  			<isset property="topics.output.dir"/>
  	  </not>
  	</condition>

  	<!-- The name of the directory, within the ePub package, to contain all images: -->
  		
    <condition property="images.output.dir" value="images">
  		<not>
    	  <isset property="images.output.dir" />
  		</not>
    </condition>
  	
    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext" />
      </not>
    </condition>
  	
    <condition property="css.output.dir" value="${topics.output.dir}">
      <not>
        <isset property="args.css.output.dir" />
      </not>
    </condition>
    <condition property="css.output.dir" value="${args.css.output.dir}">
      <isset property="args.css.output.dir" />
    </condition>
  	
  	<condition property="epub.hide.parent.link" value="yes">
  		<not>
      	<isset property="args.hide.parent.link" />
  		</not>
  	</condition>
  	<condition property="epub.hide.parent.link" value="${args.hide.parent.link}">
    	<isset property="args.hide.parent.link" />
  	</condition>
  	
  	<!-- Defines the @class value to use for topic elements generated for topicheads. -->
  	<condition property="title.only.topic.class.spec" value="- topic/topic ">
  		<not>
    	  <isset property="title.only.topic.class.spec" />
  		</not>
  	</condition>
  	
  	<!-- Defines the @class value to use for topic title elements generated for topicheads. -->
  	<condition property="title.only.topic.title.class.spec" value="- topic/title ">
  		<not>
    	  <isset property="title.only.topic.title.class.spec" />
  		</not>
  	</condition>
    	  	
  	<!-- Set this property to set the ePub URI stub to a useful value. -->
  	<condition property="idURIStub"
  	  value="http://my-URI-stub/">
  		<not>
    	  <isset property="idURIStub" />
  		</not>
    </condition>

  	<!-- Leading portion of full EPUB publication ID to be appended to the publication ID -->
  	<condition property="epub.pubid.uri.stub" value="http://my-URI-stub/">
  		<not>
    	  <isset property="epub.pubid.uri.stub" />
  		</not>
  	</condition>
  	
    <condition property="noPlugin">
      <equals arg1="${dita.epub.plugin}" arg2="no" />
    </condition>
  	
  	
  	<echo message="+++ epub-specific properties:"/>
  	<echoproperties format="text" regex="^(epub|css|out\.|preprocess)" taskname="echo"/>
  </target>
  

  
  <target name="dita.map.epub" depends="dita.map.epub.init, epub-copy-css" 
  	description="Generate all ePub components from input map and topics">
  	
  	<mkdir dir="${epub.temp.dir}"/>
  	<makeurl file="${epub.temp.dir}" property="epub.xslt.outdir"/>
  	<makeurl file="${dita.temp.dir}" property="epub.xslt.tempdir"/>
  	<makeurl file="${cover.graphic.file}" property="cover.graphic.uri" validate="false"/>
  	
  	<property name="args.xsl" location="${epub.dir}/xsl/map2epub.xsl"/>
    <makeurl file="${dita.input.valfile}" property="dita.input.valfile.url" validate="no"></makeurl>    
    
  	<echo message="[DEBUG] input file='${dita.temp.dir}${file.separator}${user.input.file}'"/>

  	<!-- NOTE: since we're not using the direct output of the base XSLT transform we just
  	     set the output directory to the temp dir where it will be ignored.
  	  -->
    <xslt processor="trax"
      basedir="${dita.temp.dir}"
      destdir="${dita.temp.dir}"
      includesfile="${dita.temp.dir}${file.separator}${user.input.file.listfile}"
      classpathref="dost.class.path"
      style="${args.xsl}">
     	<param name="cssOutputDir" expression="${css.output.dir}"/>
      <param name="debug" expression="${debug}"/>
    	<param name="coverGraphicUri" expression="${cover.graphic.uri}" if="cover.graphic.file"/>
    	<param name="idURIStub" expression="${epub.pubid.uri.stub}"/>
     	<param name="imagesOutputDir" expression="${images.output.dir}"/>
     	<param name="outdir" expression="${epub.xslt.outdir}"/>
      <param name="outext" expression="${out.ext}"/><!-- Extension to use for result files, e.g., ".html" -->
     	<param name="tempdir" expression="${epub.xslt.tempdir}"/>
    	<param name="rawPlatformString" expression="${os.name}"/>
    	<param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"/>
    	<param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"/>
     	<param name="topicsOutputDir" expression="${topics.output.dir}"/>
    	<param name="generateGlossary" expression="${html2.generate.glossary}" if="html2.generate.glossary"/>
    	<param name="generateHtmlToc" expression="${epub.generate.html.toc}" if="epub.generate.html.toc"/>
    	<param name="generateIndex" expression="${html2.generate.index}" if="html2.generate.index"/>
      <param name="html.toc.OUTPUTCLASS" expression="${args.xhtml.toc.class}" if="args.xhtml.toc.class" />
      <param name="maxTocDepth" expression="${d4p.max.toc.depth}" if="d4p.max.toc.depth"/>
      <param name="maxNavDepth" expression="${d4p.max.nav.depth}" if="d4p.max.nav.depth"/>

    	<!-- Parameters from dita2xhtml and similar transtypes: -->   
      <param name="WORKDIR" expression="${workdir}" if="workdir"/>
      <param name="BASEDIR" expression="${basedir}"></param>
      <param name="CSS" expression="${args.css.file}" if="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath" />
      <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
      <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
      <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
      <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
      <param name="NOPARENTLINK" expression="${epub.hide.parent.link}" />
      <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
      <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
    	<param name="OUTPUTDIR" expression="${epub.temp.dir}"/>
    	<param name="FILEDIR" expression="."/>
      <param name="FILTERFILE" expression="${dita.input.valfile.url}" if="dita.input.valfile"></param>
      <param name="DBG" expression="${args.debug}" if="args.debug"></param>
      <dita:extension id="d4p.epub.xslt.param" behavior="org.dita.dost.platform.InsertAction"/>

      <xmlcatalog refid="dita.catalog"></xmlcatalog>
    </xslt>
  	
  	<antcall target="epub.copy.graphics"/>
  	
  </target>
  
  <target name="epub.copy.graphics" 
	  description="Copies graphics from input to the ePub output directory based on the graphic map generated during epub generation">
  	<ant antfile="${epub.temp.dir}/copy-graphics.xml"  		
  		>
  	</ant>
	</target>
	
  <target name="epub-copy-css"  description="Copy CSS files">    
    <condition property="user.copycss.yes">
      <isset property="args.css.present"/>
    </condition>
    <property name="user.csspath.real" value="${epub.temp.dir}/${css.output.dir}"/>
  	<echo message="Copying css files to '${user.csspath.real}"/>
    <mkdir dir="${user.csspath.real}"/>    
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.plugin.org.dita.xhtml.dir}/resource" includes="*.css"/>
    </copy>    
    <!-- Copy user specify css file when required -->
    <antcall target="epub-copy-css-user"/>
  </target>

  <target name="epub-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"/>
  </target>

</project>
