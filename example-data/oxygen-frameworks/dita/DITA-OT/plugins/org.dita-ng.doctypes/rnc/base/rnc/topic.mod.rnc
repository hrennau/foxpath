# ============================================================= 
# MODULE:    DITA Topic RNC              
# VERSION:   1.2                                                
# DATE:      October 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rnc:topic.mod.rnc
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rnc:topic.mod.rnc:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Relax NG schema to declare the elements and 
#             specialization attributes for the base Topic type             
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ditaarch = "http://dita.oasis-open.org/architecture/2005/"

# Define the domain values of this module
domains-atts-value |= ""
arch-atts =
  [ a:defaultValue = "1.2" ]
  attribute ditaarch:DITAArchVersion { text }?
topic-info-types = info-types
info-types = topic.element
# Define patterns
abstract = abstract.element
body = body.element
bodydiv = bodydiv.element
example = example.element
link = link.element
linkinfo = linkinfo.element
linklist = linklist.element
linkpool = linkpool.element
linktext = linktext.element
prolog = prolog.element
related-links = related-links.element
searchtitle = searchtitle.element
section = section.element
sectiondiv = sectiondiv.element
shortdesc = shortdesc.element
titlealts = titlealts.element
# Content elements common to map and topic
include "commonElements.mod.rnc"
# MetaData Elements, plus indexterm
include "metaDecl.mod.rnc"
# COMMON ATTLIST SETS
abstract.cnt =
  text
  | basic.block
  | basic.ph
  | data.elements.incl
  | foreign.unknown.incl
  | shortdesc
  | txt.incl
body.cnt =
  basic.block
  | data.elements.incl
  | draft-comment
  | foreign.unknown.incl
  | required-cleanup
# bodydiv also includes bodydiv and section
bodydiv.cnt =
  text
  | basic.block
  | basic.ph
  | data.elements.incl
  | foreign.unknown.incl
  | txt.incl
example.cnt =
  text
  | basic.block
  | basic.ph
  | data.elements.incl
  | foreign.unknown.incl
  | title
  | txt.incl
section.cnt =
  text
  | basic.block
  | basic.ph
  | data.elements.incl
  | foreign.unknown.incl
  | sectiondiv
  | title
  | txt.incl
section.notitle.cnt =
  text
  | basic.block
  | basic.ph
  | data.elements.incl
  | foreign.unknown.incl
  | sectiondiv
  | txt.incl
# sectiondiv also includes sectiondiv
sectiondiv.cnt =
  text
  | basic.block
  | basic.ph
  | data.elements.incl
  | foreign.unknown.incl
  | txt.incl
relational-atts =
  attribute type { text }?,
  attribute format { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute role {
    "ancestor"
    | "child"
    | "cousin"
    | "descendant"
    | "external"
    | "friend"
    | "next"
    | "other"
    | "parent"
    | "previous"
    | "sample"
    | "sibling"
    | "-dita-use-conref-target"
  }?,
  attribute otherrole { text }?
# Define elements content and attributes

# LONG NAME: Topic
topic.content =
  title,
  titlealts?,
  (shortdesc | abstract)?,
  prolog?,
  body?,
  related-links?,
  topic-info-types*
topic.attributes =
  attribute id { xsd:ID },
  conref-atts,
  select-atts,
  localization-atts,
  attribute outputclass { text }?
topic.element =
  
  ## The <topic> element is the top-level DITA element for a single-subject
  ##         topic or article. Other top-level DITA elements that are more content-specific are
  ##         <concept>, <task>, <reference>, and <glossary>. 
  ##         Category: Topic elements
  element topic { topic.attlist, topic.content }
topic.attlist &= topic.attributes, arch-atts, domains-atts
# LONG NAME: Title Alternatives
titlealts.content = navtitle?, searchtitle?
titlealts.attributes = univ-atts
titlealts.element =
  
  ## The alternate title element (<titlealts>) is optional, but can occur after
  ##         the topic title. Two elements can be inserted as sub-elements of <titlealts>: navigation
  ##         title <navtitle> and search title <searchtitle>. 
  ##         Category: Topic elements
  element titlealts { titlealts.attlist, titlealts.content }
titlealts.attlist &= titlealts.attributes
# navtitle moved to commonElements.mod.rnc for DITA 1.2

# LONG NAME: Search Title
searchtitle.content = (words.cnt | ph)*
searchtitle.attributes = univ-atts
searchtitle.element =
  
  ## When your DITA topic is transformed to XHTML, the <searchtitle> element is
  ##         used to create a title element at the top of the resulting HTML file. This title is normally
  ##         used in search result summaries by some search engines, such as that in Eclipse
  ##         (http://eclipse.org); if not set, the XHTML's title element defaults to the source topic's
  ##         title content (which may not be as well optimized for search summaries) 
  ##         Category: Topic elements
  element searchtitle { searchtitle.attlist, searchtitle.content }
searchtitle.attlist &= searchtitle.attributes
# LONG NAME: Abstract
abstract.content = abstract.cnt*
abstract.attributes =
  univ-atts,
  attribute outputclass { text }?
abstract.element =
  
  ## The abstract element occurs between the topic title and the topic body, as
  ##         the initial content of a topic. It can contain paragraph-level content as well as one or
  ##         more shortdesc elements which can be used for providing link previews or summaries. The
  ##         <abstract> element cannot be overridden by maps, but its contained <shortdesc>
  ##         elements can be, for the purpose of creating link summaries or previews. 
  ##         Category: Topic elements
  element abstract { abstract.attlist, abstract.content }
abstract.attlist &= abstract.attributes
# LONG NAME: Body
body.content = (body.cnt | bodydiv | example | section)*
body.attributes =
  univ-atts,
  attribute outputclass { text }?
body.element =
  
  ## The <body> element is the container for the main content of a <topic>.
  ##         Category: Topic elements
  element body { body.attlist, body.content }
body.attlist &= body.attributes
# LONG NAME: Body division
bodydiv.content = (bodydiv.cnt | bodydiv | section)*
bodydiv.attributes =
  univ-atts,
  attribute outputclass { text }?
bodydiv.element =
  
  ## The <bodydiv> element is used to contain informal blocks of information
  ##         within the body of a topic. The bodydiv element is specifically designed to be a grouping
  ##         element, without any explicit semantics, other than to organize subsets of content into
  ##         logical groups that are not intended or should not be contained as a topic. As such, it does
  ##         not contain an explicit title to avoid enabling the creation of deeply nested content that
  ##         would otherwise be written as separate topics. Content that requires a title should use a
  ##         section element or a nested topic.
  element bodydiv { bodydiv.attlist, bodydiv.content }
bodydiv.attlist &= bodydiv.attributes
# LONG NAME: No Topic nesting
no-topic-nesting.element =
  
  ## The <no-topic-nesting> element is a placeholder in the DITA architecture.
  ##         It is not actually used by the default DITA document types; it is for use only when creating
  ##         a validly customized document type where the information designer wants to eliminate the
  ##         ability to nest topics. Not intended for use by authors, and has no associated output
  ##         processing. 
  ##         Category: Specialization elements
  element no-topic-nesting { no-topic-nesting.attlist, empty }
# LONG NAME: Section
section.content = section.cnt*
section.attributes =
  attribute spectitle { text }?,
  univ-atts,
  attribute outputclass { text }?
section.element =
  
  ## The <section> element represents an organizational division in a topic.
  ##         Sections are used to organize subsets of information that are directly related to the topic.
  ##         For example, the titles Reference Syntax, Example and Properties might represent
  ##         section-level discourse within a topic about a command-line processâ€”the content in each
  ##         section relates uniquely to the subject of that topic. Multiple sections within a single
  ##         topic do not represent a hierarchy, but rather peer divisions of that topic. Sections cannot
  ##         be nested. A section may have an optional title. 
  ##         Category: Topic elements
  element section { section.attlist, section.content }
section.attlist &= section.attributes
# LONG NAME: Section division
sectiondiv.content = (sectiondiv.cnt | sectiondiv)*
sectiondiv.attributes =
  univ-atts,
  attribute outputclass { text }?
sectiondiv.element =
  
  ## The <sectiondiv> element allows logical grouping of content within a
  ##         section. There is no additional semantic associated with the sectiondiv element, aside from
  ##         its function as a container for other content. The sectiondiv element does not contain a
  ##         title; the lowest level of titled content within a topic is the section itself. If
  ##         additional hierarchy is required, nested topics should be used in place of the
  ##         section.
  element sectiondiv { sectiondiv.attlist, sectiondiv.content }
sectiondiv.attlist &= sectiondiv.attributes
# LONG NAME: Example
example.content = example.cnt*
example.attributes =
  attribute spectitle { text }?,
  univ-atts,
  attribute outputclass { text }?
example.element =
  
  ## The <example> element is a section with the specific role of containing
  ##         examples that illustrate or support the current topic. The <example> element has the same
  ##         content model as <section>. 
  ##         Category: Topic elements
  element example { example.attlist, example.content }
example.attlist &= example.attributes
# PROLOG (METADATA FOR TOPICS)

# TYPED DATA ELEMENTS

# typed content definitions

# typed, localizable content

# LONG NAME: Prolog
prolog.content =
  author*,
  source?,
  publisher?,
  copyright*,
  critdates?,
  permissions?,
  metadata*,
  resourceid*,
  (data.elements.incl | foreign.unknown.incl)*
prolog.attributes = univ-atts
prolog.element =
  
  ## The <prolog> element contains information about the topic as an whole (for
  ##         example, author information or subject category) that is either entered by the author or
  ##         machine-maintained. Much of the metadata inside the <prolog> will not be displayed with
  ##         the topic on output, but may be used by processes that generate search indexes or customize
  ##         navigation. 
  ##         Category: Prolog elements
  element prolog { prolog.attlist, prolog.content }
prolog.attlist &= prolog.attributes
# BASIC DOCUMENT ELEMENT DECLARATIONS

# (rich text)

# BASE FORM PHRASE TYPES

# LINKING GROUPING

# LONG NAME: Related Links
related-links.content = (link | linklist | linkpool)*
related-links.attributes =
  relational-atts,
  univ-atts,
  attribute outputclass { text }?
related-links.element =
  
  ## The related information links of a topic (<related-links> element) are
  ##         stored in a special section following the body of the topic. After a topic is processed into
  ##         it final output form, the related links are usually displayed at the end of the topic,
  ##         although some Web-based help systems might display them in a separate navigation frame.
  ##         Category: Topic elements
  element related-links { related-links.attlist, related-links.content }
related-links.attlist &= related-links.attributes
# LONG NAME: Link
link.content = linktext?, desc?
link.attributes =
  attribute href { text }?,
  attribute keyref { text }?,
  attribute query { text }?,
  relational-atts,
  univ-atts,
  attribute outputclass { text }?
link.element =
  
  ## The <link> element defines a relationship to another topic. Links
  ##         represent the types and roles of topics in a web of information, and therefore represent
  ##         navigational links within that web. Links are typically sorted on output based on their
  ##         attributes. The optional container elements for link (<linkpool> and <linklist>) allow
  ##         authors to define groups with common attributes, or to preserve the authored sequence of
  ##         links on output. Links placed in a <linkpool> may be rearranged for display purposes
  ##         (combined with other local or map-based links); links in a <linklist> should be displayed
  ##         in the order they are defined. Refer to those elements for additional explanation. 
  ##         Category: Related Links elements
  element link { link.attlist, link.content }
link.attlist &= link.attributes
# LONG NAME: Link Text
linktext.content = (words.cnt | ph)*
linktext.attributes = univ-atts
linktext.element =
  
  ## The <linktext> element provides the literal label or line of text for a
  ##         link. In most cases, the text of a link can be resolved during processing by cross reference
  ##         with the target resource. Use the <linktext> element only when the target cannot be
  ##         reached, such as when it is a peer or external link, or the target is local but not in DITA
  ##         format. When used inside a topic, it will be used as the text for the specified link; when
  ##         used within a map, it will be used as the text for generated links that point to the
  ##         specified topic. 
  ##         Category: Related Links elements
  element linktext { linktext.attlist, linktext.content }
linktext.attlist &= linktext.attributes
# LONG NAME: Link List
linklist.content = title?, desc?, (linklist | link)*, linkinfo?
linklist.attributes =
  attribute collection-type {
    "choice"
    | "family"
    | "sequence"
    | "tree"
    | "unordered"
    | "-dita-use-conref-target"
  }?,
  attribute duplicates { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute mapkeyref { text }?,
  relational-atts,
  univ-atts,
  attribute spectitle { text }?,
  attribute outputclass { text }?
linklist.element =
  
  ## The <linklist> element defines an author-arranged group of links. Within
  ##         <linklist>, the organization of links on final output is in the same order as originally
  ##         authored in the DITA topic. 
  ##         Category: Related Links elements
  element linklist { linklist.attlist, linklist.content }
linklist.attlist &= linklist.attributes
# LONG NAME: Link Information
linkinfo.content = desc.cnt*
linkinfo.attributes = univ-atts
linkinfo.element =
  
  ## The <linkinfo> element allows you to place a descriptive paragraph
  ##         following a list of links in a <linklist> element. Category: 
  ##         Related Links elements
  element linkinfo { linkinfo.attlist, linkinfo.content }
linkinfo.attlist &= linkinfo.attributes
# LONG NAME: Link Pool
linkpool.content = (linkpool | link)*
linkpool.attributes =
  attribute collection-type {
    "choice"
    | "family"
    | "sequence"
    | "tree"
    | "unordered"
    | "-dita-use-conref-target"
  }?,
  attribute duplicates { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute mapkeyref { text }?,
  relational-atts,
  univ-atts,
  attribute outputclass { text }?
linkpool.element =
  
  ## The <linkpool> element defines a group of links that have common
  ##         characteristics, such as type or audience or source. When links are not in a <linklist>
  ##         (that is, they are in <related-links> or <linkpool> elements), the organization of
  ##         links on final output is determined by the output process, not by the order that the links
  ##         actually occur in the DITA topic. 
  ##         Category: Related Links elements
  element linkpool { linkpool.attlist, linkpool.content }
linkpool.attlist &= linkpool.attributes
# Specialization attributes. Global attributes and class defaults
abstract.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/abstract " ] attribute class { text }?
body.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/body " ] attribute class { text }?
bodydiv.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/bodydiv " ] attribute class { text }?
example.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/example " ] attribute class { text }?
link.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/link " ] attribute class { text }?
linkinfo.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/linkinfo " ] attribute class { text }?
linklist.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/linklist " ] attribute class { text }?
linkpool.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/linkpool " ] attribute class { text }?
linktext.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/linktext " ] attribute class { text }?
no-topic-nesting.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/no-topic-nesting " ]
  attribute class { text }?
prolog.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/prolog " ] attribute class { text }?
related-links.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/related-links " ]
  attribute class { text }?
searchtitle.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/searchtitle " ] attribute class { text }?
section.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section " ] attribute class { text }?
sectiondiv.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/sectiondiv " ] attribute class { text }?
titlealts.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/titlealts " ] attribute class { text }?
topic.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/topic " ] attribute class { text }?
# Shortdesc in map uses map/shortdesc so this one must be 
# included, even though the element is common.
shortdesc.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/shortdesc " ] attribute class { text }?
