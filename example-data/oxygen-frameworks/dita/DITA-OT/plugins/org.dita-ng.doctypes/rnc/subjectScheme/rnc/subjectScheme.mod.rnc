# ============================================================= 
# MODULE:    DITA Subject Scheme Map - RNC              
# VERSION:   1.2                                                
# DATE:      November 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rnc:subjectScheme.mod.rnc
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rnc:subjectScheme.mod.rnc:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Declaring the domain restrictions for the 
#             Subject Scheme Maps
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Define the domain values of this module
domains-atts-value |= "(map subjectScheme)"
schemeref = schemeref.element
hasNarrower = hasNarrower.element
hasKind = hasKind.element
hasPart = hasPart.element
hasInstance = hasInstance.element
hasRelated = hasRelated.element
subjectdef = subjectdef.element
subjectHead = subjectHead.element
subjectHeadMeta = subjectHeadMeta.element
enumerationdef = enumerationdef.element
elementdef = elementdef.element
attributedef = attributedef.element
defaultSubject = defaultSubject.element
relatedSubjects = relatedSubjects.element
subjectRelTable = subjectRelTable.element
subjectRelHeader = subjectRelHeader.element
subjectRel = subjectRel.element
subjectRole = subjectRole.element
# ELEMENT DECLARATIONS

# This differs from topicref-atts-no-toc only by providing a
# default for @processing-role
topicref-atts-for-subjectScheme =
  attribute collection-type {
    "choice"
    | "family"
    | "sequence"
    | "unordered"
    | "-dita-use-conref-target"
  }?,
  attribute type { text }?,
  [ a:defaultValue = "resource-only" ]
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute locktitle { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute format { text }?,
  attribute linking {
    "none"
    | "normal"
    | "sourceonly"
    | "targetonly"
    | "-dita-use-conref-target"
  }?,
  [ a:defaultValue = "no" ]
  attribute toc { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute print {
    "no" | "printonly" | "yes" | "-dita-use-conref-target"
  }?,
  attribute search { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute chunk { text }?
# LONG NAME: Subject Scheme Map
subjectScheme.content =
  title?,
  topicmeta?,
  (anchor
   | data.elements.incl
   | enumerationdef
   | hasInstance
   | hasKind
   | hasNarrower
   | hasPart
   | hasRelated
   | navref
   | relatedSubjects
   | reltable
   | schemeref
   | subjectdef
   | subjectHead
   | subjectRelTable
   | topicref)*
subjectScheme.attributes =
  attribute id { xsd:ID }?,
  conref-atts,
  attribute anchorref { text }?,
  attribute outputclass { text }?,
  localization-atts,
  topicref-atts-for-subjectScheme,
  select-atts
# doc:A subjectScheme is a specialized DITA map that defines a collection of controlled values rather than a collection of topics.
subjectScheme.element =
  element subjectScheme { subjectScheme.attlist, subjectScheme.content }
subjectScheme.attlist &=
  subjectScheme.attributes, arch-atts, domains-atts
# LONG NAME: Scheme reference
schemeref.content = topicmeta?, data.elements.incl*
schemeref.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute query { text }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  [ a:defaultValue = "scheme" ] attribute type { text }?,
  [ a:defaultValue = "ditamap" ] attribute format { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  univ-atts
# doc:A <schemeref> element provides a reference to another scheme. Typically, the referenced scheme defines a base set of controlled values extended by the current scheme. The values in the referenced scheme are merged with the current scheme; the result is equivalent to specifying all of the values in a single map.
schemeref.element =
  element schemeref { schemeref.attlist, schemeref.content }
schemeref.attlist &= schemeref.attributes
# LONG NAME: Has Narrower Relationship
hasNarrower.content =
  topicmeta?,
  (data.elements.incl | subjectdef | subjectHead | topicref)*
hasNarrower.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute format { text }?,
  attribute type { text }?,
  univ-atts
# doc:For subjects within the <hasNarrower> element, the container subject is more general than each of the contained subjects. That is, this element makes the default hierarchical relationship explicit, although the way in which a relationship is narrower is not specified.
hasNarrower.element =
  element hasNarrower { hasNarrower.attlist, hasNarrower.content }
hasNarrower.attlist &= hasNarrower.attributes
# LONG NAME: Has Kind Relationship
hasKind.content =
  topicmeta?,
  (data.elements.incl | subjectdef | subjectHead | topicref)*
hasKind.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute format { text }?,
  attribute type { text }?,
  univ-atts
# doc:Specifies that the contained hierarchy expresses KIND-OF relationships between subjects.
hasKind.element = element hasKind { hasKind.attlist, hasKind.content }
hasKind.attlist &= hasKind.attributes
# LONG NAME: Has Part Relationship
hasPart.content =
  topicmeta?,
  (data.elements.incl | subjectdef | subjectHead | topicref)*
hasPart.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute format { text }?,
  attribute type { text }?,
  univ-atts
# doc:The <hasPart> element specifies that the contained hierarchy expresses PART-OF relationships between subjects.
hasPart.element = element hasPart { hasPart.attlist, hasPart.content }
hasPart.attlist &= hasPart.attributes
# LONG NAME: Has Instance Relationship
hasInstance.content =
  topicmeta?,
  (data.elements.incl | subjectdef | subjectHead | topicref)*
hasInstance.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute format { text }?,
  attribute type { text }?,
  univ-atts
# doc:Specifies that the contained hierarchy expresses INSTANCE-OF relationships between subjects. In an INSTANCE-OF hierarchy, the child subject is a specific entity or object and the parent subject is a type, kind, or class of entity or object. For example, New York City is a specific instance of a city.
hasInstance.element =
  element hasInstance { hasInstance.attlist, hasInstance.content }
hasInstance.attlist &= hasInstance.attributes
# LONG NAME: Has Related Relationship
hasRelated.content =
  topicmeta?,
  (data.elements.incl | subjectdef | subjectHead | topicref)*
hasRelated.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  [ a:defaultValue = "choice" ]
  attribute collection-type {
    "choice" | "sequence" | "unordered" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute format { text }?,
  attribute type { text }?,
  univ-atts
# doc:The <hasRelated> element identifies an associative relationship between the container subject and each of the contained subjects.
hasRelated.element =
  element hasRelated { hasRelated.attlist, hasRelated.content }
hasRelated.attlist &= hasRelated.attributes
# LONG NAME: Subject definition
subjectdef.content =
  topicmeta?,
  (data.elements.incl
   | hasInstance
   | hasKind
   | hasNarrower
   | hasPart
   | hasRelated
   | subjectdef
   | subjectHead
   | topicref)*
subjectdef.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute query { text }?,
  attribute copy-to { text }?,
  attribute outputclass { text }?,
  attribute collection-type {
    "choice"
    | "family"
    | "sequence"
    | "unordered"
    | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute type { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute locktitle { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute format { text }?,
  attribute linking {
    "none"
    | "normal"
    | "sourceonly"
    | "targetonly"
    | "-dita-use-conref-target"
  }?,
  attribute toc { "no" | "yes" | "-dita-use-conref-target" }?,
  univ-atts
# doc:The <subjectdef> element defines a subject (also known as a controlled value) within a scheme. To make the subject easy to identify, a <subjectdef> may use a keys attribute to assign a key to the subject. A subject with a key can be identified elsewhere with a keyref. The <subjectdef> may use a navtitle element or attribute to supply a label for the subject. The <subjectdef> may also refer to a topic that captures the consensus definition for the subject. If a <subjectdef> refers to a topic, the <subjectdef> must also have the locktitle attribute set to &#34;yes&#34; in order to use the navtitle instead of the topic title to label the subject.
subjectdef.element =
  element subjectdef { subjectdef.attlist, subjectdef.content }
subjectdef.attlist &= subjectdef.attributes
# LONG NAME: Subject Heading

# SKOS equivalent: concept collection
subjectHead.content =
  subjectHeadMeta?,
  (data.elements.incl | subjectdef | subjectHead | topicref)*
subjectHead.attributes =
  attribute navtitle { text }?,
  attribute collection-type {
    "sequence" | "unordered" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  [ a:defaultValue = "normal" ] attribute linking { "normal" }?,
  attribute toc { "no" | "yes" | "-dita-use-conref-target" }?,
  univ-atts
# doc:The <subjectHead> element provides a heading for a group of subjects. The subjectHead element itself does not reference a file and cannot be referenced as a key, so it does not define any controlled values.
subjectHead.element =
  element subjectHead { subjectHead.attlist, subjectHead.content }
subjectHead.attlist &= subjectHead.attributes
# LONG NAME: Subject Heading Metadata
subjectHeadMeta.content = navtitle?, shortdesc?
subjectHeadMeta.attributes =
  attribute lockmeta { "no" | "yes" | "-dita-use-conref-target" }?,
  univ-atts
# doc:The <subjectHeadMeta> element allows a navigation title and short description to be associated with a subject heading.
subjectHeadMeta.element =
  element subjectHeadMeta {
    subjectHeadMeta.attlist, subjectHeadMeta.content
  }
subjectHeadMeta.attlist &= subjectHeadMeta.attributes
# LONG NAME: Enumeration definition
enumerationdef.content =
  elementdef?,
  attributedef,
  subjectdef+,
  defaultSubject?,
  data.elements.incl*
enumerationdef.attributes =
  id-atts,
  attribute outputclass { text }?,
  attribute status {
    "changed"
    | "deleted"
    | "new"
    | "unchanged"
    | "-dita-use-conref-target"
  }?,
  attribute base { text }?,
  base-attribute-extensions
# doc:The <enumerationdef> element identifies one attribute and one or more categories that contain the controlled values for the enumeration. The type attribute has a default value of keys.
enumerationdef.element =
  element enumerationdef {
    enumerationdef.attlist, enumerationdef.content
  }
enumerationdef.attlist &= enumerationdef.attributes
# LONG NAME: Element definition
elementdef.content = data.elements.incl*
elementdef.attributes =
  id-atts,
  attribute name { text },
  attribute outputclass { text }?,
  attribute status {
    "changed"
    | "deleted"
    | "new"
    | "unchanged"
    | "-dita-use-conref-target"
  }?,
  [ a:defaultValue = "no" ]
  attribute translate { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute base { text }?,
  base-attribute-extensions
# doc:The <elementdef> element identifies an element on which an attribute is enumerated. When the <elementdef> is left out of an <enumerationdef> element, the enumeration is bound to the attribute in all elements.
elementdef.element =
  element elementdef { elementdef.attlist, elementdef.content }
elementdef.attlist &= elementdef.attributes
# LONG NAME: Attribute definition
attributedef.content = data.elements.incl*
attributedef.attributes =
  id-atts,
  attribute name { text },
  attribute outputclass { text }?,
  attribute status {
    "changed"
    | "deleted"
    | "new"
    | "unchanged"
    | "-dita-use-conref-target"
  }?,
  [ a:defaultValue = "no" ]
  attribute translate { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute base { text }?,
  base-attribute-extensions
# doc:The <attributedef> element defines an attribute as an enumeration by specifying controlled values from a scheme.
attributedef.element =
  element attributedef { attributedef.attlist, attributedef.content }
attributedef.attlist &= attributedef.attributes
# LONG NAME: Default Subject
defaultSubject.content = data.elements.incl*
defaultSubject.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute query { text }?,
  attribute copy-to { text }?,
  attribute outputclass { text }?,
  attribute type { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute locktitle { "no" | "yes" | "-dita-use-conref-target" }?,
  attribute format { text }?,
  attribute linking {
    "none"
    | "normal"
    | "sourceonly"
    | "targetonly"
    | "-dita-use-conref-target"
  }?,
  attribute toc { "no" | "yes" | "-dita-use-conref-target" }?,
  univ-atts
# doc:The <defaultSubject> element is used within an attribute enumeration to set the default value for that attribute in cases where no value is specified on the attribute. The default subject must be one of the controlled values within the categories specified for the attribute.
defaultSubject.element =
  element defaultSubject {
    defaultSubject.attlist, defaultSubject.content
  }
defaultSubject.attlist &= defaultSubject.attributes
# LONG NAME: Related Subjects

# To define roles within a relationship, you can specialize
# the relatedSubjects container and its contained subjectdef elements,
# possibly setting the linking attribute to targetonly or sourceonly.
# For instance, a dependency relationship could contain depended-on
# and dependent subjects.
relatedSubjects.content = (data.elements.incl | subjectdef | topicref)*
relatedSubjects.attributes =
  attribute navtitle { text }?,
  attribute href { text }?,
  attribute keyref { text }?,
  attribute keys { text }?,
  attribute query { text }?,
  [ a:defaultValue = "family" ]
  attribute collection-type {
    "choice"
    | "family"
    | "sequence"
    | "unordered"
    | "-dita-use-conref-target"
  }?,
  attribute processing-role {
    "normal" | "resource-only" | "-dita-use-conref-target"
  }?,
  attribute type { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  attribute format { text }?,
  [ a:defaultValue = "normal" ]
  attribute linking {
    "none"
    | "normal"
    | "sourceonly"
    | "targetonly"
    | "-dita-use-conref-target"
  }?,
  univ-atts
# doc:The <relatedSubjects> element establishes associative relationships between each child subject and every other child subject (unless the association is restricted by the linking attribute of the subjects).
relatedSubjects.element =
  element relatedSubjects {
    relatedSubjects.attlist, relatedSubjects.content
  }
relatedSubjects.attlist &= relatedSubjects.attributes
# LONG NAME: Subject Relationship Table

# Where there are many instances of a subject relationship in which
# different subjects have defined roles within the relationship,
# you can use or specialize the subjectRelTable.
# Note that each row matrixes relationships across columns such that
# a subject receives relationships to every subject in other columns
# within the same row.
subjectRelTable.content =
  title?, topicmeta?, subjectRelHeader?, subjectRel+
subjectRelTable.attributes = topicref-atts-no-toc, univ-atts
# doc:The <subjectRelTable> element is a specialized relationship table which establishes relationships between the subjects in different columns of the same row.
subjectRelTable.element =
  element subjectRelTable {
    subjectRelTable.attlist, subjectRelTable.content
  }
subjectRelTable.attlist &= subjectRelTable.attributes
# LONG NAME: Subject Table Header

# The header defines the role of subjects in each column
# The role definition can be an informal navtitle or 
#     a formal reference
subjectRelHeader.content = subjectRole+
subjectRelHeader.attributes = univ-atts
# doc:The <subjectRelHeader> element specifies the roles played by subjects in associations.
subjectRelHeader.element =
  element subjectRelHeader {
    subjectRelHeader.attlist, subjectRelHeader.content
  }
subjectRelHeader.attlist &= subjectRelHeader.attributes
# LONG NAME: Subject Table Row
subjectRel.content = subjectRole+
subjectRel.attributes = univ-atts
# doc:The <subjectRel> element contains a set of subjects that are related in some manner. Each group of subjects is contained in a <subjectRole> element; the associations between different columns in the same row are evaluated in the same way as those in a <relrow> (from which <subjectRel> is specialized) but define relationships between the subjects instead of links between topic documents.
subjectRel.element =
  element subjectRel { subjectRel.attlist, subjectRel.content }
subjectRel.attlist &= subjectRel.attributes
# LONG NAME: Subject Role
subjectRole.content = (data.elements.incl | subjectdef | topicref)*
subjectRole.attributes = topicref-atts, univ-atts
# doc:The <subjectRole> element contains a set of subjects that are related to other subjects in the same row of the current <subjectRelTable>. By default, no relationship is defined between multiple subjects in the same <subjectRole> element.
subjectRole.element =
  element subjectRole { subjectRole.attlist, subjectRole.content }
subjectRole.attlist &= subjectRole.attributes
# SPECIALIZATION ATTRIBUTE DECLARATIONS
subjectScheme.attlist &=
  global-atts,
  [ a:defaultValue = "- map/map subjectScheme/subjectScheme " ]
  attribute class { text }?
schemeref.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/schemeref " ]
  attribute class { text }?
hasNarrower.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/hasNarrower " ]
  attribute class { text }?
hasKind.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/hasKind " ]
  attribute class { text }?
hasPart.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/hasPart " ]
  attribute class { text }?
hasInstance.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/hasInstance " ]
  attribute class { text }?
hasRelated.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/hasRelated " ]
  attribute class { text }?
enumerationdef.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/enumerationdef " ]
  attribute class { text }?
elementdef.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/data subjectScheme/elementdef " ]
  attribute class { text }?
attributedef.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/data subjectScheme/attributedef " ]
  attribute class { text }?
defaultSubject.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/defaultSubject " ]
  attribute class { text }?
subjectHead.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/subjectHead " ]
  attribute class { text }?
subjectHeadMeta.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicmeta subjectScheme/subjectHeadMeta " ]
  attribute class { text }?
subjectdef.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/subjectdef " ]
  attribute class { text }?
relatedSubjects.attlist &=
  global-atts,
  [ a:defaultValue = "- map/topicref subjectScheme/relatedSubjects " ]
  attribute class { text }?
subjectRelTable.attlist &=
  global-atts,
  [ a:defaultValue = "- map/reltable subjectScheme/subjectRelTable " ]
  attribute class { text }?
subjectRelHeader.attlist &=
  global-atts,
  [ a:defaultValue = "- map/relrow subjectScheme/subjectRelHeader " ]
  attribute class { text }?
subjectRel.attlist &=
  global-atts,
  [ a:defaultValue = "- map/relrow subjectScheme/subjectRel " ]
  attribute class { text }?
subjectRole.attlist &=
  global-atts,
  [ a:defaultValue = "- map/relcell subjectScheme/subjectRole " ]
  attribute class { text }?
