<?xml version="1.0" encoding="UTF-8"?>
<!-- ============================================================= 
  MODULE:    DITA - HTML content - Extensible HTML version 1.0 
             Transitional RNG converted from DTD
  VERSION:   1.2
  DATE:      November 2010
  ============================================================= -->
<!--
  Refer to the latest version of this file by the following URI:
  urn:dita-ng:dita:rng:xhtml1-transitional.rng
  To refer to this specific version, you may use this value:
  urn:dita-ng:dita:rng:xhtml1-transitional.rng:1.2
-->
<!-- ============================================================= 
  SYSTEM:     Darwin Information Typing Architecture (DITA)
  PURPOSE:    Relax NG schema to describe HTML content
  ORIGINAL CREATION DATE:
  September 2010
  (C) Copyright Syncro Soft 2010-2011
  All Rights Reserved.
  ============================================================= -->
<grammar ns="http://www.w3.org/1999/xhtml" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <ref name="html"/>
  </start>
  
  <define name="ContentType">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- media type, as per [RFC2045] -->
  <define name="ContentTypes">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- comma-separated list of media types, as per [RFC2045] -->
  <define name="Charset">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- a character encoding, as per [RFC2045] -->
  <define name="Charsets">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- a space separated list of character encodings, as per [RFC2045] -->
  <define name="LanguageCode">
    <data type="NMTOKEN"/>
  </define>
  <!-- a language code, as per [RFC3066] -->
  <define name="Character">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- a single character, as per section 2.2 of [XML] -->
  <define name="Number">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- one or more digits -->
  <define name="LinkTypes">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- space-separated list of link types -->
  <define name="MediaDesc">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- single or comma-separated list of media descriptors -->
  <define name="URI">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- a Uniform Resource Identifier, see [RFC2396] -->
  <define name="UriList">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- a space separated list of Uniform Resource Identifiers -->
  <define name="Datetime">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- date and time information. ISO date format -->
  <define name="Script">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- script expression -->
  <define name="StyleSheet">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- style sheet data -->
  <define name="Text">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- used for titles etc. -->
  <define name="FrameTarget">
    <data type="NMTOKEN"/>
  </define>
  <!-- render in this frame -->
  <define name="Length">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- nn for pixels or nn% for percentage length -->
  <define name="MultiLength">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- pixel, percentage, or relative -->
  <define name="Pixels">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- integer representing length in pixels -->
  <!-- these are used for image maps -->
  <define name="Shape">
    <choice>
      <value>rect</value>
      <value>circle</value>
      <value>poly</value>
      <value>default</value>
    </choice>
  </define>
  <define name="Coords">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- comma separated list of lengths -->
  <!-- used for object, applet, img, input and iframe -->
  <define name="ImgAlign">
    <choice>
      <value>top</value>
      <value>middle</value>
      <value>bottom</value>
      <value>left</value>
      <value>right</value>
    </choice>
  </define>
  <!-- a color using sRGB: #RRGGBB as Hex values -->
  <define name="Color">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!--
    There are also 16 widely known color names with their sRGB values:
    
    Black  = #000000    Green  = #008000
    Silver = #C0C0C0    Lime   = #00FF00
    Gray   = #808080    Olive  = #808000
    White  = #FFFFFF    Yellow = #FFFF00
    Maroon = #800000    Navy   = #000080
    Red    = #FF0000    Blue   = #0000FF
    Purple = #800080    Teal   = #008080
    Fuchsia= #FF00FF    Aqua   = #00FFFF
  -->
  <!-- =================== Generic Attributes =============================== -->
  <!--
    core attributes common to most elements
    id       document-wide unique id
    class    space separated list of classes
    style    associated style info
    title    advisory title/amplification
  -->
  <define name="coreattrs">
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="class"/>
    </optional>
    <optional>
      <attribute name="style">
        <ref name="StyleSheet"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="title">
        <ref name="Text"/>
      </attribute>
    </optional>
  </define>
  <!--
    internationalization attributes
    lang        language code (backwards compatible)
    xml:lang    language code (as per XML 1.0 spec)
    dir         direction for weak/neutral text
  -->
  <define name="i18n">
    <optional>
      <attribute name="lang">
        <ref name="LanguageCode"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="xml:lang">
        <ref name="LanguageCode"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="dir">
        <choice>
          <value>ltr</value>
          <value>rtl</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!--
    attributes for common UI events
    onclick     a pointer button was clicked
    ondblclick  a pointer button was double clicked
    onmousedown a pointer button was pressed down
    onmouseup   a pointer button was released
    onmousemove a pointer was moved onto the element
    onmouseout  a pointer was moved away from the element
    onkeypress  a key was pressed and released
    onkeydown   a key was pressed down
    onkeyup     a key was released
  -->
  <define name="events">
    <optional>
      <attribute name="onclick">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="ondblclick">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onmousedown">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onmouseup">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onmouseover">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onmousemove">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onmouseout">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onkeypress">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onkeydown">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onkeyup">
        <ref name="Script"/>
      </attribute>
    </optional>
  </define>
  <!--
    attributes for elements that can get the focus
    accesskey   accessibility key character
    tabindex    position in tabbing order
    onfocus     the element got the focus
    onblur      the element lost the focus
  -->
  <define name="focus">
    <optional>
      <attribute name="accesskey">
        <ref name="Character"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="tabindex">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onfocus">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onblur">
        <ref name="Script"/>
      </attribute>
    </optional>
  </define>
  <define name="attrs">
    <ref name="coreattrs"/>
    <ref name="i18n"/>
    <ref name="events"/>
  </define>
  <!--
    text alignment for p, div, h1-h6. The default is
    align="left" for ltr headings, "right" for rtl
  -->
  <define name="TextAlign">
    <optional>
      <attribute name="align">
        <choice>
          <value>left</value>
          <value>center</value>
          <value>right</value>
          <value>justify</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- =================== Text Elements ==================================== -->
  <define name="special.extra">
    <choice>
      <ref name="object"/>
      <ref name="applet"/>
      <ref name="img"/>
      <ref name="map"/>
      <ref name="iframe"/>
    </choice>
  </define>
  <define name="special.basic">
    <choice>
      <ref name="br"/>
      <ref name="span"/>
      <ref name="bdo"/>
    </choice>
  </define>
  <define name="special">
    <choice>
      <ref name="special.basic"/>
      <ref name="special.extra"/>
    </choice>
  </define>
  <define name="fontstyle.extra">
    <choice>
      <ref name="big"/>
      <ref name="small"/>
      <ref name="font"/>
      <ref name="basefont"/>
    </choice>
  </define>
  <define name="fontstyle.basic">
    <choice>
      <ref name="tt"/>
      <ref name="i"/>
      <ref name="b"/>
      <ref name="u"/>
      <ref name="s"/>
      <ref name="strike"/>
    </choice>
  </define>
  <define name="fontstyle">
    <choice>
      <ref name="fontstyle.basic"/>
      <ref name="fontstyle.extra"/>
    </choice>
  </define>
  <define name="phrase.extra">
    <choice>
      <ref name="sub"/>
      <ref name="sup"/>
    </choice>
  </define>
  <define name="phrase.basic">
    <choice>
      <ref name="em"/>
      <ref name="strong"/>
      <ref name="dfn"/>
      <ref name="code"/>
      <ref name="q"/>
      <ref name="samp"/>
      <ref name="kbd"/>
      <ref name="var"/>
      <ref name="cite"/>
      <ref name="abbr"/>
      <ref name="acronym"/>
    </choice>
  </define>
  <define name="phrase">
    <choice>
      <ref name="phrase.basic"/>
      <ref name="phrase.extra"/>
    </choice>
  </define>
  <define name="inline.forms">
    <choice>
      <ref name="input"/>
      <ref name="select"/>
      <ref name="textarea"/>
      <ref name="label"/>
      <ref name="button"/>
    </choice>
  </define>
  <!-- these can occur at block or inline level -->
  <define name="misc.inline">
    <choice>
      <ref name="ins"/>
      <ref name="del"/>
      <ref name="script"/>
    </choice>
  </define>
  <!-- these can only occur at block level -->
  <define name="misc">
    <choice>
      <ref name="noscript"/>
      <ref name="misc.inline"/>
    </choice>
  </define>
  <define name="inline">
    <choice>
      <ref name="a"/>
      <ref name="special"/>
      <ref name="fontstyle"/>
      <ref name="phrase"/>
      <ref name="inline.forms"/>
    </choice>
  </define>
  <!-- %Inline; covers inline or "text-level" elements -->
  <define name="Inline">
    <zeroOrMore>
      <choice>
        <text/>
        <ref name="inline"/>
        <ref name="misc.inline"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- ================== Block level elements ============================== -->
  <define name="heading">
    <choice>
      <ref name="h1"/>
      <ref name="h2"/>
      <ref name="h3"/>
      <ref name="h4"/>
      <ref name="h5"/>
      <ref name="h6"/>
    </choice>
  </define>
  <define name="lists">
    <choice>
      <ref name="ul"/>
      <ref name="ol"/>
      <ref name="dl"/>
      <ref name="menu"/>
      <ref name="dir"/>
    </choice>
  </define>
  <define name="blocktext">
    <choice>
      <ref name="pre"/>
      <ref name="hr"/>
      <ref name="blockquote"/>
      <ref name="address"/>
      <ref name="center"/>
      <ref name="noframes"/>
    </choice>
  </define>
  <define name="block">
    <choice>
      <ref name="p"/>
      <ref name="heading"/>
      <ref name="div"/>
      <ref name="lists"/>
      <ref name="blocktext"/>
      <ref name="isindex"/>
      <ref name="fieldset"/>
      <ref name="table"/>
    </choice>
  </define>
  <!-- %Flow; mixes block and inline and is used for list items etc. -->
  <define name="Flow">
    <zeroOrMore>
      <choice>
        <text/>
        <ref name="block"/>
        <ref name="form"/>
        <ref name="inline"/>
        <ref name="misc"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- ================== Content models for exclusions ===================== -->
  <!-- a elements use %Inline; excluding a -->
  <define name="a.content">
    <zeroOrMore>
      <choice>
        <text/>
        <ref name="special"/>
        <ref name="fontstyle"/>
        <ref name="phrase"/>
        <ref name="inline.forms"/>
        <ref name="misc.inline"/>
      </choice>
    </zeroOrMore>
  </define>
  <!--
    pre uses %Inline excluding img, object, applet, big, small,
    font, or basefont
  -->
  <define name="pre.content">
    <zeroOrMore>
      <choice>
        <text/>
        <ref name="a"/>
        <ref name="special.basic"/>
        <ref name="fontstyle.basic"/>
        <ref name="phrase.basic"/>
        <ref name="inline.forms"/>
        <ref name="misc.inline"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- form uses %Flow; excluding form -->
  <define name="form.content">
    <zeroOrMore>
      <choice>
        <text/>
        <ref name="block"/>
        <ref name="inline"/>
        <ref name="misc"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- button uses %Flow; but excludes a, form, form controls, iframe -->
  <define name="button.content">
    <zeroOrMore>
      <choice>
        <text/>
        <ref name="p"/>
        <ref name="heading"/>
        <ref name="div"/>
        <ref name="lists"/>
        <ref name="blocktext"/>
        <ref name="table"/>
        <ref name="br"/>
        <ref name="span"/>
        <ref name="bdo"/>
        <ref name="object"/>
        <ref name="applet"/>
        <ref name="img"/>
        <ref name="map"/>
        <ref name="fontstyle"/>
        <ref name="phrase"/>
        <ref name="misc"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- ================ Document Structure ================================== -->
  <!-- doc:This element identifies the document to be XHTML. The remainder of the XHTML document is contained by this element. -->
  <define name="html">
    <element name="html">
      <ref name="html.attlist"/>
      <ref name="head"/>
      <ref name="body"/>
    </element>
  </define>
  <define name="html.attlist" combine="interleave">
    <ref name="i18n"/>
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
  </define>
  <!-- ================ Document Head ======================================= -->
  <define name="head.misc">
    <zeroOrMore>
      <choice>
        <ref name="script"/>
        <ref name="style"/>
        <ref name="meta"/>
        <ref name="link"/>
        <ref name="object"/>
        <ref name="isindex"/>
      </choice>
    </zeroOrMore>
  </define>
  <!-- doc:The HEAD element contains information about the current document,for example the title and the list of keywords that may be used by the search engines. -->
  <define name="head">
    <element name="head">
      <ref name="head.attlist"/>
      <ref name="head.misc"/>
      <choice>
        <group>
          <ref name="title"/>
          <ref name="head.misc"/>
          <optional>
            <ref name="base"/>
            <ref name="head.misc"/>
          </optional>
        </group>
        <group>
          <ref name="base"/>
          <ref name="head.misc"/>
          <group>
            <ref name="title"/>
            <ref name="head.misc"/>
          </group>
        </group>
      </choice>
    </element>
  </define>
  <define name="head.attlist" combine="interleave">
    <ref name="i18n"/>
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="profile">
        <ref name="URI"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The TITLE element is not considered part of the flow of text. It is displayed as the page header or window title. -->
  <define name="title">
    <element name="title">
      <ref name="title.attlist"/>
      <text/>
    </element>
  </define>
  <define name="title.attlist" combine="interleave">
    <ref name="i18n"/>
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The BASE element allows authors to specify a document's base URI explicitly. The path information specified by the BASE element only affects relative URIs from the same document. -->
  <define name="base">
    <element name="base">
      <ref name="base.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="base.attlist" combine="interleave">
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="href">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="target">
        <ref name="FrameTarget"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The META element can be used to identify properties of a document (e.g., author, expiration date, a list of key words, etc.). The specification does not define a normative set of properties. -->
  <define name="meta">
    <element name="meta">
      <ref name="meta.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="meta.attlist" combine="interleave">
    <ref name="i18n"/>
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="http-equiv"/>
    </optional>
    <optional>
      <attribute name="name"/>
    </optional>
    <attribute name="content"/>
    <optional>
      <attribute name="scheme"/>
    </optional>
  </define>
  <!-- doc:This element defines a link. Unlike A, it may only appear in the HEAD section of a document, although it may appear any number of times. Although LINK has no content, it conveys relationship information that may be rendered by user agents in a variety of ways (e.g., a tool-bar with a drop-down menu of links). -->
  <define name="link">
    <element name="link">
      <ref name="link.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="link.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="charset">
        <ref name="Charset"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="href">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="hreflang">
        <ref name="LanguageCode"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="type">
        <ref name="ContentType"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rel">
        <ref name="LinkTypes"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rev">
        <ref name="LinkTypes"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="media">
        <ref name="MediaDesc"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="target">
        <ref name="FrameTarget"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The STYLE element allows authors to put style sheet rules in the head of the document. XHTML permits any number of STYLE elements in the HEAD section of a document. Some style sheet implementations may allow a wider variety of rules in the STYLE element than in the style attribute. For example, with CSS, rules may be declared within a STYLE element. -->
  <define name="style">
    <element name="style">
      <ref name="style.attlist"/>
      <text/>
    </element>
  </define>
  <define name="style.attlist" combine="interleave">
    <ref name="i18n"/>
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <attribute name="type">
      <ref name="ContentType"/>
    </attribute>
    <optional>
      <attribute name="media">
        <ref name="MediaDesc"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="title">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="xml:space" a:defaultValue="preserve">
        <value>preserve</value>
      </attribute>
    </optional>
  </define>
  <!-- doc:The SCRIPT element places a script within a document. This element may appear any number of times in the HEAD or BODY of an XHTML document. -->
  <define name="script">
    <element name="script">
      <ref name="script.attlist"/>
      <text/>
    </element>
  </define>
  <define name="script.attlist" combine="interleave">
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="charset">
        <ref name="Charset"/>
      </attribute>
    </optional>
    <attribute name="type">
      <ref name="ContentType"/>
    </attribute>
    <optional>
      <attribute name="language"/>
    </optional>
    <optional>
      <attribute name="src">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="defer">
        <choice>
          <value>defer</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="xml:space" a:defaultValue="preserve">
        <value>preserve</value>
      </attribute>
    </optional>
  </define>
  <!-- doc:The NOSCRIPT element allows authors to provide alternate content when a script is not executed. The content of a NOSCRIPT element should only be rendered by a script-aware user agent in the following cases: 1. The user agent is configured not to evaluate scripts; 2The user agent doesn't support a scripting language invoked by a SCRIPT element earlier in the document. -->
  <define name="noscript">
    <element name="noscript">
      <ref name="noscript.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="noscript.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- ======================= Frames ======================================= -->
  <!-- doc:The IFRAME element allows authors to insert a frame within a block of text. Inserting an inline frame within a section of text is much like inserting an object via the OBJECT element: they both allow you to insert an XHTML document in the middle of another, they may both be aligned with surrounding text, etc. -->
  <define name="iframe">
    <element name="iframe">
      <ref name="iframe.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="iframe.attlist" combine="interleave">
    <ref name="coreattrs"/>
    <optional>
      <attribute name="longdesc">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="src">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="frameborder" a:defaultValue="1">
        <choice>
          <value>1</value>
          <value>0</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="marginwidth">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="marginheight">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="scrolling" a:defaultValue="auto">
        <choice>
          <value>yes</value>
          <value>no</value>
          <value>auto</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="align">
        <ref name="ImgAlign"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="height">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The NOFRAMES element specifies content that should be displayed only by user agents that do not support frames or are configured not to display frames. User agents that support frames must only display the contents of a NOFRAMES declaration when configured not to display frames. User agents that do not support frames must display the contents of NOFRAMES in any case. -->
  <define name="noframes">
    <element name="noframes">
      <ref name="noframes.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="noframes.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- =================== Document Body ==================================== -->
  <!-- doc:The body of a document contains the document's content. The content may be presented by a user agent in a variety of ways. For example, for visual browsers, you can think of the body as a canvas where the content appears: text, images, colors, graphics, etc. -->
  <define name="body">
    <element name="body">
      <ref name="body.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="body.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="onload">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onunload">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="background">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="bgcolor">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="text">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="link">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="vlink">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="alink">
        <ref name="Color"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The DIV element defines a division/section in a document. It offer a generic mechanism for adding structure to documents. This element define content to be block-level but impose no other presentational idioms on the content. -->
  <define name="div">
    <element name="div">
      <ref name="div.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="div.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- =================== Paragraphs ======================================= -->
  <!-- doc:The P element represents a paragraph. It cannot contain block-level elements (including P itself). -->
  <define name="p">
    <element name="p">
      <ref name="p.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="p.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- =================== Headings ========================================= -->
  <!-- doc:There are six levels of headings in XHTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones. -->
  <define name="h1">
    <element name="h1">
      <ref name="h1.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="h1.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- doc:There are six levels of headings in XHTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones. -->
  <define name="h2">
    <element name="h2">
      <ref name="h2.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="h2.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- doc:There are six levels of headings in XHTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones. -->
  <define name="h3">
    <element name="h3">
      <ref name="h3.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="h3.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- doc:There are six levels of headings in XHTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones. -->
  <define name="h4">
    <element name="h4">
      <ref name="h4.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="h4.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- doc:There are six levels of headings in XHTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones. -->
  <define name="h5">
    <element name="h5">
      <ref name="h5.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="h5.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- doc:There are six levels of headings in XHTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones. -->
  <define name="h6">
    <element name="h6">
      <ref name="h6.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="h6.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="TextAlign"/>
  </define>
  <!-- =================== Lists ============================================ -->
  <!-- Unordered list bullet styles -->
  <define name="ULStyle">
    <choice>
      <value>disc</value>
      <value>square</value>
      <value>circle</value>
    </choice>
  </define>
  <!-- doc:The UL element defines an unordered list. Unordered list items are not numbered. -->
  <define name="ul">
    <element name="ul">
      <ref name="ul.attlist"/>
      <oneOrMore>
        <ref name="li"/>
      </oneOrMore>
    </element>
  </define>
  <define name="ul.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="type">
        <ref name="ULStyle"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="compact">
        <choice>
          <value>compact</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!--
    Ordered list numbering style
    
    1   arabic numbers      1, 2, 3, ...
    a   lower alpha         a, b, c, ...
    A   upper alpha         A, B, C, ...
    i   lower roman         i, ii, iii, ...
    I   upper roman         I, II, III, ...
    
    The style is applied to the sequence number which by default
    is reset to 1 for the first list item in an ordered list.
  -->
  <define name="OLStyle">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- doc:The OL element defines an ordered list. Ordered list items are numbered. -->
  <define name="ol">
    <element name="ol">
      <ref name="ol.attlist"/>
      <oneOrMore>
        <ref name="li"/>
      </oneOrMore>
    </element>
  </define>
  <define name="ol.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="type">
        <ref name="OLStyle"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="compact">
        <choice>
          <value>compact</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="start">
        <ref name="Number"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The MENU element was designed to be used for single column menu lists. (DEPRECATED) -->
  <define name="menu">
    <element name="menu">
      <ref name="menu.attlist"/>
      <oneOrMore>
        <ref name="li"/>
      </oneOrMore>
    </element>
  </define>
  <define name="menu.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="compact">
        <choice>
          <value>compact</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- doc:The DIR element was designed to be used for creating multicolumn directory lists. (DEPRECATED) -->
  <define name="dir">
    <element name="dir">
      <ref name="dir.attlist"/>
      <oneOrMore>
        <ref name="li"/>
      </oneOrMore>
    </element>
  </define>
  <define name="dir.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="compact">
        <choice>
          <value>compact</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="LIStyle">
    <data type="string" datatypeLibrary=""/>
  </define>
  <!-- doc:The LI element is used to define a list item. The LI element is used in ordered (OL) and unordered lists (UL). -->
  <define name="li">
    <element name="li">
      <ref name="li.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="li.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="type">
        <ref name="LIStyle"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="value">
        <ref name="Number"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The DL element is used to define a definition list. They consist consist of two parts for each item: a term (DT) and a description (DD). -->
  <define name="dl">
    <element name="dl">
      <ref name="dl.attlist"/>
      <oneOrMore>
        <choice>
          <ref name="dt"/>
          <ref name="dd"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="dl.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="compact">
        <choice>
          <value>compact</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- doc:The DT element defines a term in a definition list. -->
  <define name="dt">
    <element name="dt">
      <ref name="dt.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="dt.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The DD element defines the description of a term in a definition list. -->
  <define name="dd">
    <element name="dd">
      <ref name="dd.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="dd.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- =================== Address ========================================== -->
  <!-- doc:The ADDRESS element may be used by authors to supply contact information for a document or a major part of a document such as a form. This element often appears at the beginning or end of a document. -->
  <define name="address">
    <element name="address">
      <ref name="address.attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="inline"/>
          <ref name="misc.inline"/>
          <ref name="p"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="address.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- =================== Horizontal Rule ================================== -->
  <!-- doc:The HR element causes a horizontal rule to be rendered by visual user agents. -->
  <define name="hr">
    <element name="hr">
      <ref name="hr.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="hr.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="align">
        <choice>
          <value>left</value>
          <value>center</value>
          <value>right</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="noshade">
        <choice>
          <value>noshade</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="size">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
  </define>
  <!-- =================== Preformatted Text ================================ -->
  <!-- doc:The PRE element defines blocks of preformatted text. The text enclosed in the pre element preserves spaces and line breaks and is rendered in a fixed-pitch font. -->
  <define name="pre">
    <element name="pre">
      <ref name="pre.attlist"/>
      <ref name="pre.content"/>
    </element>
  </define>
  <define name="pre.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="width">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="xml:space" a:defaultValue="preserve">
        <value>preserve</value>
      </attribute>
    </optional>
  </define>
  <!-- =================== Block-like Quotes ================================ -->
  <!-- doc:The BLOCKQUOTE element defines the start of a long quotation (block-level content) . It creates white space on both sides of the text. -->
  <define name="blockquote">
    <element name="blockquote">
      <ref name="blockquote.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="blockquote.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="cite">
        <ref name="URI"/>
      </attribute>
    </optional>
  </define>
  <!-- =================== Text alignment =================================== -->
  <!-- doc:The CENTER element is exactly equivalent to specifying the DIV element with the align attribute set to "center". The CENTER element is deprecated. -->
  <define name="center">
    <element name="center">
      <ref name="center.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="center.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- =================== Inserted/Deleted Text ============================ -->
  <!-- doc:INS is used to markup sections of the document that have been inserted with respect to a different version of a document (e.g., in draft legislation where lawmakers need to view the changes). -->
  <define name="ins">
    <element name="ins">
      <ref name="ins.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="ins.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="cite">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="datetime">
        <ref name="Datetime"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:DEL is used to markup sections of the document that have been deleted with respect to a different version of a document (e.g., in draft legislation where lawmakers need to view the changes). -->
  <define name="del">
    <element name="del">
      <ref name="del.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="del.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="cite">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="datetime">
        <ref name="Datetime"/>
      </attribute>
    </optional>
  </define>
  <!-- ================== The Anchor Element ================================ -->
  <!-- doc:The A element defines an anchor element. An anchor can be used: 1.To create a link to another document by using the href attribute; 2.To create a bookmark inside a document by using the name or id attribute. -->
  <define name="a">
    <element name="a">
      <ref name="a.attlist"/>
      <ref name="a.content"/>
    </element>
  </define>
  <define name="a.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="focus"/>
    <optional>
      <attribute name="charset">
        <ref name="Charset"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="type">
        <ref name="ContentType"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="href">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="hreflang">
        <ref name="LanguageCode"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rel">
        <ref name="LinkTypes"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rev">
        <ref name="LinkTypes"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="shape" a:defaultValue="rect">
        <ref name="Shape"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="coords">
        <ref name="Coords"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="target">
        <ref name="FrameTarget"/>
      </attribute>
    </optional>
  </define>
  <!-- ===================== Inline Elements ================================ -->
  <!-- doc:The SPAN element is used to group inline-elements in a document. Use the SPAN element to group inline-elements to format them with styles. -->
  <define name="span">
    <element name="span">
      <ref name="span.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="span.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The BDO element overrides the default text direction. It should be used in scenarios where absolute control over sequence order is required (e.g., multi-language part numbers). -->
  <define name="bdo">
    <element name="bdo">
      <ref name="bdo.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="bdo.attlist" combine="interleave">
    <ref name="coreattrs"/>
    <ref name="events"/>
    <optional>
      <attribute name="lang">
        <ref name="LanguageCode"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="xml:lang">
        <ref name="LanguageCode"/>
      </attribute>
    </optional>
    <attribute name="dir">
      <choice>
        <value>ltr</value>
        <value>rtl</value>
      </choice>
    </attribute>
  </define>
  <!-- doc:The BR element forcibly breaks (ends) the current line of text. Use the BR element to enter blank lines, not to separate paragraphs. -->
  <define name="br">
    <element name="br">
      <ref name="br.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="br.attlist" combine="interleave">
    <ref name="coreattrs"/>
    <optional>
      <attribute name="clear" a:defaultValue="none">
        <choice>
          <value>left</value>
          <value>all</value>
          <value>right</value>
          <value>none</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- doc:Renders as emphasized text. Generally, visual user agents present EM text in italics. -->
  <define name="em">
    <element name="em">
      <ref name="em.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="em.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders as strong emphasized text. Generally, visual user agents present STRONG text in bold font. -->
  <define name="strong">
    <element name="strong">
      <ref name="strong.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="strong.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Indicates that this is the defining instance of the enclosed term. -->
  <define name="dfn">
    <element name="dfn">
      <ref name="dfn.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="dfn.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Designates a fragment of computer code. -->
  <define name="code">
    <element name="code">
      <ref name="code.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="code.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Designates sample output from programs, scripts, etc. -->
  <define name="samp">
    <element name="samp">
      <ref name="samp.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="samp.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Indicates text to be entered by the user. -->
  <define name="kbd">
    <element name="kbd">
      <ref name="kbd.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="kbd.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Indicates an instance of a variable or program argument. -->
  <define name="var">
    <element name="var">
      <ref name="var.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="var.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Contains a citation or a reference to other sources. -->
  <define name="cite">
    <element name="cite">
      <ref name="cite.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="cite.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The ABBR element is used to indicates an abbreviated form, like "ie.", "Ltd.", "etc.". -->
  <define name="abbr">
    <element name="abbr">
      <ref name="abbr.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="abbr.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The ACRONYM element defines an acronym, like "USA" or "F.B.I". -->
  <define name="acronym">
    <element name="acronym">
      <ref name="acronym.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="acronym.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The Q element defines the start of a short quotation. It does not render as anything special, you have to use styles to format the text. -->
  <define name="q">
    <element name="q">
      <ref name="q.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="q.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="cite">
        <ref name="URI"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The SUB element defines subscript text. -->
  <define name="sub">
    <element name="sub">
      <ref name="sub.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="sub.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The SUP element defines superscript text. -->
  <define name="sup">
    <element name="sup">
      <ref name="sup.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="sup.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders as teletype or mono spaced text. -->
  <define name="tt">
    <element name="tt">
      <ref name="tt.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="tt.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders as italic text style. -->
  <define name="i">
    <element name="i">
      <ref name="i.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="i.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders as bold text style. -->
  <define name="b">
    <element name="b">
      <ref name="b.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="b.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders text in a "large" font. -->
  <define name="big">
    <element name="big">
      <ref name="big.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="big.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders text in a "small" font. -->
  <define name="small">
    <element name="small">
      <ref name="small.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="small.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Renders underlined style text. (DEPRECATED) -->
  <define name="u">
    <element name="u">
      <ref name="u.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="u.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Render strike-through style text. -->
  <define name="s">
    <element name="s">
      <ref name="s.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="s.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:Render strike-through style text. -->
  <define name="strike">
    <element name="strike">
      <ref name="strike.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="strike.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <!-- doc:The BASEFONT element sets the base font size (using the size attribute). Font size changes achieved with FONT are relative to the base font size set by BASEFONT. If BASEFONT is not used, the default base font size is 3. -->
  <define name="basefont">
    <element name="basefont">
      <ref name="basefont.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="basefont.attlist" combine="interleave">
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <attribute name="size"/>
    <optional>
      <attribute name="color">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="face"/>
    </optional>
  </define>
  <!-- doc:The FONT element changes the font size and color for text in its contents. -->
  <define name="font">
    <element name="font">
      <ref name="font.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="font.attlist" combine="interleave">
    <ref name="coreattrs"/>
    <ref name="i18n"/>
    <optional>
      <attribute name="size"/>
    </optional>
    <optional>
      <attribute name="color">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="face"/>
    </optional>
  </define>
  <!-- ==================== Object ====================================== -->
  <!-- doc:Defines an embedded object. This element allows to specify the data and parameters for objects inserted into documents. -->
  <define name="object">
    <element name="object">
      <ref name="object.attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="param"/>
          <ref name="block"/>
          <ref name="form"/>
          <ref name="inline"/>
          <ref name="misc"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="object.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="declare">
        <choice>
          <value>declare</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="classid">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="codebase">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="data">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="type">
        <ref name="ContentType"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="codetype">
        <ref name="ContentType"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="archive">
        <ref name="UriList"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="standby">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="height">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="usemap">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="tabindex">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="align">
        <ref name="ImgAlign"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="border">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="hspace">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="vspace">
        <ref name="Pixels"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:PARAM elements specify a set of values that may be required by an object at run-time. Any number of PARAM elements may appear in the content of an OBJECT or APPLET element, in any order, but must be placed at the start of the content of the enclosing OBJECT or APPLET element. -->
  <define name="param">
    <element name="param">
      <ref name="param.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="param.attlist" combine="interleave">
    <optional>
      <attribute name="id">
        <data type="ID"/>
      </attribute>
    </optional>
    <attribute name="name"/>
    <optional>
      <attribute name="value"/>
    </optional>
    <optional>
      <attribute name="valuetype" a:defaultValue="data">
        <choice>
          <value>data</value>
          <value>ref</value>
          <value>object</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="type">
        <ref name="ContentType"/>
      </attribute>
    </optional>
  </define>
  <!-- =================== Java applet ================================== -->
  <!-- doc:This element, supported by all Java-enabled browsers, allows designers to embed a Java applet in an XHTML document. It has been deprecated in favor of the OBJECT element. -->
  <define name="applet">
    <element name="applet">
      <ref name="applet.attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="param"/>
          <ref name="block"/>
          <ref name="form"/>
          <ref name="inline"/>
          <ref name="misc"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="applet.attlist" combine="interleave">
    <ref name="coreattrs"/>
    <optional>
      <attribute name="codebase">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="archive"/>
    </optional>
    <optional>
      <attribute name="code"/>
    </optional>
    <optional>
      <attribute name="object"/>
    </optional>
    <optional>
      <attribute name="alt">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
    <attribute name="width">
      <ref name="Length"/>
    </attribute>
    <attribute name="height">
      <ref name="Length"/>
    </attribute>
    <optional>
      <attribute name="align">
        <ref name="ImgAlign"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="hspace">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="vspace">
        <ref name="Pixels"/>
      </attribute>
    </optional>
  </define>
  <!-- =================== Images =========================================== -->
  <!-- doc:The IMG element embeds an image in the current document at the location of the element's definition. The IMG element has no content; it is usually replaced inline by the image designated by the src attribute, the exception being for left or right-aligned images that are "floated" out of line. Note that in this DTD there is no name attribute. That is only available in the transitional and frameset DTD. -->
  <define name="img">
    <element name="img">
      <ref name="img.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="img.attlist" combine="interleave">
    <ref name="attrs"/>
    <attribute name="src">
      <ref name="URI"/>
    </attribute>
    <attribute name="alt">
      <ref name="Text"/>
    </attribute>
    <optional>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="longdesc">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="height">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="usemap">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="ismap">
        <choice>
          <value>ismap</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="align">
        <ref name="ImgAlign"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="border">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="hspace">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="vspace">
        <ref name="Pixels"/>
      </attribute>
    </optional>
  </define>
  <!-- usemap points to a map element which may be in this document or an external document, although the latter is not widely supported -->
  <!-- ================== Client-side image maps ============================ -->
  <!-- doc:The MAP element specifies a client-side image map (or other navigation mechanism) that may be associated with another elements (IMG, OBJECT, or INPUT). An image map is associated with an element via the element's usemap attribute. The MAP element may be used without an associated image for general navigation mechanisms. -->
  <define name="map">
    <element name="map">
      <ref name="map.attlist"/>
      <choice>
        <oneOrMore>
          <choice>
            <ref name="block"/>
            <ref name="form"/>
            <ref name="misc"/>
          </choice>
        </oneOrMore>
        <oneOrMore>
          <ref name="area"/>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <define name="map.attlist" combine="interleave">
    <ref name="i18n"/>
    <ref name="events"/>
    <attribute name="id">
      <data type="ID"/>
    </attribute>
    <optional>
      <attribute name="class"/>
    </optional>
    <optional>
      <attribute name="style">
        <ref name="StyleSheet"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="title">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="name"/>
    </optional>
  </define>
  <!-- doc: Defines a region in an image map. This element is always nested inside a MAP tag. This element has no content but specify the geometric region of the image map and the link associated with the region. Note that user agents do not generally render AREA elements. Therefore, authors must provide alternate text for each AREA with the alt attribute. -->
  <!-- doc:Defines a region in an image map. This element is always nested inside a MAP element. This element has no content but specify the geometric region of the image map and the link associated with the region. Note that user agents do not generally render AREA elements. Therefore, authors must provide alternate text for each AREA with the alt attribute. -->
  <define name="area">
    <element name="area">
      <ref name="area.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="area.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="focus"/>
    <optional>
      <attribute name="shape" a:defaultValue="rect">
        <ref name="Shape"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="coords">
        <ref name="Coords"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="href">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="nohref">
        <choice>
          <value>nohref</value>
        </choice>
      </attribute>
    </optional>
    <attribute name="alt">
      <ref name="Text"/>
    </attribute>
    <optional>
      <attribute name="target">
        <ref name="FrameTarget"/>
      </attribute>
    </optional>
  </define>
  <!-- ================ Forms =============================================== -->
  <!-- doc:The FORM element creates a form. A form can contain textfields, checkboxes, radio-buttons etc. Forms are used to pass user-data to a specified URL, usually a CGI. -->
  <define name="form">
    <element name="form">
      <ref name="form.attlist"/>
      <ref name="form.content"/>
    </element>
  </define>
  <define name="form.attlist" combine="interleave">
    <ref name="attrs"/>
    <attribute name="action">
      <ref name="URI"/>
    </attribute>
    <optional>
      <attribute name="method" a:defaultValue="get">
        <choice>
          <value>get</value>
          <value>post</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="name">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="enctype" a:defaultValue="application/x-www-form-urlencoded">
        <ref name="ContentType"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onsubmit">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onreset">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="accept">
        <ref name="ContentTypes"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="accept-charset">
        <ref name="Charsets"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="target">
        <ref name="FrameTarget"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The LABEL element may be used to attach information to controls. Each LABEL element is associated with exactly one form control. The "for" attribute binds a label to another element. Set the value of the "for" attribute equal to the value of the "id" attribute of the related element. -->
  <define name="label">
    <element name="label">
      <ref name="label.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="label.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="for">
        <data type="IDREF"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="accesskey">
        <ref name="Character"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onfocus">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onblur">
        <ref name="Script"/>
      </attribute>
    </optional>
  </define>
  <define name="InputType">
    <choice>
      <value>text</value>
      <value>password</value>
      <value>checkbox</value>
      <value>radio</value>
      <value>submit</value>
      <value>reset</value>
      <value>file</value>
      <value>hidden</value>
      <value>image</value>
      <value>button</value>
    </choice>
  </define>
  <!-- the name attribute is required for all but submit & reset -->
  <!-- doc:The INPUT element defines the start of an input field where the user can enter data. The INPUT element is empty, it contains attributes only. -->
  <define name="input">
    <element name="input">
      <ref name="input.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="input.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="focus"/>
    <optional>
      <attribute name="type" a:defaultValue="text">
        <ref name="InputType"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="name"/>
    </optional>
    <optional>
      <attribute name="value"/>
    </optional>
    <optional>
      <attribute name="checked">
        <choice>
          <value>checked</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="disabled">
        <choice>
          <value>disabled</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="readonly">
        <choice>
          <value>readonly</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="size"/>
    </optional>
    <optional>
      <attribute name="maxlength">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="src">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="alt"/>
    </optional>
    <optional>
      <attribute name="usemap">
        <ref name="URI"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onselect">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onchange">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="accept">
        <ref name="ContentTypes"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="align">
        <ref name="ImgAlign"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The select element creates a drop-down list. Use this element in the FORM element to accept user input. -->
  <define name="select">
    <element name="select">
      <ref name="select.attlist"/>
      <oneOrMore>
        <choice>
          <ref name="optgroup"/>
          <ref name="option"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <define name="select.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="name"/>
    </optional>
    <optional>
      <attribute name="size">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="multiple">
        <choice>
          <value>multiple</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="disabled">
        <choice>
          <value>disabled</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="tabindex">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onfocus">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onblur">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onchange">
        <ref name="Script"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The OPTGROUP element allows authors to group choices logically. This is particularly helpful when the user must choose from a long list of options; groups of related choices are easier to grasp and remember than a single long list of options. -->
  <define name="optgroup">
    <element name="optgroup">
      <ref name="optgroup.attlist"/>
      <oneOrMore>
        <ref name="option"/>
      </oneOrMore>
    </element>
  </define>
  <define name="optgroup.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="disabled">
        <choice>
          <value>disabled</value>
        </choice>
      </attribute>
    </optional>
    <attribute name="label">
      <ref name="Text"/>
    </attribute>
  </define>
  <!-- doc:The option element defines an option in the drop-down list. Use this element in conjunction with the SELECT element, elsewhere it is meaningless. -->
  <define name="option">
    <element name="option">
      <ref name="option.attlist"/>
      <text/>
    </element>
  </define>
  <define name="option.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="selected">
        <choice>
          <value>selected</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="disabled">
        <choice>
          <value>disabled</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="label">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="value"/>
    </optional>
  </define>
  <!-- doc:The TEXTAREA element creates a multi-line text input control. User agents should use the contents of this element as the initial value of the control and should render this text initially. -->
  <define name="textarea">
    <element name="textarea">
      <ref name="textarea.attlist"/>
      <text/>
    </element>
  </define>
  <define name="textarea.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="focus"/>
    <optional>
      <attribute name="name"/>
    </optional>
    <attribute name="rows">
      <ref name="Number"/>
    </attribute>
    <attribute name="cols">
      <ref name="Number"/>
    </attribute>
    <optional>
      <attribute name="disabled">
        <choice>
          <value>disabled</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="readonly">
        <choice>
          <value>readonly</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="onselect">
        <ref name="Script"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="onchange">
        <ref name="Script"/>
      </attribute>
    </optional>
  </define>
  <!-- doc:The FIELDSET element allows authors to group thematically related controls and labels. Grouping controls makes it easier for users to understand their purpose while simultaneously facilitating tabbing navigation for visual user agents and speech navigation for speech-oriented user agents. The proper use of this element makes documents more accessible. -->
  <define name="fieldset">
    <element name="fieldset">
      <ref name="fieldset.attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="legend"/>
          <ref name="block"/>
          <ref name="form"/>
          <ref name="inline"/>
          <ref name="misc"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="fieldset.attlist" combine="interleave">
    <ref name="attrs"/>
  </define>
  <define name="LAlign">
    <choice>
      <value>top</value>
      <value>bottom</value>
      <value>left</value>
      <value>right</value>
    </choice>
  </define>
  <!-- doc:The LEGEND element allows authors to assign a caption to a FIELDSET. The legend improves accessibility when the FIELDSET is rendered non-visually. -->
  <define name="legend">
    <element name="legend">
      <ref name="legend.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <define name="legend.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="accesskey">
        <ref name="Character"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="align">
        <ref name="LAlign"/>
      </attribute>
    </optional>
  </define>
  <!-- Content is %Flow; excluding a, form, form controls, iframe -->
  <!-- doc:The BUTTON element defines a push button. Inside a button element you can put content for example images, text. -->
  <define name="button">
    <element name="button">
      <ref name="button.attlist"/>
      <ref name="button.content"/>
    </element>
  </define>
  <define name="button.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="focus"/>
    <optional>
      <attribute name="name"/>
    </optional>
    <optional>
      <attribute name="value"/>
    </optional>
    <optional>
      <attribute name="type" a:defaultValue="submit">
        <choice>
          <value>button</value>
          <value>submit</value>
          <value>reset</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="disabled">
        <choice>
          <value>disabled</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- doc:This element creates a single-line text input control. Authors should use the INPUT element to create text input controls. (DEPRECATED) -->
  <define name="isindex">
    <element name="isindex">
      <ref name="isindex.attlist"/>
      <empty/>
    </element>
  </define>
  <define name="isindex.attlist" combine="interleave">
    <ref name="coreattrs"/>
    <ref name="i18n"/>
    <optional>
      <attribute name="prompt">
        <ref name="Text"/>
      </attribute>
    </optional>
  </define>
  <!-- ======================= Tables ======================================= -->
  <!-- Derived from IETF HTML table standard, see [RFC1942] -->
  <!--
    The border attribute sets the thickness of the frame around the
    table. The default units are screen pixels.
    
    The frame attribute specifies which parts of the frame around
    the table should be rendered. The values are not the same as
    CALS to avoid a name clash with the valign attribute.
  -->
  <define name="TFrame">
    <choice>
      <value>void</value>
      <value>above</value>
      <value>below</value>
      <value>hsides</value>
      <value>lhs</value>
      <value>rhs</value>
      <value>vsides</value>
      <value>box</value>
      <value>border</value>
    </choice>
  </define>
  <!--
    The rules attribute defines which rules to draw between cells:
    
    If rules is absent then assume:
        "none" if border is absent or border="0" otherwise "all"
  -->
  <define name="TRules">
    <choice>
      <value>none</value>
      <value>groups</value>
      <value>rows</value>
      <value>cols</value>
      <value>all</value>
    </choice>
  </define>
  <!-- horizontal placement of table relative to document -->
  <define name="TAlign">
    <choice>
      <value>left</value>
      <value>center</value>
      <value>right</value>
    </choice>
  </define>
  <!--
    horizontal alignment attributes for cell contents
    
    char        alignment char, e.g. char=':'
    charoff     offset for alignment char
  -->
  <define name="cellhalign">
    <optional>
      <attribute name="align">
        <choice>
          <value>left</value>
          <value>center</value>
          <value>right</value>
          <value>justify</value>
          <value>char</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="char">
        <ref name="Character"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="charoff">
        <ref name="Length"/>
      </attribute>
    </optional>
  </define>
  <!-- vertical alignment attributes for cell contents -->
  <define name="cellvalign">
    <optional>
      <attribute name="valign">
        <choice>
          <value>top</value>
          <value>middle</value>
          <value>bottom</value>
          <value>baseline</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- doc:The TABLE element defines a table. Inside a TABLE element there can be table headers, table rows, table cells. -->
  <define name="table">
    <element name="table">
      <ref name="table.attlist"/>
      <optional>
        <ref name="caption"/>
      </optional>
      <choice>
        <zeroOrMore>
          <ref name="col"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="colgroup"/>
        </zeroOrMore>
      </choice>
      <optional>
        <ref name="thead"/>
      </optional>
      <optional>
        <ref name="tfoot"/>
      </optional>
      <choice>
        <oneOrMore>
          <ref name="tbody"/>
        </oneOrMore>
        <oneOrMore>
          <ref name="tr"/>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <!-- doc:The CAPTION element defines a table caption. -->
  <define name="caption">
    <element name="caption">
      <ref name="caption.attlist"/>
      <ref name="Inline"/>
    </element>
  </define>
  <!-- doc:Defines a table header. Table rows may be grouped into a table head, table foot, and one or more table body sections, using the THEAD, TFOOT and TBODY elements, respectively. This division enables user agents to support scrolling of table bodies independently of the table head and foot. When long tables are printed, the table head and foot information may be repeated on each page that contains table data. -->
  <define name="thead">
    <element name="thead">
      <ref name="thead.attlist"/>
      <oneOrMore>
        <ref name="tr"/>
      </oneOrMore>
    </element>
  </define>
  <!-- doc:Defines a table footer. Table rows may be grouped into a table head, table foot, and one or more table body sections, using the THEAD, TFOOT and TBODY elements, respectively. This division enables user agents to support scrolling of table bodies independently of the table head and foot. When long tables are printed, the table head and foot information may be repeated on each page that contains table data. -->
  <define name="tfoot">
    <element name="tfoot">
      <ref name="tfoot.attlist"/>
      <oneOrMore>
        <ref name="tr"/>
      </oneOrMore>
    </element>
  </define>
  <!-- doc:Defines a table body. Table rows may be grouped into a table head, table foot, and one or more table body sections, using the THEAD, TFOOT and TBODY elements, respectively. This division enables user agents to support scrolling of table bodies independently of the table head and foot. When long tables are printed, the table head and foot information may be repeated on each page that contains table data. -->
  <define name="tbody">
    <element name="tbody">
      <ref name="tbody.attlist"/>
      <oneOrMore>
        <ref name="tr"/>
      </oneOrMore>
    </element>
  </define>
  <!-- doc:Defines different formatting groups of table columns. The colgroup element is an empty element that contains attributes only. To create columns, you must specify td elements within a tr element. -->
  <define name="colgroup">
    <element name="colgroup">
      <ref name="colgroup.attlist"/>
      <zeroOrMore>
        <ref name="col"/>
      </zeroOrMore>
    </element>
  </define>
  <!-- doc:The COL element allows authors to group together attribute specifications for table columns. The COL does not group columns together structurally that is the role of the COLGROUP element. COL elements are empty and serve only as a support for attributes. They may appear inside or outside an explicit column group (i.e., COLGROUP element). -->
  <define name="col">
    <element name="col">
      <ref name="col.attlist"/>
      <empty/>
    </element>
  </define>
  <!-- doc:The TR elements acts as a container for a row of table cells. -->
  <define name="tr">
    <element name="tr">
      <ref name="tr.attlist"/>
      <oneOrMore>
        <choice>
          <ref name="th"/>
          <ref name="td"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- doc:The TH element defines a cell in a table that contains header information. User agents have two pieces of header information available: the contents of the TH element and the value of the abbr attribute. -->
  <define name="th">
    <element name="th">
      <ref name="th.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <!-- doc:The TD element defines a cell in a table that contains data. -->
  <define name="td">
    <element name="td">
      <ref name="td.attlist"/>
      <ref name="Flow"/>
    </element>
  </define>
  <define name="table.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="summary">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="border">
        <ref name="Pixels"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="frame">
        <ref name="TFrame"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rules">
        <ref name="TRules"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="cellspacing">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="cellpadding">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="align">
        <ref name="TAlign"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="bgcolor">
        <ref name="Color"/>
      </attribute>
    </optional>
  </define>
  <define name="CAlign">
    <choice>
      <value>top</value>
      <value>bottom</value>
      <value>left</value>
      <value>right</value>
    </choice>
  </define>
  <define name="caption.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="align">
        <ref name="CAlign"/>
      </attribute>
    </optional>
  </define>
  <!--
    colgroup groups a set of col elements. It allows you to group
    several semantically related columns together.
  -->
  <define name="colgroup.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="span" a:defaultValue="1">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="MultiLength"/>
      </attribute>
    </optional>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
  </define>
  <!--
    col elements define the alignment properties for cells in
    one or more columns.
    
    The width attribute specifies the width of the columns, e.g.
    
        width=64        width in screen pixels
        width=0.5*      relative width of 0.5
    
    The span attribute causes the attributes of one
    col element to apply to more than one column.
  -->
  <define name="col.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="span" a:defaultValue="1">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="MultiLength"/>
      </attribute>
    </optional>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
  </define>
  <!--
    Use thead to duplicate headers when breaking table
    across page boundaries, or for static headers when
    tbody sections are rendered in scrolling panel.
    
    Use tfoot to duplicate footers when breaking table
    across page boundaries, or for static footers when
    tbody sections are rendered in scrolling panel.
    
    Use multiple tbody sections when rules are needed
    between groups of table rows.
  -->
  <define name="thead.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
  </define>
  <define name="tfoot.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
  </define>
  <define name="tbody.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
  </define>
  <define name="tr.attlist" combine="interleave">
    <ref name="attrs"/>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
    <optional>
      <attribute name="bgcolor">
        <ref name="Color"/>
      </attribute>
    </optional>
  </define>
  <!-- Scope is simpler than headers attribute for common tables -->
  <define name="Scope">
    <choice>
      <value>row</value>
      <value>col</value>
      <value>rowgroup</value>
      <value>colgroup</value>
    </choice>
  </define>
  <!-- th is for headers, td for data and for cells acting as both -->
  <define name="th.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="abbr">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="axis"/>
    </optional>
    <optional>
      <attribute name="headers">
        <data type="IDREFS"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="scope">
        <ref name="Scope"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rowspan" a:defaultValue="1">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="colspan" a:defaultValue="1">
        <ref name="Number"/>
      </attribute>
    </optional>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
    <optional>
      <attribute name="nowrap">
        <choice>
          <value>nowrap</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="bgcolor">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="height">
        <ref name="Length"/>
      </attribute>
    </optional>
  </define>
  <define name="td.attlist" combine="interleave">
    <ref name="attrs"/>
    <optional>
      <attribute name="abbr">
        <ref name="Text"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="axis"/>
    </optional>
    <optional>
      <attribute name="headers">
        <data type="IDREFS"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="scope">
        <ref name="Scope"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="rowspan" a:defaultValue="1">
        <ref name="Number"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="colspan" a:defaultValue="1">
        <ref name="Number"/>
      </attribute>
    </optional>
    <ref name="cellhalign"/>
    <ref name="cellvalign"/>
    <optional>
      <attribute name="nowrap">
        <choice>
          <value>nowrap</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="bgcolor">
        <ref name="Color"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="width">
        <ref name="Length"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="height">
        <ref name="Length"/>
      </attribute>
    </optional>
  </define>
</grammar>
