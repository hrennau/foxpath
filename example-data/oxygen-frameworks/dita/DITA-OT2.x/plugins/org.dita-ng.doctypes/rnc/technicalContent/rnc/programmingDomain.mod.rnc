# ============================================================= 
# MODULE:    DITA Programming Domain - RNC              
# VERSION:   1.2                                                
# DATE:      November 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rnc:programmingDomain.mod.rnc
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rnc:programmingDomain.mod.rnc:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Define elements and specialization attributes
#             for the Programming Domain             
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Define the domain values of this module
domains-atts-value |= "(topic pr-d)"
# Define domain extension patterns
pr-d-ph = codeph.element | synph.element
pr-d-pre = codeblock.element
pr-d-keyword = apiname.element | option.element | parmname.element
pr-d-fig = syntaxdiagram.element
pr-d-dl = parml.element
# Extend the patterns with the domain contribution
ph |= pr-d-ph
pre |= pr-d-pre
keyword |= pr-d-keyword
fig |= pr-d-fig
dl |= pr-d-dl
# Define patterns
codeph = codeph.element
coderef = coderef.element
delim = delim.element
kwd = kwd.element
oper = oper.element
option = option.element
parmname = parmname.element
sep = sep.element
synph = synph.element
var = var.element
pd = pd.element
plentry = plentry.element
pt = pt.element
fragment = fragment.element
fragref = fragref.element
groupchoice = groupchoice.element
groupcomp = groupcomp.element
groupseq = groupseq.element
repsep = repsep.element
synblk = synblk.element
synnote = synnote.element
synnoteref = synnoteref.element
# Define elements content and attributes

# LONG NAME: Universal Attributes Local
# Importance

# Provide an alternative set of univ-atts that 
# allows importance to be redefined locally
univ-atts-no-importance =
  attribute base { text }?,
  base-attribute-extensions,
  id-atts,
  filter-atts,
  localization-atts,
  attribute rev { text }?,
  attribute status {
    "new"
    | "changed"
    | "deleted"
    | "unchanged"
    | "-dita-use-conref-target"
  }?
# LONG NAME: Code Phrase
codeph.content =
  (text | basic.ph.notm | data.elements.incl | foreign.unknown.incl)*
codeph.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The code phrase (<codeph>) element represents a snippet of code within the main flow of text. The code phrase is displayed in a monospaced font for emphasis. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
codeph.element = element codeph { codeph.attlist, codeph.content }
codeph.attlist &= codeph.attributes
# LONG NAME: Code Block
codeblock.content =
  (text
   | basic.ph.notm
   | coderef
   | data.elements.incl
   | foreign.unknown.incl
   | txt.incl)*
codeblock.attributes =
  display-atts,
  attribute spectitle { text }?,
  [ a:defaultValue = "preserve" ] attribute xml:space { "preserve" }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <codeblock> element represents lines of program code. Like the <pre> element, content of this element has preserved line endings and is output in a monospaced font. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
codeblock.element =
  element codeblock { codeblock.attlist, codeblock.content }
codeblock.attlist &= codeblock.attributes
# LONG NAME: Literal code reference
coderef.content = empty
coderef.attributes =
  attribute href { text }?,
  attribute keyref { text }?,
  attribute type { text }?,
  attribute format { text }?,
  attribute scope {
    "external" | "local" | "peer" | "-dita-use-conref-target"
  }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The codref element allows a reference to an external file that contains literal code. When evaluated the coderef element should cause the target code to be displayed inline. If the target contains non-XML characters such as < and &amp;, those will need to be handled in a way that they may be displayed correctly by the final rendering engine.
coderef.element = element coderef { coderef.attlist, coderef.content }
coderef.attlist &= coderef.attributes
# LONG NAME: Option
option.content = (text | \text)*
option.attributes =
  attribute keyref { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <option> element describes an option that can be used to modify a command (or something else, like a configuration). This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
option.element = element option { option.attlist, option.content }
option.attlist &= option.attributes
# LONG NAME: Variable
var.content = words.cnt*
var.attributes =
  attribute importance {
    "default" | "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:Within a syntax diagram, the <var> element defines a variable for which the user must supply content, such as their user name or password. It is represented in output in an italic font. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
var.element = element var { var.attlist, var.content }
var.attlist &= var.attributes
# LONG NAME: Parameter Name
parmname.content = (text | \text)*
parmname.attributes =
  attribute keyref { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:When referencing the name of an application programming interface parameter within the text flow of your topic, use the parameter name (<parmname>) element to markup the parameter. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
parmname.element =
  element parmname { parmname.attlist, parmname.content }
parmname.attlist &= parmname.attributes
# LONG NAME: Syntax Phrase
synph.content =
  (text
   | codeph
   | delim
   | kwd
   | oper
   | option
   | parmname
   | sep
   | synph
   | \text
   | var)*
synph.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The syntax phrase (<synph>) element is a container for syntax definition elements. It is used when a complete syntax diagram is not needed, but some of the syntax elements, such as kwd, oper, delim, are used within the text flow of the topic content. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
synph.element = element synph { synph.attlist, synph.content }
synph.attlist &= synph.attributes
# LONG NAME: Operator
oper.content = words.cnt*
oper.attributes =
  attribute importance {
    "default" | "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The operator (<oper>) element defines an operator within a syntax definition. Typical operators are equals (=), plus (+) or multiply (*). This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
oper.element = element oper { oper.attlist, oper.content }
oper.attlist &= oper.attributes
# LONG NAME: Delimiter
delim.content = words.cnt*
delim.attributes =
  attribute importance {
    "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:Within a syntax diagram, the delimiter (<delim>) element defines a character marking the beginning or end of a section or part of the complete syntax. Typical delimiter characters are the parenthesis, comma, tab, vertical bar or other special characters. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
delim.element = element delim { delim.attlist, delim.content }
delim.attlist &= delim.attributes
# LONG NAME: Separator
sep.content = words.cnt*
sep.attributes =
  attribute importance {
    "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The separator (<sep>) element defines a separator character that is inline with the content of a syntax diagram. The separator occurs between keywords, operators or groups in a syntax definition. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
sep.element = element sep { sep.attlist, sep.content }
sep.attlist &= sep.attributes
# LONG NAME: API Name
apiname.content = (text | \text)*
apiname.attributes =
  attribute keyref { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <apiname> element provides the name of an application programming interface (API) such as a Java class name or method name. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
apiname.element = element apiname { apiname.attlist, apiname.content }
apiname.attlist &= apiname.attributes
# LONG NAME: Parameter List
parml.content = plentry+
parml.attributes =
  attribute compact { "yes" | "no" | "-dita-use-conref-target" }?,
  attribute spectitle { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The parameter list (<parml>) element contains a list of terms and definitions that describes the parameters in an application programming interface. This is a special kind of definition list that is designed for documenting programming parameters. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
parml.element = element parml { parml.attlist, parml.content }
parml.attlist &= parml.attributes
# LONG NAME: Parameter List Entry
plentry.content = pt+, pd+
plentry.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The parameter list entry element (<plentry>) contains one or more parameter terms and definitions (pd and pt). This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
plentry.element = element plentry { plentry.attlist, plentry.content }
plentry.attlist &= plentry.attributes
# LONG NAME: Parameter Term
pt.content = term.cnt*
pt.attributes =
  attribute keyref { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:A parameter term, within a parameter list entry, is enclosed by the <pt> element. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
pt.element = element pt { pt.attlist, pt.content }
pt.attlist &= pt.attributes
# LONG NAME: Parameter Description
pd.content = defn.cnt*
pd.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:A parameter definition, within a parameter list entry, is enclosed by the <pd> element. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
pd.element = element pd { pd.attlist, pd.content }
pd.attlist &= pd.attributes
# LONG NAME: Syntax Diagram
syntaxdiagram.content =
  title?,
  (fragment
   | fragref
   | groupchoice
   | groupcomp
   | groupseq
   | synblk
   | synnote
   | synnoteref)*
syntaxdiagram.attributes =
  display-atts,
  univ-atts,
  attribute outputclass { text }?
# doc:The syntax diagram (<syntaxdiagram>) element is the main container for all the syntax elements that make up a syntax definition. The syntax diagram represents the syntax of a statement from a computer language, or a command, function call or programming language statement. Traditionally, the syntax diagram is formatted with railroad tracks that connect the units of the syntax together, but this presentation may differ depending on the output media. The syntax diagram element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
syntaxdiagram.element =
  element syntaxdiagram { syntaxdiagram.attlist, syntaxdiagram.content }
syntaxdiagram.attlist &= syntaxdiagram.attributes
# LONG NAME: Syntax Block
synblk.content =
  title?,
  (fragment
   | fragref
   | groupchoice
   | groupcomp
   | groupseq
   | synnote
   | synnoteref)*
synblk.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The syntax block (<synblk>) element organizes small pieces of a syntax definition into a larger piece. The syntax block element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
synblk.element = element synblk { synblk.attlist, synblk.content }
synblk.attlist &= synblk.attributes
# LONG NAME: Sequence Group
groupseq.content =
  title?,
  repsep?,
  (delim
   | fragref
   | groupchoice
   | groupcomp
   | groupseq
   | kwd
   | oper
   | sep
   | synnote
   | synnoteref
   | var)*
groupseq.attributes =
  attribute importance {
    "default" | "required" | "optional" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The <groupseq> element is part of the subset of elements that define syntax diagrams in DITA. A group is a logical set of pieces of syntax that go together. Within the syntax definition, groups of keywords, delimiters and other syntax units act as a combined unit, and they occur in a specific sequence, as delimited by the <groupseq> element. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
groupseq.element =
  element groupseq { groupseq.attlist, groupseq.content }
groupseq.attlist &= groupseq.attributes
# LONG NAME: Choice Group
groupchoice.content =
  title?,
  repsep?,
  (delim
   | fragref
   | groupchoice
   | groupcomp
   | groupseq
   | kwd
   | oper
   | sep
   | synnote
   | synnoteref
   | var)*
groupchoice.attributes =
  attribute importance {
    "default" | "required" | "optional" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The <groupchoice> element is part of the subset of elements that define syntax diagrams in DITA. A group is a logical set of pieces of syntax that go together. A group choice specifies that the user must make a choice about which part of the syntax to use. Groups are often nested. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
groupchoice.element =
  element groupchoice { groupchoice.attlist, groupchoice.content }
groupchoice.attlist &= groupchoice.attributes
# LONG NAME: Composite group
groupcomp.content =
  title?,
  repsep?,
  (delim
   | fragref
   | groupchoice
   | groupcomp
   | groupseq
   | kwd
   | oper
   | sep
   | synnote
   | synnoteref
   | var)*
groupcomp.attributes =
  attribute importance {
    "default" | "required" | "optional" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The <groupcomp> element is part of the subset of elements that define syntax diagrams in DITA. A group is a logical set of pieces of syntax that go together. The group composite means that the items that make up the syntax diagram will be formatted close together rather than being separated by a horizontal or vertical line, which is the usual formatting method. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
groupcomp.element =
  element groupcomp { groupcomp.attlist, groupcomp.content }
groupcomp.attlist &= groupcomp.attributes
# LONG NAME: Fragment
fragment.content =
  title?,
  (fragref | groupchoice | groupcomp | groupseq | synnote | synnoteref)*
fragment.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:Within a syntax definition, a <fragment> is a labeled subpart of the syntax. The <fragment> element allows breaking out logical chunks of a large syntax diagram into named fragments. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
fragment.element =
  element fragment { fragment.attlist, fragment.content }
fragment.attlist &= fragment.attributes
# LONG NAME: Fragment Reference
fragref.content = xrefph.cnt*
fragref.attributes =
  attribute href { text }?,
  attribute importance {
    "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The fragment reference (<fragref>) element provides a logical reference to a syntax definition fragment so that you can reference a syntax fragment multiple times, or pull a large section of syntax out of line for easier reading. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
fragref.element = element fragref { fragref.attlist, fragref.content }
fragref.attlist &= fragref.attributes
# LONG NAME: Syntax Diagram Note
synnote.content = (text | basic.ph)*
synnote.attributes =
  attribute callout { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The syntax note (<synnote>) element contains a note (similar to a footnote) within a syntax definition group or fragment. The syntax note explains aspects of the syntax that cannot be expressed in the markup itself. The note will appear at the bottom of the syntax diagram instead of at the bottom of the page. The syntax block element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
synnote.element = element synnote { synnote.attlist, synnote.content }
synnote.attlist &= synnote.attributes
# LONG NAME: Syntax Note Reference
synnoteref.content = empty
synnoteref.attributes =
  attribute href { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The syntax note (<synnoteref>) reference element references a syntax note element (<synnote>) that has already been defined elsewhere in the syntax diagram. The same notation can be used in more than one syntax definition. The syntax note reference element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
synnoteref.element =
  element synnoteref { synnoteref.attlist, synnoteref.content }
synnoteref.attlist &= synnoteref.attributes
# LONG NAME: Repeat Separator
repsep.content = words.cnt*
repsep.attributes =
  attribute importance {
    "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The repeat separator (<repsep>) element in a syntax diagram defines a group of syntax elements that can (or should) be repeated. If the <repsep> element contains a separator character, such as a plus (+), this indicates that the character must be used between repetitions of the syntax elements. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
repsep.element = element repsep { repsep.attlist, repsep.content }
repsep.attlist &= repsep.attributes
# LONG NAME: Syntax Keyword
kwd.content = (text | \text)*
kwd.attributes =
  attribute keyref { text }?,
  attribute importance {
    "default" | "required" | "optional" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance,
  attribute outputclass { text }?
# doc:The <kwd> element defines a keyword within a syntax diagram. A keyword must be typed or output, either by the user or application, exactly as specified in the syntax definition. This element is part of the DITA programming domain, a special set of DITA elements designed to document programming tasks, concepts and reference information.
# Category: Programming elements
kwd.element = element kwd { kwd.attlist, kwd.content }
kwd.attlist &= kwd.attributes
# Specialization attributes. Global attributes and class defaults
apiname.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/keyword pr-d/apiname " ]
  attribute class { text }?
codeblock.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/pre pr-d/codeblock " ]
  attribute class { text }?
codeph.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/codeph " ]
  attribute class { text }?
coderef.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/xref pr-d/coderef " ]
  attribute class { text }?
delim.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/delim " ]
  attribute class { text }?
fragment.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/figgroup pr-d/fragment " ]
  attribute class { text }?
fragref.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/xref pr-d/fragref " ]
  attribute class { text }?
groupchoice.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/figgroup pr-d/groupchoice " ]
  attribute class { text }?
groupcomp.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/figgroup pr-d/groupcomp " ]
  attribute class { text }?
groupseq.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/figgroup pr-d/groupseq " ]
  attribute class { text }?
kwd.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/keyword pr-d/kwd " ]
  attribute class { text }?
oper.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/oper " ] attribute class { text }?
option.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/keyword pr-d/option " ]
  attribute class { text }?
parml.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/dl pr-d/parml " ]
  attribute class { text }?
parmname.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/keyword pr-d/parmname " ]
  attribute class { text }?
pd.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/dd pr-d/pd " ] attribute class { text }?
plentry.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/dlentry pr-d/plentry " ]
  attribute class { text }?
pt.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/dt pr-d/pt " ] attribute class { text }?
repsep.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/repsep " ]
  attribute class { text }?
sep.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/sep " ] attribute class { text }?
synblk.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/figgroup pr-d/synblk " ]
  attribute class { text }?
synnote.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/fn pr-d/synnote " ]
  attribute class { text }?
synnoteref.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/xref pr-d/synnoteref " ]
  attribute class { text }?
synph.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/synph " ]
  attribute class { text }?
syntaxdiagram.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/fig pr-d/syntaxdiagram " ]
  attribute class { text }?
var.attlist &=
  global-atts,
  [ a:defaultValue = "+ topic/ph pr-d/var " ] attribute class { text }?
