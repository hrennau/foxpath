# ============================================================= 
# MODULE:    DITA Concept - RNC              
# VERSION:   1.2                                                
# DATE:      November 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rnc:concept.mod.rnc
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rnc:concept.mod.rnc:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Define elements and specialization attributes
#             for Concepts            
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Define the domain values of this module
domains-atts-value |= "(topic concept)"
# XXX
concept-info-types = info-types
# Define patterns
concept = concept.element
conbody = conbody.element
conbodydiv = conbodydiv.element
# Define elements content and attributes

# LONG NAME: Concept
concept.content =
  title,
  titlealts?,
  (abstract | shortdesc)?,
  prolog?,
  conbody?,
  related-links?,
  concept-info-types*
concept.attributes =
  attribute id { xsd:ID },
  conref-atts,
  select-atts,
  localization-atts,
  attribute outputclass { text }?
concept.element =
  
  ## The <concept> element is the top-level element for a topic that answers
  ##         the question what is? Concepts provide background information that users must know before
  ##         they can successfully work with a product or interface. Often, a concept is an extended
  ##         definition of a major abstraction such as a process or function. It might also have an
  ##         example or a graphic, but generally the structure of a concept is fairly simple. 
  ##         Category: Concept elements
  element concept { concept.attlist, concept.content }
concept.attlist &= concept.attributes, arch-atts, domains-atts
# LONG NAME: Concept Body
conbody.content = body.cnt*, (section | example | conbodydiv)*
conbody.attributes =
  id-atts,
  localization-atts,
  attribute base { text }?,
  base-attribute-extensions,
  attribute outputclass { text }?
conbody.element =
  
  ## The <conbody> element is the main body-level element for a concept. Like
  ##         the <body> element of a general <topic>, <conbody> allows paragraphs, lists, and
  ##         other elements as well as sections and examples. But <conbody> has a constraint that a
  ##         section or an example can be followed only by other sections or examples. 
  ##         Category: Concept elements
  element conbody { conbody.attlist, conbody.content }
conbody.attlist &= conbody.attributes
# LONG NAME: Concept Body division
conbodydiv.content = (example | section)*
conbodydiv.attributes =
  univ-atts,
  attribute outputclass { text }?
conbodydiv.element =
  
  ## The <conbodydiv> element is similar to the <bodydiv> element in that it
  ##         provides an informal container for content that may be grouped within a concept. There are
  ##         no additional semantics attached to the conbodydiv element; it is purely a grouping element
  ##         provided to help organize content.
  element conbodydiv { conbodydiv.attlist, conbodydiv.content }
conbodydiv.attlist &= conbodydiv.attributes
# Specialization attributes. Global attributes and class defaults
concept.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/topic concept/concept " ]
  attribute class { text }?
conbody.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/body  concept/conbody " ]
  attribute class { text }?
conbodydiv.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/bodydiv concept/conbodydiv " ]
  attribute class { text }?
