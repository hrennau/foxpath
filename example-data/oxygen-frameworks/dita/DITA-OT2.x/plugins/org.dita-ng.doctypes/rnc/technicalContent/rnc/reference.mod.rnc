# ============================================================= 
# MODULE:    DITA Reference - RNC              
# VERSION:   1.2                                                
# DATE:      October 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rnc:reference.mod.rnc
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rnc:reference.mod.rnc:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Define elements and specialization attributes
#             Reference
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Define the domain values of this module
domains-atts-value |= "(topic reference)"
reference-info-types = info-types
# Define patterns
refbody = refbody.element
refbodydiv = refbodydiv.element
refsyn = refsyn.element
properties = properties.element
property = property.element
proptype = proptype.element
propvalue = propvalue.element
propdesc = propdesc.element
prophead = prophead.element
proptypehd = proptypehd.element
propvaluehd = propvaluehd.element
propdeschd = propdeschd.element
# Define elements content and attributes

# LONG NAME: Reference
reference.content =
  title,
  titlealts?,
  (abstract | shortdesc)?,
  prolog?,
  refbody?,
  related-links?,
  reference-info-types*
reference.attributes =
  attribute id { xsd:ID },
  conref-atts,
  select-atts,
  localization-atts,
  attribute outputclass { text }?
# doc:The <reference> element defines a top-level container for a reference topic. Reference topics document programming constructs or facts about a product. Examples of reference topics include language elements, class descriptions, commands, functions, statements, protocols, types, declarators, operands, and API information, which provide quick access to facts, but no explanation of concepts or procedures. Reference topics have the same high-level structure as any other topic type, with a title, short description, and body. Within the body, reference topics are typically organized into one or more sections, property lists, and tables. The reference topic type provides general rules that apply to all kinds of reference information, using elements like <refsyn> for syntax or signatures, and <properties> for lists of properties and values.
# Category: Reference elements
reference.element =
  element reference { reference.attlist, reference.content }
reference.attlist &= reference.attributes, arch-atts, domains-atts
# LONG NAME: Reference Body
refbody.content =
  (data.elements.incl
   | example
   | foreign.unknown.incl
   | refbodydiv
   | refsyn
   | properties
   | section
   | simpletable
   | table)*
refbody.attributes =
  id-atts,
  localization-atts,
  attribute base { text }?,
  base-attribute-extensions,
  attribute outputclass { text }?
# doc:The <refbody> element is a container for the main content of the reference topic. Reference topics limit the body structure to tables (both simple and standard), property lists, syntax sections, and generic sections and examples, in any sequence or number.
# Category: Reference elements
refbody.element = element refbody { refbody.attlist, refbody.content }
refbody.attlist &= refbody.attributes
# LONG NAME: Reference Body division
refbodydiv.content =
  (data.elements.incl
   | example
   | foreign.unknown.incl
   | refbodydiv
   | refsyn
   | properties
   | section
   | simpletable
   | table)*
refbodydiv.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <refbodydiv> element is similar to the <bodydiv> element in that it provides an informal container for content that may be grouped within a reference. Reference topics place many restrictions on their content compared to generic topics; the <refbodydiv> element maintains these restrictions by only allowing elements that are already available within the body of a reference. There are no additional semantics attached to the <refbodydiv> element; it is purely a grouping element provided to help organize content.
refbodydiv.element =
  element refbodydiv { refbodydiv.attlist, refbodydiv.content }
refbodydiv.attlist &= refbodydiv.attributes
# LONG NAME: Reference Syntax
refsyn.content = section.cnt*
refsyn.attributes =
  attribute spectitle { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <refsyn> element is a special section inside a reference topic. The section often contains syntax or signature content (for example, a command-line utility's calling syntax, or an API's signature). The <refsyn> contains a brief, possibly diagrammatic description of the subject's interface or high-level structure.
# Category: Reference elements
refsyn.element = element refsyn { refsyn.attlist, refsyn.content }
refsyn.attlist &= refsyn.attributes
# LONG NAME: Properties
properties.content = prophead?, property+
properties.attributes =
  attribute relcolwidth { text }?,
  attribute keycol { xsd:NMTOKEN }?,
  attribute refcols { xsd:NMTOKENS }?,
  attribute spectitle { text }?,
  display-atts,
  univ-atts,
  attribute outputclass { text }?
# doc:The <properties> element gives a list of properties for the subject of the current topic, for example whether a class is public or protected. Each property can include the type, value, and a description. The typical rendering is usually in a table-like format. To represent multiple values for a type, just create additional property elements and use only the <propvalue> element (and <propdesc> when needed) for each successive value.
# Category: Reference elements
properties.element =
  element properties { properties.attlist, properties.content }
properties.attlist &= properties.attributes
# LONG NAME:  Property Head
prophead.content = proptypehd?, propvaluehd?, propdeschd?
prophead.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The prophead element supports regular headings for the properties element.
# Category: Reference elements
prophead.element =
  element prophead { prophead.attlist, prophead.content }
prophead.attlist &= prophead.attributes
# LONG NAME: Property Type Head
proptypehd.content = tblcell.cnt*
proptypehd.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The proptypehd element supports regular headings for the type column of a properties table.
# Category: Reference elements
proptypehd.element =
  element proptypehd { proptypehd.attlist, proptypehd.content }
proptypehd.attlist &= proptypehd.attributes
# LONG NAME: Property Value Head
propvaluehd.content = tblcell.cnt*
propvaluehd.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The propvaluehd element supports regular headings for the value column of a properties table.
# Category: Reference elements
propvaluehd.element =
  element propvaluehd { propvaluehd.attlist, propvaluehd.content }
propvaluehd.attlist &= propvaluehd.attributes
# LONG NAME: Property Description Head
propdeschd.content = tblcell.cnt*
propdeschd.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The propdeschd element supports regular headings for the description column of a properties table.
# Category: Reference elements
propdeschd.element =
  element propdeschd { propdeschd.attlist, propdeschd.content }
propdeschd.attlist &= propdeschd.attributes
# LONG NAME: Property
property.content = proptype?, propvalue?, propdesc?
property.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <property> element represents a property of the current topic's subject. For example, if the current topic is a class, the property might show that the class is protected rather than public. It contains three optional elements: type, value, and description.
# Category: Reference elements
property.element =
  element property { property.attlist, property.content }
property.attlist &= property.attributes
# LONG NAME: Property Type
proptype.content = ph.cnt*
proptype.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The proptype element describes the type of property.
# Category: Reference elements
proptype.element =
  element proptype { proptype.attlist, proptype.content }
proptype.attlist &= proptype.attributes
# LONG NAME: Property Value
propvalue.content = ph.cnt*
propvalue.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <propvalue> element indicates the value or values for the current property type. You can put values in separate rows if they need separate descriptions, and just leave the <proptype> element blank.
# Category: Reference elements
propvalue.element =
  element propvalue { propvalue.attlist, propvalue.content }
propvalue.attlist &= propvalue.attributes
# LONG NAME: Property Descrption
propdesc.content = desc.cnt*
propdesc.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <propdesc> element is used to provide a short description of the property type and its listed values (or just the value).
# Category: Reference elements
propdesc.element =
  element propdesc { propdesc.attlist, propdesc.content }
propdesc.attlist &= propdesc.attributes
# Specialization attributes. Global attributes and class defaults
reference.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/topic       reference/reference " ]
  attribute class { text }?
refbody.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/body        reference/refbody " ]
  attribute class { text }?
refbodydiv.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/bodydiv     reference/refbodydiv " ]
  attribute class { text }?
refsyn.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section     reference/refsyn " ]
  attribute class { text }?
properties.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/simpletable reference/properties " ]
  attribute class { text }?
property.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/strow       reference/property " ]
  attribute class { text }?
proptype.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry     reference/proptype " ]
  attribute class { text }?
propvalue.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry     reference/propvalue " ]
  attribute class { text }?
propdesc.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry     reference/propdesc " ]
  attribute class { text }?
prophead.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/sthead      reference/prophead " ]
  attribute class { text }?
proptypehd.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry     reference/proptypehd " ]
  attribute class { text }?
propvaluehd.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry     reference/propvaluehd " ]
  attribute class { text }?
propdeschd.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry     reference/propdeschd " ]
  attribute class { text }?
# ================== End DITA Reference  ===========================
