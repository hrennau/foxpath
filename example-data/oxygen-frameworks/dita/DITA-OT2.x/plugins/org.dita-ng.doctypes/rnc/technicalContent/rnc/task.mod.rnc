# ============================================================= 
# MODULE:    DITA Task - RNC              
# VERSION:   1.2                                                
# DATE:      November 2010                                       
# =============================================================

# Refer to the latest version of this file by the following URI:
# urn:dita-ng:dita:rnc:task.mod.rnc
# To refer to this specific version, you may use this value:
# urn:dita-ng:dita:rnc:task.mod.rnc:1.2

# ============================================================= 
# SYSTEM:     Darwin Information Typing Architecture (DITA)     
# PURPOSE:    Define elements and specialization attributes
#             for Tasks            
# ORIGINAL CREATION DATE:  
# September 2010                                                
# (C) Copyright Syncro Soft 2010-2011                                
# All Rights Reserved.                                          
# =============================================================

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# Define the domain values of this module
domains-atts-value |= "(topic task)"
# Define patterns
taskbody = taskbody.element
steps = steps.element
steps-unordered = steps-unordered.element
step = step.element
stepsection = stepsection.element
cmd = cmd.element
substeps = substeps.element
substep = substep.element
tutorialinfo = tutorialinfo.element
info = info.element
stepxmp = stepxmp.element
stepresult = stepresult.element
choices = choices.element
choice = choice.element
steps-informal = steps-informal.element
result = result.element
prereq = prereq.element
postreq = postreq.element
context = context.element
choicetable = choicetable.element
chhead = chhead.element
chrow = chrow.element
choptionhd = choptionhd.element
chdeschd = chdeschd.element
choption = choption.element
chdesc = chdesc.element
# SHARED ATTRIBUTE LISTS

# Provide an alternative set of univ-atts 
# that allows importance to be redefined 
# locally
univ-atts-no-importance-task =
  id-atts,
  filter-atts,
  attribute base { text }?,
  base-attribute-extensions,
  attribute rev { text }?,
  attribute status {
    "new"
    | "changed"
    | "deleted"
    | "unchanged"
    | "-dita-use-conref-target"
  }?,
  localization-atts
task-info-types = info-types
# Define elements content and attributes

# LONG NAME: Task
task.content =
  title,
  titlealts?,
  (abstract | shortdesc)?,
  prolog?,
  taskbody?,
  related-links?,
  task-info-types*
task.attributes =
  attribute id { xsd:ID },
  conref-atts,
  select-atts,
  localization-atts,
  attribute outputclass { text }?
# doc:The <task> element is the top-level element for a task topic. Tasks are the main building blocks for task-oriented user assistance. They generally provide step-by-step instructions that will enable a user to perform a task. A task answers the question of "how to?" by telling the user precisely what to do and the order in which to do it. Tasks have the same high-level structure as other topics, with a title, short description and body.
# Category: Task elements
task.element = element task { task.attlist, task.content }
task.attlist &= task.attributes, arch-atts, domains-atts
# LONG NAME: Task Body
taskbody.content =
  (prereq | context | section)*,
  (steps | steps-unordered | steps-informal)?,
  result?,
  example*,
  postreq*
taskbody.attributes =
  id-atts,
  localization-atts,
  attribute base { text }?,
  base-attribute-extensions,
  attribute outputclass { text }?
# doc:The <taskbody> element is the main body-level element inside a task topic. A task body has a very specific structure, with the following elements in this order: <prereq>, <context>, <steps>, <result>, <example> and <postreq>. Each of the body sections are optional.
# Category: Task elements
taskbody.element =
  element taskbody { taskbody.attlist, taskbody.content }
taskbody.attlist &= taskbody.attributes
# LONG NAME: Prerequisites
prereq.content = section.notitle.cnt*
prereq.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The pre-requisite (<prereq>) section of a task should document things the user needs to know or do before starting the current task. Prerequisite links will be placed in a list after the related-links section; on output the <prereq> links from the related-links section are added to the <prereq> section.
# Category: Task elements
prereq.element = element prereq { prereq.attlist, prereq.content }
prereq.attlist &= prereq.attributes
# LONG NAME: Context
context.content = section.notitle.cnt*
context.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <context> section of a task provides background information for the task. This information helps the user understand what the purpose of the task is and what they will gain by completing the task. This section should be brief and does not replace or recreate a concept topic on the same subject, although the context section may include some conceptual information.
# Category: Task elements
context.element = element context { context.attlist, context.content }
context.attlist &= context.attributes
# LONG NAME: Informal Steps
steps-informal.content = section.notitle.cnt*
steps-informal.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <steps-informal> element allows authors to describe procedural task information that would not normally be described as steps.
steps-informal.element =
  element steps-informal {
    steps-informal.attlist, steps-informal.content
  }
steps-informal.attlist &= steps-informal.attributes
# LONG NAME: Steps
steps.content = (stepsection?, step)+
steps.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <steps> section of a task provides the main content of the task topic. The task is described as a series of steps that the user must follow to accomplish the task. One or more <steps> elements is required inside the <steps> section.
# Category: Task elements
steps.element = element steps { steps.attlist, steps.content }
steps.attlist &= steps.attributes
# LONG NAME: Steps: Unordered
steps-unordered.content = (stepsection?, step)+
steps-unordered.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:Like the <steps> element, the <steps-unordered> section of a task provides the main content of the task topic, but particularly for cases in which the order of steps may vary from one situation to another. One or more steps is required inside the <steps-unordered> section.
# Category: Task elements
steps-unordered.element =
  element steps-unordered {
    steps-unordered.attlist, steps-unordered.content
  }
steps-unordered.attlist &= steps-unordered.attributes
# LONG NAME: Step section
stepsection.content = listitem.cnt*
stepsection.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <stepsection> element provides expository text before a step element. Although the element is specialized from <li> and has the same content model as a list item, this is not considered a step, and rendering engines may choose to skip this element when numbering steps.
stepsection.element =
  element stepsection { stepsection.attlist, stepsection.content }
stepsection.attlist &= stepsection.attributes
# LONG NAME: Step
step.content =
  note*,
  cmd,
  (choices
   | choicetable
   | info
   | itemgroup
   | stepxmp
   | substeps
   | tutorialinfo)*,
  stepresult?
step.attributes =
  attribute importance {
    "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance-task,
  attribute outputclass { text }?
# doc:The <step> element represents an action that a user must follow to accomplish a task. Each step in a task must contain a command <cmd> element which describes the particular action the user must do to accomplish the overall task. The step element can also contain information <info>, substeps <substeps>, tutorial information <tutorialinfo>, a step example <stepxmp>, choices <choices> or a stepresult <stepresult>, although these are optional.
# Category: Task elements
step.element = element step { step.attlist, step.content }
step.attlist &= step.attributes
# LONG NAME: Command
cmd.content = ph.cnt*
cmd.attributes =
  attribute keyref { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The command (<cmd>) element is required as the first element inside a <step>. It provides the active voice instruction to the user for completing the step, and should not be more than one sentence. If the step needs additional explanation, this can follow the <cmd> element inside an <info > element.
# Category: Task elements
cmd.element = element cmd { cmd.attlist, cmd.content }
cmd.attlist &= cmd.attributes
# LONG NAME: Information
info.content = itemgroup.cnt*
info.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The information element (<info>) occurs inside a <step> element to provide additional information about the step.
# Category: Task elements
info.element = element info { info.attlist, info.content }
info.attlist &= info.attributes
# LONG NAME: Sub-steps
substeps.content = substep+
substeps.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <substeps> element allows you to break a step down into a series of separate actions, and should be used only if necessary. Try to describe the steps of a task in a single level of steps. If you need to use more than one level of substep nesting, you should probably rewrite the task to simplify it.
# Category: Task elements
substeps.element =
  element substeps { substeps.attlist, substeps.content }
substeps.attlist &= substeps.attributes
# LONG NAME: Sub-step
substep.content =
  note*, cmd, (info | itemgroup | stepxmp | tutorialinfo)*, stepresult?
substep.attributes =
  attribute importance {
    "optional" | "required" | "-dita-use-conref-target"
  }?,
  univ-atts-no-importance-task,
  attribute outputclass { text }?
# doc:A <substep> element has the same structure as a <step>, except that it does not allow lists of choices or substeps within it, in order to prevent unlimited nesting of steps.
# Category: Task elements
substep.element = element substep { substep.attlist, substep.content }
substep.attlist &= substep.attributes
# LONG NAME: Tutorial Information
tutorialinfo.content = itemgroup.cnt*
tutorialinfo.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The tutorial info (<tutorialinfo>) element contains additional information that is useful when the task is part of a tutorial.
# Category: Task elements
tutorialinfo.element =
  element tutorialinfo { tutorialinfo.attlist, tutorialinfo.content }
tutorialinfo.attlist &= tutorialinfo.attributes
# LONG NAME: Step Example
stepxmp.content = itemgroup.cnt*
stepxmp.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The step example (<stepxmp>) element is used to illustrate a step of a task. The example can be a couple of words, or an entire paragraph.
# Category: Task elements
stepxmp.element = element stepxmp { stepxmp.attlist, stepxmp.content }
stepxmp.attlist &= stepxmp.attributes
# LONG NAME: Choices
choices.content = choice+
choices.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <choices> element contains a list of <choice> elements. It is used when the user will need to choose one of several actions while performing the steps of a task.
# Category: Task elements
choices.element = element choices { choices.attlist, choices.content }
choices.attlist &= choices.attributes
# LONG NAME: Choice
choice.content = listitem.cnt*
choice.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:Each <choice> element describes one way that the user could accomplish the current step.
# Category: Task elements
choice.element = element choice { choice.attlist, choice.content }
choice.attlist &= choice.attributes
# LONG NAME: Choice Table
choicetable.content = chhead?, chrow+
choicetable.attributes =
  attribute relcolwidth { text }?,
  [ a:defaultValue = "1" ] attribute keycol { xsd:NMTOKEN }?,
  attribute refcols { xsd:NMTOKENS }?,
  attribute spectitle { text }?,
  display-atts,
  univ-atts,
  attribute outputclass { text }?
# doc:The <choicetable> element contains a series of optional choices available within a step of a task.
# Category: Task elements
choicetable.element =
  element choicetable { choicetable.attlist, choicetable.content }
choicetable.attlist &= choicetable.attributes
# LONG NAME: Choice Head
chhead.content = choptionhd, chdeschd
chhead.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <chhead> element is a container inside the <choicetable> element that provides specific heading text to override the default Options and Description headings. The <chhead> element contains both a <choptionhd> and <chdeschd> element as a pair.
# Category: Task elements
chhead.element = element chhead { chhead.attlist, chhead.content }
chhead.attlist &= chhead.attributes
# LONG NAME: Choice Option Head
choptionhd.content = tblcell.cnt*
choptionhd.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <choptionhd> element provides a specific label for the list of options that a user chooses from to accomplish a step. The default label for options is Option.
# Category: Task elements
choptionhd.element =
  element choptionhd { choptionhd.attlist, choptionhd.content }
choptionhd.attlist &= choptionhd.attributes
# LONG NAME: Choice Description Head
chdeschd.content = tblcell.cnt*
chdeschd.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <chdeschd> option provides a specific label for the list of descriptions of options that a user must choose to accomplish a step of a task. The default label overridden by <chdeschd> is Description.
# Category: Task elements
chdeschd.element =
  element chdeschd { chdeschd.attlist, chdeschd.content }
chdeschd.attlist &= chdeschd.attributes
# LONG NAME: Choice Row
chrow.content = choption, chdesc
chrow.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <chrow> element is a container inside the <choicetable> element. The <chrow> element contains both a <choption> and <chdesc> element as a pair.
# Category: Task elements
chrow.element = element chrow { chrow.attlist, chrow.content }
chrow.attlist &= chrow.attributes
# LONG NAME: Choice Option
choption.content = tblcell.cnt*
choption.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <choption> element describes an option that a user could choose to accomplish a step of a task. In a user interface, for example, this might be the name of radio button.
# Category: Task elements
choption.element =
  element choption { choption.attlist, choption.content }
choption.attlist &= choption.attributes
# LONG NAME: Choice Description
chdesc.content = tblcell.cnt*
chdesc.attributes =
  attribute specentry { text }?,
  univ-atts,
  attribute outputclass { text }?
# doc:The <chdesc> element is a description of an option that a user chooses while performing a step to accomplish a task. It explains why the user would choose that option, and might explain the result of the choice when it is not immediately obvious.
# Category: Task elements
chdesc.element = element chdesc { chdesc.attlist, chdesc.content }
chdesc.attlist &= chdesc.attributes
# LONG NAME: Step Result
stepresult.content = itemgroup.cnt*
stepresult.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <stepresult> element provides information on the expected outcome of a step. If a user interface is being documented, the outcome could describe a dialog box opening, or the appearance of a progress indicator. Step results are useful to assure a user that they are on track, but should not be used for every step, as this quickly becomes tedious.
# Category: Task elements
stepresult.element =
  element stepresult { stepresult.attlist, stepresult.content }
stepresult.attlist &= stepresult.attributes
# LONG NAME: Result
result.content = section.notitle.cnt*
result.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <result> element describes the expected outcome for the task as a whole.
# Category: Task elements
result.element = element result { result.attlist, result.content }
result.attlist &= result.attributes
# LONG NAME: Post Requirements
postreq.content = section.notitle.cnt*
postreq.attributes =
  univ-atts,
  attribute outputclass { text }?
# doc:The <postreq> element describes steps or tasks that the user should do after the successful completion of the current task. It is often supported by links to the next task or tasks in the <related-links> section.
# Category: Task elements
postreq.element = element postreq { postreq.attlist, postreq.content }
postreq.attlist &= postreq.attributes
# Specialization attributes. Global attributes and class defaults
task.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/topic task/task " ]
  attribute class { text }?
taskbody.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/body task/taskbody " ]
  attribute class { text }?
steps.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/ol task/steps " ]
  attribute class { text }?
steps-unordered.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/ul task/steps-unordered " ]
  attribute class { text }?
stepsection.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/li task/stepsection " ]
  attribute class { text }?
step.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/li task/step " ] attribute class { text }?
cmd.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/ph task/cmd " ] attribute class { text }?
substeps.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/ol task/substeps " ]
  attribute class { text }?
substep.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/li task/substep " ]
  attribute class { text }?
tutorialinfo.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/itemgroup task/tutorialinfo " ]
  attribute class { text }?
info.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/itemgroup task/info " ]
  attribute class { text }?
stepxmp.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/itemgroup task/stepxmp " ]
  attribute class { text }?
stepresult.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/itemgroup task/stepresult " ]
  attribute class { text }?
choices.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/ul task/choices " ]
  attribute class { text }?
choice.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/li task/choice " ]
  attribute class { text }?
result.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section task/result " ]
  attribute class { text }?
prereq.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section task/prereq " ]
  attribute class { text }?
postreq.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section task/postreq " ]
  attribute class { text }?
context.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section task/context " ]
  attribute class { text }?
steps-informal.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/section task/steps-informal " ]
  attribute class { text }?
choicetable.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/simpletable task/choicetable " ]
  attribute class { text }?
chhead.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/sthead task/chhead " ]
  attribute class { text }?
chrow.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/strow task/chrow " ]
  attribute class { text }?
choptionhd.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry task/choptionhd " ]
  attribute class { text }?
chdeschd.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry task/chdeschd " ]
  attribute class { text }?
choption.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry task/choption " ]
  attribute class { text }?
chdesc.attlist &=
  global-atts,
  [ a:defaultValue = "- topic/stentry task/chdesc " ]
  attribute class { text }?
