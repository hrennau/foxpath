/*
 * ==================================================
 * ==================================================
 * 
 * Task elements.
 * 
 * http://docs.oasis-open.org/dita/v1.2/os/spec/common/task2.html#task2
 * 
 * Task topics answer "How do I?" questions, and have a well-defined 
 * structure that describes how to complete a procedure to accomplish 
 * a specific goal. Use the task topic to describe the steps of a 
 * particular task, or to provide an overview of a higher-level task. 
 * 
 * ==================================================
 * ==================================================
 * 
 * TODO - dan - i18n.
 */

/* ====================================
 *
 * <task>
 * 
 * The <task> element is the top-level element for a task topic. Tasks 
 * are the main building blocks for task-oriented user assistance.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/topic
 */
*[class~="task/task"] {
  /**/
}
/* ====================================
 *
 * <taskbody>
 * 
 * The <taskbody> element is the main body-level element inside a task 
 * topic. A task body is designed to contain information specific to 
 * completing a task, such as prerequisites, contextual information, 
 * and steps. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/body
 */
*[class~="task/taskbody"] {
  /**/
}
/* ====================================
 *
 * <taskbody>
 * 
 * The <taskbody> element is the main body-level element inside a task 
 * topic. A task body is designed to contain information specific to 
 * completing a task, such as prerequisites, contextual information, 
 * and steps. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/body
 */
*[class~="task/taskbody"] {
  /**/
}
/* ====================================
 *
 * <prereq>
 * 
 * The <prereq> element of a task contains prerequisites that the user 
 * needs to know or do before starting the current task.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/section
 */
*[class~="task/prereq"] {
  -oxy-foldable: false;
}
*[class~="task/prereq"]:before {
  content: "Before you begin: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
@media print {
  *[class~="task/prereq"]:before {
    content: none;
  }
}
/* ====================================
 *
 * <postreq>
 * 
 * The <postreq> element describes steps or tasks 
 * that the user should do after the successful 
 * completion of the current task.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/section
 */
*[class~="task/postreq"] {
  -oxy-foldable: false;
}
*[class~="task/postreq"]:before {
  content: "What to do next: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
@media print {
  *[class~="task/postreq"]:before {
    content: none;
  }
}
/* ====================================
 *
 * <context>
 * 
 * The <context> element provides background 
 * information for a task. This information helps 
 * the user understand what the purpose of the task 
 * is and what they will gain by completing the task. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/section
 */
*[class~="task/context"] {
  -oxy-foldable: false;
}
*[class~="task/context"]:before {
  content: "About this task: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
@media print {
  *[class~="task/context"]:before {
    content: none;
  }
}
/* ====================================
 *
 * <result>
 * 
 * The <result> element describes the 
 * expected outcome for the task as a whole.  
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/result
 */
*[class~="task/result"] {
  -oxy-foldable: false;
}
*[class~="task/result"]:before {
  content: "Results: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
@media print {
  *[class~="task/result"]:before {
    content: none;
  }
}
/* ====================================
 *
 * <steps>
 * 
 * The <steps> element provides the main 
 * content of a task topic. The task is 
 * described as a series of steps that the 
 * user must follow to accomplish the task. 
 * At least one <step> element is required 
 * inside the <steps> element.  
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/ol
 */
*[class~="task/steps"] {
  /**/
}
/* ====================================
 *
 * <steps-informal>
 * 
 * The <steps-informal> element allows authors 
 * to describe procedural task information without 
 * placing each step in an individual container 
 * element, which is a requirement of the related 
 * <steps> and <steps-unordered> elements. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/section
 */
*[class~="task/steps-informal"] {
  -oxy-foldable: false;
}
/* ====================================
 *
 * <steps-unordered>
 * 
 * Like the <steps> element, the <steps-unordered> 
 * element provides the main content of a task topic, 
 * but particularly for cases in which the order 
 * of steps may vary from one situation to another. 
 * At least one <step> element is required inside 
 * the <steps-unordered> element.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/ul
 */
*[class~="task/steps-unordered"] {
  -oxy-foldable: false;
}
/* ====================================
 *
 * <stepsection>
 * 
 * The <stepsection> element provides expository text 
 * before a step element. Although the element is 
 * specialized from <li> and has the same content model 
 * as a list item, it is not intended to represent a 
 * step in a task.
 *  
 * EXM-23945 Remove bullets or item numbering from stepsections 
 * defined in steps or unordered steps
 * 
 * Inherits styles from parent class:
 *  
 *     + topic/ul
 */
*[class~="task/stepsection"] {
  display:block !important;
  margin-left: 0em !important;
  list-style: none !important;
  counter-reset: none !important;
  counter-increment: none !important;
}
*[class~="task/stepsection"]:before {
  content: none !important;
}
/* ====================================
 *
 * <step>
 * 
 * The <step> element represents an action that a user must 
 * follow to accomplish a task. Each step in a task must contain 
 * a command <cmd> element which describes the particular action 
 * the user must do to accomplish the overall task.
 *  
 * Inherits styles from parent class:
 * 
 *     + topic/li
 */
*[class~="task/steps"] *[class~="task/step"]:before {
  /* 
    This selector gives before content to the steps 
    that are NOT conrefed.
    
    For the conrefed see conref.css.
    */
}
/* ====================================
 *
 * <cmd>
 * 
 * The <cmd> element specifies a command, which 
 * is a required element inside the <step> element. 
 * It provides the active voice instruction to the 
 * user for completing the step, and should not 
 * be more than one sentence. 
 * If the step needs additional explanation, place 
 * the explanation in an <info> element following 
 * the <cmd>.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/ph
 */
*[class~="task/cmd"] {
  /**/
}

/* ====================================
 *
 * <steptroubleshooting>
 * 
 * The <steptroubleshooting> element provides information 
 * that is designed to help remedy the situation when a 
 * step does not complete as expected. In particular, this 
 * element can be used to explain how users can recover when 
 * the results of a step do not match those listed in 
 * the <stepresult> element.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/itemgroup
 */
/* ====================================
 *
 * <tasktroubleshooting>
 * 
 * The <tasktroubleshooting> element provides information 
 * designed to help users remedy the situation when a task 
 * does not complete as expected. In particular, this element 
 * can be used to explain how users can recover when the 
 * results of a task do not match those listed in the 
 * <result> element. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/section 
 */
*[class~="task/tasktroubleshooting"],
*[class~="task/steptroubleshooting"]{
  margin: 0.5em 0 0.5em 2em;
  /*See -colors.css */
  border-left: 2pt solid;  
  padding: 1em;  
  -oxy-foldable: false;
}
*[class~="task/tasktroubleshooting"]:before,
*[class~="task/steptroubleshooting"]:before{
  content: "Troubleshooting: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}


/* ====================================
 *
 * <info>
 * 
 * The <info> element occurs inside a <step> element 
 * to provide additional information about the step.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/itemgroup
 */
*[class~="task/info"] {
  /* -task_step_child- >>> */
  margin: 0.5em 0.5em 0.5em 1em;
  /* <<< */
}
*[class~="task/info"]:before {
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
/* ====================================
 *
 * <substeps>
 * 
 * The <substeps> element allows you to break a step 
 * down into a series of separate actions, and should 
 * be used only if necessary. Try to describe the steps 
 * of a task in a single level of steps. If you need to 
 * use more than one level of substep nesting, you 
 * should probably rewrite the task to simplify it.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/ol
 */
*[class~="task/substeps"] {
  /* -task_step_child- >>> */
    margin: 0.5em 0.5em 0.5em 1em;
  /* <<< */
}
/* ====================================
 *
 * <substep>
 * 
 * A <substep> element has the same structure as a 
 * <step>, except that it does not allow lists of 
 * choices or substeps within it, in order to prevent 
 * unlimited nesting of steps.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/li
 */
*[class~="task/substep"] {
  /**/
}
/* ====================================
 *
 * <choicetable>
 * 
 * The <choicetable> element contains a series 
 * of optional choices available within a step 
 * of a task.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/simpletable 
 */
*[class~="task/choicetable"] {
  /* -task_step_child- >>> */
  margin: 0.5em 0.5em 0.5em 4em;
  /* <<< */
}
/* ====================================
 *
 * <chhead>
 * 
 * The <chhead> element is a container inside 
 * the <choicetable> element that provides 
 * specific heading text to override the default 
 * Options and Description headings. The <chhead> 
 * element contains both a <choptionhd> and 
 * <chdeschd> element as a pair.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/sthead  
 */
*[class~="task/chhead"] {
  /**/
}
/* ====================================
 *
 * <choptionhd>
 * 
 * The <choptionhd> element provides a 
 * specific label for the list of options 
 * from which a user chooses in order to 
 * accomplish a step.
 * 
 * The default label for options is a 
 * localized translation of Option.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/stentry   
 */
*[class~="task/choptionhd"] {
  /**/
}
/* ====================================
 *
 * <chdeschd>
 * 
 * The <chdeschd> element provides a specific 
 * label for the list of descriptions of options 
 * from which a user must choose in order 
 * to accomplish a step.
 *  
 * The default label overridden by <chdeschd> is a 
 * localized translation of Description.
 * 
 * The default label for options is a 
 * localized translation of Option.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/stentry   
 */
*[class~="task/chdeschd"] {
  /**/
}
/* ====================================
 *
 * <chrow>
 * 
 * The <chrow> element is a container inside the 
 * <choicetable> element. The <chrow> element 
 * contains both a <choption> and <chdesc> 
 * element as a pair.
 *  
 * The default label overridden by <chdeschd> is a 
 * localized translation of Description.
 * 
 * The default label for options is a 
 * localized translation of Option.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/strow 
 */
*[class~="task/chrow"] {
  /**/
}
/* ====================================
 *
 * <choption>
 * 
 * The <choption> element describes an option 
 * that a user could choose to accomplish a step 
 * of a task. In a user interface, for example, 
 * this might be the name of radio button.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/stentry 
 */
*[class~="task/choption"] {
  /**/
}
/* ====================================
 *
 * <chdesk>
 * 
 * The <chdesc> element is a description of an 
 * option that a user chooses while performing 
 * a step to accomplish a task. It explains 
 * why the user would choose that option and 
 * might explain the result of the choice when 
 * it is not immediately obvious.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/stentry 
 */
*[class~="task/chdesk"] {
  /**/
}
/* ====================================
 *
 * <choices>
 * 
 * The <choices> element contains a list of 
 * <choice> elements. It is used when the user 
 * will need to choose one of several actions 
 * while performing the steps of a task. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/ul 
 */
*[class~="task/choices"] {
  /* -task_step_child- >>> */
  margin: 0.5em 0.5em 0.5em 4em;
  /* <<< */
}
*[class~="task/choices"]:before {
  content: "Choose from: ";
  display: block;
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
/* ====================================
 *
 * <choice>
 * 
 * Each <choice> element describes one way that 
 * the user could accomplish the current step.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/li 
 */
*[class~="task/choices"] > *[class~="task/choice"] {
  list-style-type: disc;
}
/* ====================================
 *
 * <stepxmp>
 * 
 * The <stepxmp> element is used to illustrate a 
 * step of a task. The step example can be a couple 
 * of words, or an entire paragraph.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/itemgroup 
 */
*[class~="task/stepxmp"] {
  /* -task_step_child- >>> */
  margin: 0.5em 0.5em 0.5em 4em;
  /* <<< */
}
*[class~="task/stepxmp"]:before {
  content: "Example: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
/* ====================================
 *
 * <stepresult>
 * 
 * The <stepresult> element provides information on 
 * the expected outcome of a step. If a user interface 
 * is being documented, the outcome could describe a 
 * dialog box opening or the appearance of a progress 
 * indicator. 
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/itemgroup 
 */
*[class~="task/stepresult"] {
  /* -task_step_child- >>> */
  margin: 0.5em 0.5em 0.5em 1em;
  /* <<< */
}
*[class~="task/stepresult"]:before {
  content: "Result: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
/* ====================================
 *
 * <tutorialinfo>
 * 
 * The <tutorialinfo> element contains additional 
 * information that is useful when the task is part 
 * of a tutorial.
 *  
 * Inherits styles from parent class:
 *  
 *     + topic/itemgroup 
 */
*[class~="task/tutorialinfo"] {
  /* -task_step_child- >>> */
  margin: 0.5em 0.5em 0.5em 4em;
  /* <<< */
}
*[class~="task/tutorialinfo"]:before {
  content: "Tutorial Info: ";
  /* -task_before- >>> */
  font-weight: bold;
  /* <<< */
}
