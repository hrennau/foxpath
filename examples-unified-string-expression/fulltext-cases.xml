<?xml version="1.0" encoding="UTF-8"?>
<fulltext-cases>
    <case topic="phrase">
        <expr>markup language #fulltext</expr>
        <description>A string containing the phrase "markup language", any case, anywhere.</description>        
        <examples>
            <example>
                <text>XML is a versatile markup language.</text>
                <expect>+</expect>                
            </example>
            <example>
                <text>There are several markup languages.</text>
                <expect>-</expect>
                <reason>language is a different word than languages</reason>                
            </example>
        </examples>
    </case>
    <case topic="all words">
        <expr>language markup versatile #fulltext W</expr>
        <description>A string containing all words from a list of words.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language.</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a popular markup language.</text>
                <expect>-</expect>                
                <reason>Missing word: versatile</reason>
            </example>
        </examples>
    </case>
    <case topic="some word">
        <expr>language markup versatile #fulltext w</expr>
        <description>A string containing at least one word from a list of words.</description>
        <examples>
            <example>
                <text>XML is a popular markup language.</text>
                <expect>+</expect>
            </example>
        </examples>
    </case>
    <case topic="character wildcard">
        <expr>pop.* .* lang.* #fulltext</expr>
        <description>A phrase using character wildcards.</description>
        <examples>
            <example>
                <text>XML and JSON are popular markup languages.</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML and JSON are popular .* languages.</text>
                <expect>-</expect>
                <reason>A word consisting of a character wildcard (.*) must match a word in the string</reason>
            </example>
        </examples>
    </case>
    <case topic="start anchor">
        <expr>^Markup languages #fulltext</expr>
        <description>A string starting with the phrase "Markup languages".</description>
        <examples>
            <example>
                <text>Markup languages are considered.</text>
                <expect>+</expect>
            </example>
            <example>
                <text>These markup languages are considered.</text>
                <expect>-</expect>
                <reason>The phrase is found, but not at the begin of the string.</reason>
            </example>
        </examples>
    </case>
    <case topic="end anchor">
        <expr>popular markup language$ #fulltext</expr>
        <description>A string ending with the phrase "Markup languages".</description>
        <examples>
            <example>
                <text>XML is a popular markup language.</text>
                <expect>+</expect>
            </example>
            <example>
                <text>a popular markup language, which is XML</text>
                <expect>-</expect>
                <reason>The phrase is found, but not at the end of the string.</reason>
            </example>
        </examples>
    </case>
    <case topic="case sensitive">
        <expr>XML versatile markup language #fulltext c</expr>
        <description>A phrase, case sensitive matching.</description>
        <examples>
            <example>
                <text>XML versatile markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>xml versatile markup language</text>
                <expect>-</expect>
                <reason>The phrase is found, but incorrect case detected.</reason>
            </example>
        </examples>
    </case>
    <case topic="diacritics sensitive">
        <expr>Übung macht den Meister #fulltext d</expr>
        <description>A phrase, diacritics sensitive.</description>
        <examples>
            <example>
                <text>Übung macht den Meister</text>
                <expect>+</expect>
            </example>
            <example>
                <text>Ubung macht den Meister</text>
                <expect>-</expect>
                <reason>The phrase is found, but incorrect diacritics detected.</reason>
            </example>
        </examples>
    </case>
    <case topic="fuzzy 1">
        <expr>XML versatile markup language #fulltext Wf</expr>
        <description>A string containing all words from a list of four words;
            fuzzy matching, fuzziness level 1</description>
        <examples>
            <example>
                <text>XML is a varsatile markup lenguage</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a varsatil markup lenguage</text>
                <expect>-</expect>
                <reason>Fuzziness level 1 does not suffice to accept "varsatil" for "versatile".</reason>
            </example>
        </examples>
    </case>
    <case topic="fuzzy 2">
        <expr>XML versatile markup language #fulltext W f-2</expr>
        <description>A string containing all words from a list of four words;
            fuzzy matching, fuzziness level 2</description>
        <examples>
            <example>
                <text>XML is a varsatil markup lenguage</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a varssatil markup lenguage</text>
                <expect>-</expect>
                <reason>Fuzziness level 2 does not suffice to accept "varssatil" for "versatile".</reason>
            </example>
        </examples>
    </case>
    <case topic="stemming en">
        <expr>markup language #fulltext s-en</expr>
        <description>A string containing the phrase "markup language", any case, anywhere;
            when matching words, English stemming is applied</description>        
        <examples>
            <example>
                <text>Considering various markup languages</text>
                <expect>+</expect>                
            </example>
            <example>
                <text>Considering various markup languagex</text>
                <expect>-</expect>
                <reason>stemming of language does not yield languagex</reason>                
            </example>
        </examples>
    </case>
    <case topic="stemming de">
        <expr>Markup Sprache #fulltext s-de</expr>
        <description>A string containing the phrase "Markup Sprache", any case, anywhere;
            when matching words, German stemming is applied</description>        
        <examples>
            <example>
                <text>Einige Markup Sprachen</text>
                <expect>+</expect>                
            </example>
            <example>
                <text>Einige Markup Sprachex</text>
                <expect>-</expect>
                <reason>stemming of Sprache does not yield Sprachex</reason>                
            </example>
        </examples>
    </case>
    <case topic="phrase-1">
        <expr>XML popular language #fulltext phrase-1</expr>
        <description>A string containing the open phrase "XML popular language", allowing for
            at most one additional word between two adjacent words of the phrase.</description>
        <examples>
            <example>
                <text>XML, the popular markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, the still popular markup language</text>
                <expect>-</expect>
                <reason>Text contains two additional words ("the still") between two adjacent words of the phrase.</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase-2">
        <expr>XML popular language #fulltext phrase-2</expr>
        <description>A string containing the open phrase "XML popular language", allowing for
            at most two additional words between two adjacent words of the phrase.</description>
        <examples>
            <example>
                <text>XML, the still popular markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, the still very popular markup language</text>
                <expect>-</expect>
                <reason>Text contains three additional words ("the still very") between two adjacent words of the phrase.</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase-5win">
        <expr>XML popular language #fulltext phrase-5win</expr>
        <description>A string containing the open phrase "XML popular language", allowing for
            additional words inserted, but keeping within a total length of 5 words.</description>
        <examples>
            <example>
                <text>XML, the popular markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, the still popular markup language</text>
                <expect>-</expect>
                <reason>The length of the open phrase is 6.</reason>
            </example>
        </examples>
    </case>
    <case topic="token wildcard">
        <expr>XML x popular markup language #fulltext wild-x</expr>
        <description>A string containing the phrase "XML x popular markup language", where
            w represents an arbitrary token.</description>
        <examples>
            <example>
                <text>XML, the popular markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, popular markup language</text>
                <expect>-</expect>
                <reason>The wild token represents exactly one token, which must appear between "XML" and "popular".</reason>
            </example>
        </examples>
    </case>
    <case topic="stopwords">
        <expr>XML x y markup language #fulltext stop(x, y)</expr>
        <description>A string containing the phrase "XML x y markup language", where
            x and y represent arbitrary tokens.</description>
        <examples>
            <example>
                <text>XML my favourite markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, a popular markup language</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, a markup language</text>
                <expect>-</expect>
                <reason>The second stop word could not be matched.</reason>
            </example>
        </examples>
    </case>
    <case topic="ordered">
        <expr>JSON XML languages #fulltext Wo</expr>
        <description>A string containing the words "JSON", "XML" and "language" in that order.</description>
        <examples>
            <example>
                <text>JSON, XML and other languages</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML, JSON and other languages</text>
                <expect>-</expect>
                <reason>The words do not appear in the expected order.</reason>
            </example>
        </examples>
    </case>
    <case topic="window">
        <expr>JSON lightweight format widely used #fulltext W win-11</expr>
        <description>A string containing all words from a list of five words,
            within a window of 11 words.</description>
        <examples>
            <example>
                <text>JSON is a lightweight data-interchange format that is widely used</text>
                <expect>+</expect>
            </example>
            <example>
                <text>JSON is a lightweight data-interchange format that is still widely used</text>
                <expect>-</expect>
                <reason>The matches are within a window of 12 words, which is greater 11.</reason>
            </example>
        </examples>
    </case>
    <case topic="distance max">
        <expr>JSON format lightweight #fulltext W dist-..2</expr>
        <description>A string containing three given words, with at most two 
            other words between adjacent matches.</description>
        <examples>
            <example>
                <text>JSON is a lightweight data-interchange format</text>
                <expect>+</expect>
            </example>
            <example>
                <text>JSON is considered a lightweight data-interchange format</text>
                <expect>-</expect>
                <reason>Three words between two matches ('is considered a'), but at most two allowed</reason>
            </example>
        </examples>
    </case>
    <case topic="distance min">
        <expr>JSON data format #fulltext W dist-1..</expr>
        <description>A string containing two words, with at least two other
            words between them.</description>
        <examples>
            <example>
                <text>JSON is a lightweight data-interchange format</text>
                <expect>+</expect>
            </example>
            <example>
                <text>JSON is a lightweight data format</text>
                <expect>-</expect>
                <reason>Two matches adjacent, but at least one word between them required</reason>
            </example>
        </examples>
    </case>
    <case topic="distance exact">
        <expr>more data format #fulltext W dist-1</expr>
        <description>A string containing three words, separated by exactly one other word</description>
        <examples>
            <example>
                <text>more accessible data-exchange format</text>
                <expect>+</expect>
            </example>
            <example>
                <text>more accessible data format</text>
                <expect>-</expect>
                <reason>Two adjacent matches, but one word between them required</reason>
            </example>
        </examples>
    </case>
    <case topic="occurs max">
        <expr>JSON #fulltext occ-..1</expr>
        <description>A string containing a word at most once</description>
        <examples>
            <example>
                <text>JSON is a versatile data format.</text>
                <expect>+</expect>
            </example>
            <example>
                <text>JSON is a versatile data format. JSON is considered ...</text>
                <expect>-</expect>
                <reason>JSON occurs twice, only one occurrence allowed</reason>
            </example>
        </examples>
    </case>
    <case topic="occurs min">
        <expr>JSON #fulltext occ-2..</expr>
        <description>A string containing a word at least twice</description>
        <examples>
            <example>
                <text>JSON is a versatile data format. JSON is considered ...</text>
                <expect>+</expect>
            </example>
            <example>
                <text>JSON is a versatile data format.</text>
                <expect>-</expect>
                <reason>JSON occurs only once, two occurrences required.</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase and phrase">
        <expr>versatile markup language / diverse data sources #fulltext</expr>
        <description>A string containing two phrases.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of diverse data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>-</expect>
                <reason>One of the phrases not found.</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase or phrase">
        <expr>versatile markup language | diverse data sources #fulltext</expr>
        <description>A string containing at least one of two phrases.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of diverse data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of many data sources</text>
                <expect>-</expect>
                <reason>One of the phrases not found.</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase and phrase with wildcards">
        <expr>versatile markup lang.* / div.* data sources #fulltext</expr>
        <description>A string containing two phrases.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of diverse data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>-</expect>
                <reason>One of the phrases not found.</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase and phrase with anchors">
        <expr>^versatile markup language / diverse data sources$ #fulltext</expr>
        <description>A string containing two phrases.</description>
        <examples>
            <example>
                <text>versatile markup language, capable of labeling the information content of diverse data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of diverse data sources</text>
                <expect>-</expect>
                <reason>One of the phrases not found.</reason>
            </example>
        </examples>
    </case>
    <case topic="all words and any word">
        <expr>markup language versatile @W / sources targets @w #fulltext</expr>
        <description>A string containing all words from a list and any word from another list.</description>
        <examples>
            <example>
                <text>versatile markup language, capable of labeling the information content of diverse data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of diverse data bases</text>
                <expect>-</expect>
                <reason>Did not find a word from "sources" and "targets".</reason>
            </example>
            <example>
                <text>XML is a versatile language, capable of labeling the information content of diverse data sources</text>
                <expect>-</expect>
                <reason>Did not find all words from "markup", "language" and "versatile".</reason>
            </example>
        </examples>
    </case>
    <!--
    <case topic="all words or all words">
        <expr>markup language versatile | data sources diverse #fulltext W</expr>
        <description>A string containing at least one of two phrases.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of diverse data sources</text>
                <expect>-</expect>
                <reason>A word from the first list ('versatile') is missing.</reason>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of many data sources</text>
                <expect>-</expect>
                <reason>A word from the second list ('diverse') is missing.</reason>
            </example>
        </examples>
    </case>
    -->
    <case topic="all words or all words">
        <expr>markup language versatile @W | data sources diverse @W #fulltext</expr>
        <description>A string containing all words from a list, or all words from
            a different list.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of diverse data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of many data sources</text>
                <expect>-</expect>
                <reason>A word from the first list ("versatile") and a word from the second list ("diverse") is missing.</reason>
            </example>
        </examples>
    </case>
    <case topic="not">
        <expr>~ content of hidden data sources #fulltext</expr>
        <description>A string not containing a phrase.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text must not contain the phrase "content of hidden data sources".</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase and not phrase">
        <expr>versatile markup language ~ hidden data sources #fulltext</expr>
        <description>A string containing one phrase, not containing another phrase.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text contains the required phrase, but it must not contain the phrase "hidden data sources".</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase and not all words">
        <expr>versatile markup language ~ data sources hidden content@W #fulltext</expr>
        <description>A string containing a phrase, not containing all words from a list.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text contains the required phrase, but it must not contain all words 
                    from this list: "data", "sources", "hidden", "content".</reason>
            </example>
        </examples>
    </case>
    <case topic="phrase and not any word">
        <expr>versatile markup language ~ hidden concealed camouflaged@w #fulltext</expr>
        <description>A string containing a phrase, not containing any word from a list.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text contains the required phrase, but it must not contain any word from this list: "hidden" "concealed" "camouflage".</reason>
            </example>
        </examples>
    </case>
    <case topic="all words and not phrase">
        <expr>XML versatile capable@W ~ hidden data sources #fulltext</expr>
        <description>A string containing all words from a list, not containing any word from another list.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text contains all required words, but it must not contain the phrase "hidden data sources".</reason>
            </example>
        </examples>
    </case>
    <case topic="all words and not any word">
        <expr>XML versatile capable@W ~ hidden concealed camouflaged@w #fulltext</expr>
        <description>A string containing all words from a list, not containing any word from another list.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text contains all required words, but it must not contain any word from this list: 
                    "hidden", "concealed", "camouflaged".</reason>
            </example>
        </examples>
    </case>
    <case topic="any word and not any word">
        <expr>JSON XML@w ~ hidden concealed camouflaged@w #fulltext</expr>
        <description>A string containing all words from a list, not containing any word from another list.</description>
        <examples>
            <example>
                <text>XML is a versatile markup language, capable of labeling the information content of many data sources</text>
                <expect>+</expect>
            </example>
            <example>
                <text>XML is a flexible markup language, capable of labeling the information content of hidden data sources</text>
                <expect>-</expect>
                <reason>Text contains a word from the required list, but it must not contain any word from this list: 
                    "hidden", "concealed", "camouflaged".</reason>
            </example>
        </examples>
    </case>
</fulltext-cases>
