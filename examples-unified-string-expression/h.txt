Demo:  phrase
------------------------------------------------

***    markup language #fulltext

 =>    'markup language'

<words text="markup language ">markup language</words>

Desc:  A string containing the phrase "markup language", any case, anywhere.
Examples:
       Text: XML is a versatile markup language.
       Rslt: +

       Text: There are several markup languages.
       Rslt: -
       Why:  language is a different word than languages


Demo:  all words
------------------------------------------------

***    language markup versatile #fulltext words

 =>    'language markup versatile' all words

<words text="language markup versatile " mode="all words">language markup versatile</words>

Desc:  A string containing all words from a list of words.
Examples:
       Text: XML is a versatile markup language.
       Rslt: +

       Text: XML is a popular markup language.
       Rslt: -
       Why:  Missing word: versatile


Demo:  some word
------------------------------------------------

***    language markup versatile #fulltext anyword

 =>    'language markup versatile' any word

<words text="language markup versatile " mode="any word">language markup versatile</words>

Desc:  A string containing at least one word from a list of words.
Examples:
       Text: XML is a popular markup language.
       Rslt: +


Demo:  character wildcard
------------------------------------------------

***    pop.* .* lang.* #fulltext

 =>    'pop.* .* lang.*' using wildcards

<words text="pop.* .* lang.* " wildcards="using wildcards">pop.* .* lang.*</words>

Desc:  A phrase using character wildcards.
Examples:
       Text: XML and JSON are popular markup languages.
       Rslt: +

       Text: XML and JSON are popular .* languages.
       Rslt: -
       Why:  A word consisting of a character wildcard (.*) must match a word in the string


Demo:  start anchor
------------------------------------------------

***    ^Markup languages #fulltext

 =>    'Markup languages' at start

<words text="^Markup languages " atStart="at start">Markup languages</words>

Desc:  A string starting with the phrase "Markup languages".
Examples:
       Text: Markup languages are considered.
       Rslt: +

       Text: These markup languages are considered.
       Rslt: -
       Why:  The phrase is found, but not at the begin of the string.


Demo:  end anchor
------------------------------------------------

***    popular markup language$ #fulltext

 =>    'popular markup language' at end

<words text="popular markup language$ " atEnd="at end">popular markup language</words>

Desc:  A string ending with the phrase "Markup languages".
Examples:
       Text: XML is a popular markup language.
       Rslt: +

       Text: a popular markup language, which is XML
       Rslt: -
       Why:  The phrase is found, but not at the end of the string.


Demo:  case sensitive
------------------------------------------------

***    XML versatile markup language #fulltext c

 =>    'XML versatile markup language' using case sensitive

<words text="XML versatile markup language " case="using case sensitive">XML versatile markup language</words>

Desc:  A phrase, case sensitive matching.
Examples:
       Text: XML versatile markup language
       Rslt: +

       Text: xml versatile markup language
       Rslt: -
       Why:  The phrase is found, but incorrect case detected.


Demo:  diacritics sensitive
------------------------------------------------

***    Übung macht den Meister #fulltext d

 =>    'Übung macht den Meister' using diacritics sensitive

<words text="Übung macht den Meister " diacritics="using diacritics sensitive">Übung macht den Meister</words>

Desc:  A phrase, diacritics sensitive.
Examples:
       Text: Übung macht den Meister
       Rslt: +

       Text: Ubung macht den Meister
       Rslt: -
       Why:  The phrase is found, but incorrect diacritics detected.


Demo:  fuzzy 1
------------------------------------------------

***    XML versatile markup language #fulltext words f

 =>    'XML versatile markup language' all words using fuzzy 1 errors

<words text="XML versatile markup language " mode="all words" fuzzy="using fuzzy 1 errors">XML versatile markup language</words>

Desc:  A string containing all words from a list of four words; fuzzy matching, fuzziness level 1
Examples:
       Text: XML is a varsatile markup lenguage
       Rslt: +

       Text: XML is a varsatil markup lenguage
       Rslt: -
       Why:  Fuzziness level 1 does not suffice to accept "varsatil" for "versatile".


Demo:  fuzzy 2
------------------------------------------------

***    XML versatile markup language #fulltext words f-2

 =>    'XML versatile markup language' all words using fuzzy 2 errors

<words text="XML versatile markup language " mode="all words" fuzzy="using fuzzy 2 errors">XML versatile markup language</words>

Desc:  A string containing all words from a list of four words; fuzzy matching, fuzziness level 2
Examples:
       Text: XML is a varsatil markup lenguage
       Rslt: +

       Text: XML is a varssatil markup lenguage
       Rslt: -
       Why:  Fuzziness level 2 does not suffice to accept "varssatil" for "versatile".


Demo:  stemming en
------------------------------------------------

***    markup language #fulltext s-en

 =>    'markup language' using stemming using language "en"

<words text="markup language " stemming-and-language="using stemming using language &quot;en&quot;">markup language</words>

Desc:  A string containing the phrase "markup language", any case, anywhere; when matching words, English stemming is applied
Examples:
       Text: Considering various markup languages
       Rslt: +

       Text: Considering various markup languagex
       Rslt: -
       Why:  stemming of language does not yield languagex


Demo:  stemming de
------------------------------------------------

***    Markup Sprache #fulltext s-de

 =>    'Markup Sprache' using stemming using language "de"

<words text="Markup Sprache " stemming-and-language="using stemming using language &quot;de&quot;">Markup Sprache</words>

Desc:  A string containing the phrase "Markup Sprache", any case, anywhere; when matching words, German stemming is applied
Examples:
       Text: Einige Markup Sprachen
       Rslt: +

       Text: Einige Markup Sprachex
       Rslt: -
       Why:  stemming of Sprache does not yield Sprachex


Demo:  phrase-1
------------------------------------------------

***    XML popular language #fulltext phrase-1

 =>    'XML popular language' all words ordered distance at most 1 words

<words text="XML popular language " mode="all words" ordered="ordered" distance="distance at most 1 words">XML popular language</words>

Desc:  A string containing the open phrase "XML popular language", allowing for at most one additional word between two adjacent words of the phrase.
Examples:
       Text: XML, the popular markup language
       Rslt: +

       Text: XML, the still popular markup language
       Rslt: -
       Why:  Text contains two additional words ("the still") between two adjacent words of the phrase.


Demo:  phrase-2
------------------------------------------------

***    XML popular language #fulltext phrase-2

 =>    'XML popular language' all words ordered distance at most 2 words

<words text="XML popular language " mode="all words" ordered="ordered" distance="distance at most 2 words">XML popular language</words>

Desc:  A string containing the open phrase "XML popular language", allowing for at most two additional words between two adjacent words of the phrase.
Examples:
       Text: XML, the still popular markup language
       Rslt: +

       Text: XML, the still very popular markup language
       Rslt: -
       Why:  Text contains three additional words ("the still very") between two adjacent words of the phrase.


Demo:  phrase-5win
------------------------------------------------

***    XML popular language #fulltext phrase-5win

 =>    'XML popular language' all words ordered window 5 words

<words text="XML popular language " mode="all words" ordered="ordered" window="window 5 words">XML popular language</words>

Desc:  A string containing the open phrase "XML popular language", allowing for additional words inserted, but keeping within a total length of 5 words.
Examples:
       Text: XML, the popular markup language
       Rslt: +

       Text: XML, the still popular markup language
       Rslt: -
       Why:  The length of the open phrase is 6.


Demo:  token wildcard
------------------------------------------------

***    XML x popular markup language #fulltext wild-x

 =>    'XML x popular markup language' using stop words ("x")

<words text="XML x popular markup language " stop="using stop words (&quot;x&quot;)">XML x popular markup language</words>

Desc:  A string containing the phrase "XML x popular markup language", where x represents an arbitrary token.
Examples:
       Text: XML, the popular markup language
       Rslt: +

       Text: XML, popular markup language
       Rslt: -
       Why:  The wild token represents exactly one token, which must appear between "XML" and "popular".


Demo:  stopwords
------------------------------------------------

***    XML x y markup language #fulltext stop(x, y)

 =>    'XML x y markup language' using stop words ('x', 'y')

<words text="XML x y markup language " stop="using stop words ('x', 'y')">XML x y markup language</words>

Desc:  A string containing the phrase "XML x y markup language", where x and y represent arbitrary tokens.
Examples:
       Text: XML my favourite markup language
       Rslt: +

       Text: XML, a popular markup language
       Rslt: +

       Text: XML, a markup language
       Rslt: -
       Why:  The second stop word could not be matched.


Demo:  ordered
------------------------------------------------

***    JSON XML languages #fulltext words o

 =>    'JSON XML languages' all words ordered

<words text="JSON XML languages " mode="all words" ordered="ordered">JSON XML languages</words>

Desc:  A string containing the words "JSON", "XML" and "language" in that order.
Examples:
       Text: JSON, XML and other languages
       Rslt: +

       Text: XML, JSON and other languages
       Rslt: -
       Why:  The words do not appear in the expected order.


Demo:  window
------------------------------------------------

***    JSON lightweight format widely used #fulltext words win-11

 =>    'JSON lightweight format widely used' all words window 11 words

<words text="JSON lightweight format widely used " mode="all words" window="window 11 words">JSON lightweight format widely used</words>

Desc:  A string containing all words from a list of five words, within a window of 11 words.
Examples:
       Text: JSON is a lightweight data-interchange format that is widely used
       Rslt: +

       Text: JSON is a lightweight data-interchange format that is still widely used
       Rslt: -
       Why:  The matches are within a window of 12 words, which is greater 11.


Demo:  distance max
------------------------------------------------

***    JSON format lightweight #fulltext words dist-..2

 =>    'JSON format lightweight' all words distance at most 2 words

<words text="JSON format lightweight " mode="all words" distance="distance at most 2 words">JSON format lightweight</words>

Desc:  A string containing three given words, with at most two other words between adjacent matches.
Examples:
       Text: JSON is a lightweight data-interchange format
       Rslt: +

       Text: JSON is considered a lightweight data-interchange format
       Rslt: -
       Why:  Three words between two matches ('is considered a'), but at most two allowed


Demo:  distance min
------------------------------------------------

***    JSON data format #fulltext words dist-1..

 =>    'JSON data format' all words distance at least 1 words

<words text="JSON data format " mode="all words" distance="distance at least 1 words">JSON data format</words>

Desc:  A string containing two words, with at least two other words between them.
Examples:
       Text: JSON is a lightweight data-interchange format
       Rslt: +

       Text: JSON is a lightweight data format
       Rslt: -
       Why:  Two matches adjacent, but at least one word between them required


Demo:  distance exact
------------------------------------------------

***    more data format #fulltext words dist-1

 =>    'more data format' all words distance exactly 1 words

<words text="more data format " mode="all words" distance="distance exactly 1 words">more data format</words>

Desc:  A string containing three words, separated by exactly one other word
Examples:
       Text: more accessible data-exchange format
       Rslt: +

       Text: more accessible data format
       Rslt: -
       Why:  Two adjacent matches, but one word between them required


Demo:  occurs max
------------------------------------------------

***    JSON #fulltext occ-..1

 =>    'JSON' occurs at most 1 times

<words text="JSON " occurs="occurs at most 1 times">JSON</words>

Desc:  A string containing a word at most once
Examples:
       Text: JSON is a versatile data format.
       Rslt: +

       Text: JSON is a versatile data format. JSON is considered ...
       Rslt: -
       Why:  JSON occurs twice, only one occurrence allowed


Demo:  occurs min
------------------------------------------------

***    JSON #fulltext occ-2..

 =>    'JSON' occurs at least 2 times

<words text="JSON " occurs="occurs at least 2 times">JSON</words>

Desc:  A string containing a word at least twice
Examples:
       Text: JSON is a versatile data format. JSON is considered ...
       Rslt: +

       Text: JSON is a versatile data format.
       Rslt: -
       Why:  JSON occurs only once, two occurrences required.


Demo:  phrase and phrase
------------------------------------------------

***    versatile markup language / diverse data sources #fulltext

 =>    'versatile markup language' ftand 'diverse data sources'

<ft text="versatile markup language / diverse data sources ">
  <words>versatile markup language</words>
  <ftand/>
  <words>diverse data sources</words>
</ft>

Desc:  A string containing two phrases.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of diverse data sources
       Rslt: +

       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: -
       Why:  One of the phrases not found.


Demo:  phrase or phrase
------------------------------------------------

***    versatile markup language | diverse data sources #fulltext

 =>    'versatile markup language' ftor 'diverse data sources'

<ft text="versatile markup language | diverse data sources ">
  <words>versatile markup language</words>
  <ftor/>
  <words>diverse data sources</words>
</ft>

Desc:  A string containing at least one of two phrases.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of diverse data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of many data sources
       Rslt: -
       Why:  One of the phrases not found.


Demo:  phrase and phrase with wildcards
------------------------------------------------

***    versatile markup lang.* / div.* data sources #fulltext

 =>    'versatile markup lang.*' using wildcards ftand 'div.* data sources' using wildcards

<ft text="versatile markup lang.* / div.* data sources ">
  <words wildcards="using wildcards">versatile markup lang.*</words>
  <ftand/>
  <words wildcards="using wildcards">div.* data sources</words>
</ft>

Desc:  A string containing two phrases.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of diverse data sources
       Rslt: +

       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: -
       Why:  One of the phrases not found.


Demo:  phrase and phrase with anchors
------------------------------------------------

***    ^versatile markup language / diverse data sources$ #fulltext

 =>    ('versatile markup language' at start) ftand ('diverse data sources' at end)

<ft text="^versatile markup language / diverse data sources$ ">
  <words atStart="at start">versatile markup language</words>
  <ftand/>
  <words atEnd="at end">diverse data sources</words>
</ft>

Desc:  A string containing two phrases.
Examples:
       Text: versatile markup language, capable of labeling the information content of diverse data sources
       Rslt: +

       Text: XML is a versatile markup language, capable of labeling the information content of diverse data sources
       Rslt: -
       Why:  One of the phrases not found.


Demo:  all words and any word
------------------------------------------------

***    markup language versatile @words / sources targets @anyword #fulltext

 =>    'markup language versatile' all words ftand 'sources targets' any word

<ft text="markup language versatile @words / sources targets @anyword ">
  <words mode="all words">markup language versatile</words>
  <ftand/>
  <words mode="any word">sources targets</words>
</ft>

Desc:  A string containing all words from a list and any word from another list.
Examples:
       Text: versatile markup language, capable of labeling the information content of diverse data sources
       Rslt: +

       Text: XML is a versatile markup language, capable of labeling the information content of diverse data bases
       Rslt: -
       Why:  Did not find a word from "sources" and "targets".

       Text: XML is a versatile language, capable of labeling the information content of diverse data sources
       Rslt: -
       Why:  Did not find all words from "markup", "language" and "versatile".


Demo:  all words or all words
------------------------------------------------

***    markup language versatile @words | data sources diverse @words #fulltext

 =>    'markup language versatile' all words ftor 'data sources diverse' all words

<ft text="markup language versatile @words | data sources diverse @words ">
  <words mode="all words">markup language versatile</words>
  <ftor/>
  <words mode="all words">data sources diverse</words>
</ft>

Desc:  A string containing all words from a list, or all words from a different list.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of diverse data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of many data sources
       Rslt: -
       Why:  A word from the first list ("versatile") and a word from the second list ("diverse") is missing.


Demo:  not
------------------------------------------------

***    ~ content of hidden data sources #fulltext

 =>    ftnot 'content of hidden data sources'

<ft text="~ content of hidden data sources ">
  <ftnot>
    <words>content of hidden data sources</words>
  </ftnot>
</ft>

Desc:  A string not containing a phrase.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text must not contain the phrase "content of hidden data sources".


Demo:  phrase and not phrase
------------------------------------------------

***    versatile markup language ~ hidden data sources #fulltext

 =>    'versatile markup language' ftand ftnot 'hidden data sources'

<ft text="versatile markup language ~ hidden data sources ">
  <words>versatile markup language</words>
  <ftand/>
  <ftnot>
    <words>hidden data sources</words>
  </ftnot>
</ft>

Desc:  A string containing one phrase, not containing another phrase.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text contains the required phrase, but it must not contain the phrase "hidden data sources".


Demo:  phrase and not all words
------------------------------------------------

***    versatile markup language ~ data sources hidden content@words #fulltext

 =>    'versatile markup language' ftand ftnot 'data sources hidden content' all words

<ft text="versatile markup language ~ data sources hidden content@words ">
  <words>versatile markup language</words>
  <ftand/>
  <ftnot>
    <words mode="all words">data sources hidden content</words>
  </ftnot>
</ft>

Desc:  A string containing a phrase, not containing all words from a list.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text contains the required phrase, but it must not contain all words 
                    from this list: "data", "sources", "hidden", "content".


Demo:  phrase and not any word
------------------------------------------------

***    versatile markup language ~ hidden concealed camouflaged@anyword #fulltext

 =>    'versatile markup language' ftand ftnot 'hidden concealed camouflaged' any word

<ft text="versatile markup language ~ hidden concealed camouflaged@anyword ">
  <words>versatile markup language</words>
  <ftand/>
  <ftnot>
    <words mode="any word">hidden concealed camouflaged</words>
  </ftnot>
</ft>

Desc:  A string containing a phrase, not containing any word from a list.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text contains the required phrase, but it must not contain any word from this list: "hidden" "concealed" "camouflage".


Demo:  all words and not phrase
------------------------------------------------

***    XML versatile capable@words ~ hidden data sources #fulltext

 =>    'XML versatile capable' all words ftand ftnot 'hidden data sources'

<ft text="XML versatile capable@words ~ hidden data sources ">
  <words mode="all words">XML versatile capable</words>
  <ftand/>
  <ftnot>
    <words>hidden data sources</words>
  </ftnot>
</ft>

Desc:  A string containing all words from a list, not containing any word from another list.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text contains all required words, but it must not contain the phrase "hidden data sources".


Demo:  all words and not any word
------------------------------------------------

***    XML versatile capable@words ~ hidden concealed camouflaged@anyword #fulltext

 =>    'XML versatile capable' all words ftand ftnot 'hidden concealed camouflaged' any word

<ft text="XML versatile capable@words ~ hidden concealed camouflaged@anyword ">
  <words mode="all words">XML versatile capable</words>
  <ftand/>
  <ftnot>
    <words mode="any word">hidden concealed camouflaged</words>
  </ftnot>
</ft>

Desc:  A string containing all words from a list, not containing any word from another list.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text contains all required words, but it must not contain any word from this list: 
                    "hidden", "concealed", "camouflaged".


Demo:  any word and not any word
------------------------------------------------

***    JSON XML@anyword ~ hidden concealed camouflaged@anyword #fulltext

 =>    'JSON XML' any word ftand ftnot 'hidden concealed camouflaged' any word

<ft text="JSON XML@anyword ~ hidden concealed camouflaged@anyword ">
  <words mode="any word">JSON XML</words>
  <ftand/>
  <ftnot>
    <words mode="any word">hidden concealed camouflaged</words>
  </ftnot>
</ft>

Desc:  A string containing all words from a list, not containing any word from another list.
Examples:
       Text: XML is a versatile markup language, capable of labeling the information content of many data sources
       Rslt: +

       Text: XML is a flexible markup language, capable of labeling the information content of hidden data sources
       Rslt: -
       Why:  Text contains a word from the required list, but it must not contain any word from this list: 
                    "hidden", "concealed", "camouflaged".


Demo:  mild not
------------------------------------------------

***    markup > markup language #fulltext

 =>    'markup' not in 'markup language'

<ft text="markup &gt; markup language ">
  <words>markup</words>
  <notin/>
  <words>markup language</words>
</ft>

Desc:  A complex pattern.
Examples:
       Text: XML is a versatile markup language, with a well-known markup syntax
       Rslt: +

       Text: XML is a versatile markup language, with a well-known syntax
       Rslt: -
       Why:  Word "markup" is ignored if part of the phrase "markup language"


Demo:  complex conditions
------------------------------------------------

***    JSON XML YAML@anyword / (data model | information model) / (serialization | string represent) ~ TEST-INPUT$@c #fulltext s-en

 =>    ('JSON XML YAML' any word ftand ('data model' ftor 'information model') ftand ('serialization' ftor 'string represent') ftand ftnot ('TEST-INPUT' using case sensitive at end)) using stemming using language "en"

<ft text="JSON XML YAML@anyword / (data model | information model) / (serialization | string represent) ~ TEST-INPUT$@c " stemming-and-language="using stemming using language &quot;en&quot;">
  <words mode="any word">JSON XML YAML</words>
  <ftand/>
  <parex>
    <words>data model</words>
    <ftor/>
    <words>information model</words>
  </parex>
  <ftand/>
  <parex>
    <words>serialization</words>
    <ftor/>
    <words>string represent</words>
  </parex>
  <ftand/>
  <ftnot>
    <words atEnd="at end" case="using case sensitive">TEST-INPUT</words>
  </ftnot>
</ft>

Desc:  A complex pattern.
Examples:
       Text: Dealing with XML, it is important to distinguish between the data model and its serialization.
       Rslt: +

       Text: Dealing with XML, it is important to distinguish between the data model and its serialization. test-input
       Rslt: +

       Text: Dealing with XML, it is important to distinguish between the data model and its serialization. TEST-INPUT
       Rslt: -
       Why:  The phrase "TEST-INPUT" must not appear at the end of the text.


Demo:  parentheses with local options
------------------------------------------------

***    JSON XML YAML@anyword / (serialization | string represent)@s-en #fulltext

 =>    'JSON XML YAML' any word ftand ('serialization' ftor 'string represent') using stemming using language "en"

<ft text="JSON XML YAML@anyword / (serialization | string represent)@s-en ">
  <words mode="any word">JSON XML YAML</words>
  <ftand/>
  <parex stemming-and-language="using stemming using language &quot;en&quot;">
    <words>serialization</words>
    <ftor/>
    <words>string represent</words>
  </parex>
</ft>

Desc:  A complex pattern.
Examples:
       Text: Dealing with XML, it is important to distinguish between the data model and its serialization.
       Rslt: +

       Text: Dealing with XML, it is important to distinguish between the data model and surface syntax.
       Rslt: -
       Why:  Neither "serialization" nor "string represent" encountered.

