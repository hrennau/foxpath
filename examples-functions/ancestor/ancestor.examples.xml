<?xml version="1.0" encoding="UTF-8"?>
<function-usage function="ancestor">
    <testenviron> In order to try out the examples, start a command shell and move to folder
        $FOXPATH/examples-data/oxygen-samples. </testenviron>
    <examples>        
        <example label="no filter">
            <description>
                Inspecting a set of docbook documents - which elements contain 'para' elements?
            </description>
            <code>
                fox "docbook//*.xml\\docbook:para\ancestor()\name() => f()"
            </code>
        </example>
        <example label="name filter">
            <description>
                Which section elements ('section', 'sect1', 'sect2', ...) contain 'para' elements?
            </description>
            <code>
                fox "docbook//*.xml\\docbook:para\ancestor('sect*')\name() => f()"
            </code>
        </example>
        <example label="positional filter">
            <description>
                Which top-level elements contain 'module' elements? Note that 
                the last three ancestors are top-level element, root element, 
                document node.
            </description>
            <code>
                fox "docbook//*.xml\\docbook:module\ancestor((), -3)\name() => f()"
            </code>
        </example>
        <example label="combined filters">
            <description>
                Return the nearest ancestor elements of a text node containing 
                a given phrase, skipping any containing 'emphasis' or 'phrase' 
                elements (in search of the smallest containing semantic unit).
            </description>
            <code>
                fox  "docbook//*.xml\\text()
                  [contains-text('available free space on .+ disk')]
                  \ancestor('~emphasis ~phrase', 1) 
                => xwrap('elems')"
            </code>
        </example>
        <example label="option name">
            <description>
                List the text nodes containing non-whitespace and contained by an element with an 'svg' prefix.
                When using option 'name', the name filter deals with the lexical name - nodes in the svg 
                namespace but using a different prefix, or no prefix, are not found.
            </description>
            <code>
                fox "docbook//*.xml\\text()[nonws()][ancestor('*svg:*', (), 'name')]\truncate() => f()"
            </code>
        </example>
    </examples>
</function-usage>
