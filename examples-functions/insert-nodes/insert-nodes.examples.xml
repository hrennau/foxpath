<?xml version="1.0" encoding="UTF-8"?>
<function-usage function="name-diff">
    <testenviron> In order to try out the examples, start a command shell and move to folder
        $FOXPATH/examples-functions/insert-nodes. </testenviron>
    <examples>
        <example tag="Basic use">
            <description> 
                Insert into the root element a 'count' attribute containing the number of airports. 
            </description>
            <code> 
                fox "airports/airports.xml/insert-nodes('\airports', 'count(airport)', '@count')" 
            </code>
        </example>
        <example tag="More complex node construction">
            <description>
                Augment each 'geo' element with a further child element 'coordinates', containing the 
                latitude and longitude rounded to 3 fractional digits.
            </description>
            <code>
                fox "airports/airports.xml/insert-nodes('\\geo', {round(latitude, 3)||'/'||round(longitude, 3)}, 'coordinates')/pretty-node()"                
            </code>
        </example>
        <example tag="Controlling the insertion point">
            <description>
                As the preceding example, but insert new elements as first child of their parent. 
            </description>
            <code>
                fox "airports/airports.xml/insert-nodes('\\geo', {round(latitude, 3)||'/'||round(longitude, 3)}, 'coordinates', 'first')/pretty-node()"
            </code>
        </example>
        <example tag="Insert copied elements">
            <description>
                Insert after every 'temporal' element copies of the child elements of 'temporal'.
            </description>
            <code>
                fox "airports/airports.xml/insert-nodes('\\temporal', '*', (), 'after')/pretty-node()"
            </code>
        </example>
        <example tag="Inserted a constructed element">
            <description>
                Insert an element constructed using function xelem().
            </description>
            <code>
                fox "airports/airports.xml/insert-nodes('\*', {xelem-ec(\\city, 'cities')}, (), 'first')/pretty-node()"
                fox "airports/airports.xml/insert-nodes('\*', 'xelem-ec(\\city, """"cities"""")', (), 'first')/pretty-node()"
            </code>
        </example>
        <example tag="Chain insertions">
            <description>
                Chain two insertions: insert a 'cities' element, followed by an 'ids' element.
            </description>
            <code>
                fox "airports/airports.xml
                /insert-nodes('\*', {xelem-ec(\\city, 'cities')}, (), 'first')
                /insert-nodes('\\cities', {\\@id => string-join(' ')}, 'ids', 'after')
                /pretty-node()"                
                
                fox "airports/airports.xml
                     /insert-nodes('\*', 'xelem-ec(\\city, """"cities"""")', (), 'first')
                     /insert-nodes('\\cities', '\\@id => string-join("""" """")', 'ids', 'after')
                     /pretty-node()"                
            </code>
        </example>
        <example>
            <description>
                Processing a set of documents, chaining two insertions, and write the results into an output folder.
            </description>
            <code>
                fox "airports/*.xml
                /insert-nodes('\*', {xelem-ec(\\city, 'cities')}, (), 'first')
                /insert-nodes('\\cities', {\\@id => string-join(' ')}, 'ids', 'after')
                /pretty-node()/write-doc('output')"                
                
                fox "airports/*.xml
                /insert-nodes('\*', 'xelem-ec(\\city, """"cities"""")', (), 'first')
                /insert-nodes('\\cities', '\\@id => string-join("""" """")', 'ids', 'after')
                /pretty-node()/write-doc('output')"                
            </code>
        </example>
        <example>
            <description>
                Equivalent to the preceding example, using the ec variant of the function which may consume 
                multiple input nodes.
            </description>
            <code>
                fox "airports/*.xml
                => insert-nodes-ec('\*', {xelem-ec(\\city, 'cities')}, (), 'first')
                => insert-nodes-ec('\\cities', {\\@id => string-join(' ')}, 'ids', 'after')
                => pretty-node-ec() => write-doc-ec('output')"                
                
                fox "airports/*.xml
                => insert-nodes-ec('\*', 'xelem-ec(\\city, """"cities"""")', (), 'first')
                => insert-nodes-ec('\\cities', '\\@id => string-join("""" """")', 'ids', 'after')
                => pretty-node-ec() => write-doc-ec('output')"                
            </code>
        </example>
    </examples>
</function-usage>
